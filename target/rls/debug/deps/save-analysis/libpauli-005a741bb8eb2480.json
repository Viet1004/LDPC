{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2","program":"/home/viet1004/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","pauli","--edition=2018","/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=005a741bb8eb2480","-C","extra-filename=-005a741bb8eb2480","--out-dir","/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps","-L","dependency=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps","--extern","serde=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libserde-5e0466a5ac1608e4.rmeta","--extern","sprs=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libsprs-646a2f8faeb1ee86.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/viet1004/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libpauli-005a741bb8eb2480.rmeta"},"prelude":{"crate_id":{"name":"pauli","disambiguator":[16247655212394808497,2585513007530508628]},"crate_root":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src","external_crates":[{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17255007459673538994,10308005785557406899]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1111923456158047016,16902919259693091653]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4206559302939301148,6164973543688958239]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5256837966271238037,14624209252821231605]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7550531950105187004,8150571798412653191]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15335445469838442753,9552689356239597613]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16502730494113453331,739642837530493346]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17056567370692029606,5237526203530126554]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14937216707889756020,8824175777475717960]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17577480307990758245,11665649631686256755]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10532265776820743552,12261914965731844528]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[15918998743166050901,5153345746580364318]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13847123446638245357,191099483651108540]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[8535951946701118478,247082403716274271]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8071155208203251459,9749237191716311885]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[10993643928529734294,4550819794165110057]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[3520407426629514955,6784388313453073637]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[947612539730288161,7851933247975044788]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","num":19,"id":{"name":"serde","disambiguator":[13109242471492608089,452597619827986489]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","num":20,"id":{"name":"serde_derive","disambiguator":[8635578226390175488,9019234005610694067]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":21,"id":{"name":"sprs","disambiguator":[15285541695228990678,12553925998392464462]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":22,"id":{"name":"num_traits","disambiguator":[11758907176880315391,16213556103891505502]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":23,"id":{"name":"num_complex","disambiguator":[7692247684801270035,6571990392729843509]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":24,"id":{"name":"ndarray","disambiguator":[12657185617759368927,9419672928521218665]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":25,"id":{"name":"rawpointer","disambiguator":[3799986900532594637,8288097924864637507]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":26,"id":{"name":"num_integer","disambiguator":[13674086256181150465,18138944901157845274]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":27,"id":{"name":"num_complex","disambiguator":[11067138844037193575,2017791548257536791]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":28,"id":{"name":"matrixmultiply","disambiguator":[11758799202881713347,4793832544119851213]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":29,"id":{"name":"rayon","disambiguator":[5271440316651910950,11836932132169411024]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":30,"id":{"name":"either","disambiguator":[17324749041942919745,17631015617105789982]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":31,"id":{"name":"rayon_core","disambiguator":[5774679291067435048,2934900240586282169]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":32,"id":{"name":"crossbeam_channel","disambiguator":[8465700553016015246,9114169894263752434]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":33,"id":{"name":"cfg_if","disambiguator":[14479479994495409428,8356910125565977381]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":34,"id":{"name":"crossbeam_utils","disambiguator":[14428130060524004346,17285594480345136009]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":35,"id":{"name":"lazy_static","disambiguator":[7443740534153032238,3826169474377493746]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":36,"id":{"name":"crossbeam_deque","disambiguator":[287171032585754357,14087725499859628601]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":37,"id":{"name":"crossbeam_epoch","disambiguator":[2969186238207198273,15785136064806407902]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":38,"id":{"name":"scopeguard","disambiguator":[7299377805955797458,7294591669980585985]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":39,"id":{"name":"memoffset","disambiguator":[6172854601445748818,16404203980590622838]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":40,"id":{"name":"num_cpus","disambiguator":[50032682568882379,13730995347470449892]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":41,"id":{"name":"libc","disambiguator":[5895663687683051243,8327142491242069259]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":42,"id":{"name":"smallvec","disambiguator":[12551364976179206675,737105964580816995]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":43,"id":{"name":"alga","disambiguator":[5430184361444617278,5770152281652302723]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","num":44,"id":{"name":"approx","disambiguator":[14509074868442106239,2955486181328911951]}}],"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":0,"byte_end":417,"line_start":1,"line_end":15,"column_start":1,"column_end":47}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":141},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":320,"byte_end":325,"line_start":11,"line_end":11,"column_start":15,"column_end":20},"alias_span":null,"name":"Pauli","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":343,"byte_end":344,"line_start":12,"line_end":12,"column_start":17,"column_end":18},"alias_span":null,"name":"I","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":143},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":343,"byte_end":344,"line_start":12,"line_end":12,"column_start":17,"column_end":18},"alias_span":null,"name":"I","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":144},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":346,"byte_end":347,"line_start":12,"line_end":12,"column_start":20,"column_end":21},"alias_span":null,"name":"X","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":145},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":346,"byte_end":347,"line_start":12,"line_end":12,"column_start":20,"column_end":21},"alias_span":null,"name":"X","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":349,"byte_end":350,"line_start":12,"line_end":12,"column_start":23,"column_end":24},"alias_span":null,"name":"Y","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":147},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":349,"byte_end":350,"line_start":12,"line_end":12,"column_start":23,"column_end":24},"alias_span":null,"name":"Y","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":352,"byte_end":353,"line_start":12,"line_end":12,"column_start":26,"column_end":27},"alias_span":null,"name":"Z","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":352,"byte_end":353,"line_start":12,"line_end":12,"column_start":26,"column_end":27},"alias_span":null,"name":"Z","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":276},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":390,"byte_end":400,"line_start":15,"line_end":15,"column_start":20,"column_end":30},"alias_span":null,"name":"PauliError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":402,"byte_end":415,"line_start":15,"line_end":15,"column_start":32,"column_end":45},"alias_span":null,"name":"PauliOperator","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":0,"byte_end":417,"line_start":1,"line_end":15,"column_start":1,"column_end":47},"name":"","qualname":"::","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138}],"decl_id":null,"docs":" A library for quantum Pauli operators.","sig":null,"attributes":[{"value":"/ A library for quantum Pauli operators.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":0,"byte_end":42,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":43,"byte_end":46,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This contains a definition of the single-qubit","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":47,"byte_end":97,"line_start":3,"line_end":3,"column_start":1,"column_end":51}},{"value":"/ Pauli operators `I`, `X`, `Y` and `Z` and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":98,"byte_end":143,"line_start":4,"line_end":4,"column_start":1,"column_end":46}},{"value":"/ of general multi-qubit Pauli operators such as `XYZ`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":144,"byte_end":201,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":202,"byte_end":205,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This library is built with error correction in mind","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":206,"byte_end":261,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/ thus the phases are ignored.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/lib.rs","byte_start":262,"byte_end":294,"line_start":8,"line_end":8,"column_start":1,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":142},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":967,"byte_end":968,"line_start":22,"line_end":22,"column_start":5,"column_end":6},"name":"I","qualname":"::base::Pauli::I","value":"Pauli::I","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":144},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":974,"byte_end":975,"line_start":23,"line_end":23,"column_start":5,"column_end":6},"name":"X","qualname":"::base::Pauli::X","value":"Pauli::X","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":146},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":981,"byte_end":982,"line_start":24,"line_end":24,"column_start":5,"column_end":6},"name":"Y","qualname":"::base::Pauli::Y","value":"Pauli::Y","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":148},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":988,"byte_end":989,"line_start":25,"line_end":25,"column_start":5,"column_end":6},"name":"Z","qualname":"::base::Pauli::Z","value":"Pauli::Z","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":141},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":955,"byte_end":960,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Pauli","qualname":"::base::Pauli","value":"pub enum Pauli { I, X, Y, Z, }","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148}],"decl_id":null,"docs":" A single qubit Pauli operator without a phase.","sig":null,"attributes":[{"value":"/ A single qubit Pauli operator without a phase.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":532,"byte_end":582,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":583,"byte_end":586,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ These operators form a multiplicative group","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":587,"byte_end":634,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/ and follow the usual commutation and anti-commutation relations.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":635,"byte_end":703,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":704,"byte_end":707,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":708,"byte_end":721,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":722,"byte_end":725,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":726,"byte_end":733,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use pauli::{I, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":734,"byte_end":762,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":763,"byte_end":766,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(X * Y, Z);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":767,"byte_end":792,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ assert!(X.commutes_with(I));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":793,"byte_end":825,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/ assert!(Y.anticommutes_with(Z));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":826,"byte_end":862,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":863,"byte_end":870,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1310,"byte_end":1327,"line_start":40,"line_end":40,"column_start":12,"column_end":29},"name":"anticommutes_with","qualname":"<Pauli>::anticommutes_with","value":"pub fn anticommutes_with(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the operator anti-commutes with the other operator.","sig":null,"attributes":[{"value":"/ Checks if the operator anti-commutes with the other operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1011,"byte_end":1076,"line_start":29,"line_end":29,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1081,"byte_end":1084,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1089,"byte_end":1102,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1107,"byte_end":1110,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1115,"byte_end":1122,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ use pauli::{I, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1127,"byte_end":1155,"line_start":34,"line_end":34,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1160,"byte_end":1163,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ assert!(X.anticommutes_with(Y));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1168,"byte_end":1204,"line_start":36,"line_end":36,"column_start":5,"column_end":41}},{"value":"/ assert!(Y.anticommutes_with(Z));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1209,"byte_end":1245,"line_start":37,"line_end":37,"column_start":5,"column_end":41}},{"value":"/ assert!(Z.anticommutes_with(X));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1250,"byte_end":1286,"line_start":38,"line_end":38,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1291,"byte_end":1298,"line_start":39,"line_end":39,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1685,"byte_end":1698,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"commutes_with","qualname":"<Pauli>::commutes_with","value":"pub fn commutes_with(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the operator commutes with the other operator.","sig":null,"attributes":[{"value":"/ Checks if the operator commutes with the other operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1403,"byte_end":1463,"line_start":44,"line_end":44,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1468,"byte_end":1471,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1476,"byte_end":1489,"line_start":46,"line_end":46,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1494,"byte_end":1497,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1502,"byte_end":1509,"line_start":48,"line_end":48,"column_start":5,"column_end":12}},{"value":"/ use pauli::{I, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1514,"byte_end":1542,"line_start":49,"line_end":49,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1547,"byte_end":1550,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert!(I.commutes_with(X));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1555,"byte_end":1587,"line_start":51,"line_end":51,"column_start":5,"column_end":37}},{"value":"/ assert!(Y.commutes_with(Y));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1592,"byte_end":1624,"line_start":52,"line_end":52,"column_start":5,"column_end":37}},{"value":"/ assert!(Z.commutes_with(I));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1629,"byte_end":1661,"line_start":53,"line_end":53,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1666,"byte_end":1673,"line_start":54,"line_end":54,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1847,"byte_end":1861,"line_start":60,"line_end":60,"column_start":12,"column_end":26},"name":"is_non_trivial","qualname":"<Pauli>::is_non_trivial","value":"pub fn is_non_trivial(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the operator is not the identity.\n","sig":null,"attributes":[{"value":"/ Checks if the operator is not the identity.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1788,"byte_end":1835,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1962,"byte_end":1972,"line_start":65,"line_end":65,"column_start":12,"column_end":22},"name":"is_trivial","qualname":"<Pauli>::is_trivial","value":"pub fn is_trivial(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the operator is the identity.\n","sig":null,"attributes":[{"value":"/ Checks if the operator is the identity.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":1907,"byte_end":1950,"line_start":64,"line_end":64,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":213},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4391,"byte_end":4404,"line_start":19,"line_end":19,"column_start":12,"column_end":25},"name":"PauliOperator","qualname":"::operator::PauliOperator","value":"PauliOperator {  }","parent":null,"children":[{"krate":0,"index":214}],"decl_id":null,"docs":" A Pauli operator optimized for sparse operations.","sig":null,"attributes":[{"value":"/ A Pauli operator optimized for sparse operations.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4026,"byte_end":4079,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4080,"byte_end":4083,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ A Pauli operator is a string of Paulis","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4084,"byte_end":4126,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/ such as `IXIX` or `XIYIZ`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4127,"byte_end":4157,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"/ However,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4158,"byte_end":4170,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/ we usually only care about the non-identity positions","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4171,"byte_end":4228,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"/ and we refer to the previous as operators as `X_1 X_3`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4229,"byte_end":4287,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/ and `X_0 Y_2 Z_4`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4288,"byte_end":4310,"line_start":17,"line_end":17,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5058,"byte_end":5061,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<PauliOperator>::new","value":"pub fn new(usize, Vec<usize>, Vec<Pauli>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a new Pauli Operator.","sig":null,"attributes":[{"value":"/ Builds a new Pauli Operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4461,"byte_end":4493,"line_start":24,"line_end":24,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4498,"byte_end":4501,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ To build an operator,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4506,"byte_end":4531,"line_start":26,"line_end":26,"column_start":5,"column_end":30}},{"value":"/ we specify the length,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4536,"byte_end":4562,"line_start":27,"line_end":27,"column_start":5,"column_end":31}},{"value":"/ the position of non-identity elements","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4567,"byte_end":4608,"line_start":28,"line_end":28,"column_start":5,"column_end":46}},{"value":"/ and their values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4613,"byte_end":4634,"line_start":29,"line_end":29,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4639,"byte_end":4642,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Exemple","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4647,"byte_end":4660,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4665,"byte_end":4668,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This creates the `XIYIZ` operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4673,"byte_end":4711,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4716,"byte_end":4719,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4724,"byte_end":4731,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4736,"byte_end":4767,"line_start":36,"line_end":36,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4772,"byte_end":4799,"line_start":37,"line_end":37,"column_start":5,"column_end":32}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4804,"byte_end":4875,"line_start":38,"line_end":38,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4880,"byte_end":4887,"line_start":39,"line_end":39,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4892,"byte_end":4895,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4900,"byte_end":4911,"line_start":41,"line_end":41,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4916,"byte_end":4919,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ Panics if a position is greater or equal to the length or if","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4924,"byte_end":4988,"line_start":43,"line_end":43,"column_start":5,"column_end":69}},{"value":"/ the number of positions and Paulis are different.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4993,"byte_end":5046,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5686,"byte_end":5693,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"try_new","qualname":"<PauliOperator>::try_new","value":"pub fn try_new(usize, Vec<usize>, Vec<Pauli>) -> Result<Self, PauliError>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new Pauli Operator or returns an error\n if either a position is greater or equal to the length or if\n the numbers of positions and Paulis are different.","sig":null,"attributes":[{"value":"/ Builds a new Pauli Operator or returns an error","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5217,"byte_end":5268,"line_start":49,"line_end":49,"column_start":5,"column_end":56}},{"value":"/ if either a position is greater or equal to the length or if","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5273,"byte_end":5337,"line_start":50,"line_end":50,"column_start":5,"column_end":69}},{"value":"/ the numbers of positions and Paulis are different.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5342,"byte_end":5396,"line_start":51,"line_end":51,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5401,"byte_end":5404,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Exemple","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5409,"byte_end":5422,"line_start":53,"line_end":53,"column_start":5,"column_end":18}},{"value":"/ This creates the `XIYIZ` operator.  ","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5427,"byte_end":5467,"line_start":54,"line_end":54,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5472,"byte_end":5479,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5484,"byte_end":5515,"line_start":56,"line_end":56,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5520,"byte_end":5547,"line_start":57,"line_end":57,"column_start":5,"column_end":32}},{"value":"/ let operator = PauliOperator::try_new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5552,"byte_end":5627,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ assert!(operator.is_ok());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5632,"byte_end":5662,"line_start":59,"line_end":59,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":5667,"byte_end":5674,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6313,"byte_end":6318,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"empty","qualname":"<PauliOperator>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Pauli operator of zero length.\n","sig":null,"attributes":[{"value":"/ Creates a Pauli operator of zero length.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6257,"byte_end":6301,"line_start":80,"line_end":80,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6974,"byte_end":6987,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"name":"commutes_with","qualname":"<PauliOperator>::commutes_with","value":"pub fn commutes_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if two operators commute.","sig":null,"attributes":[{"value":"/ Checks if two operators commute.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6404,"byte_end":6440,"line_start":87,"line_end":87,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6445,"byte_end":6448,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ If an operator is smaller than the other,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6453,"byte_end":6498,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"/ it is padded with identities.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6503,"byte_end":6536,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6541,"byte_end":6544,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6549,"byte_end":6562,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6567,"byte_end":6570,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6575,"byte_end":6582,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6587,"byte_end":6618,"line_start":95,"line_end":95,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6623,"byte_end":6650,"line_start":96,"line_end":96,"column_start":5,"column_end":32}},{"value":"/ let op1 = PauliOperator::new(5, vec![1, 2, 3], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6655,"byte_end":6721,"line_start":97,"line_end":97,"column_start":5,"column_end":71}},{"value":"/ let op2 = PauliOperator::new(5, vec![2, 3, 4], vec![X, X, X]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6726,"byte_end":6792,"line_start":98,"line_end":98,"column_start":5,"column_end":71}},{"value":"/ let op3 = PauliOperator::new(5, vec![0, 1], vec![Z, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6797,"byte_end":6857,"line_start":99,"line_end":99,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6862,"byte_end":6865,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ assert!(op1.commutes_with(&op2));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6870,"byte_end":6907,"line_start":101,"line_end":101,"column_start":5,"column_end":42}},{"value":"/ assert!(!op1.commutes_with(&op3));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6912,"byte_end":6950,"line_start":102,"line_end":102,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":6955,"byte_end":6962,"line_start":103,"line_end":103,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7807,"byte_end":7824,"line_start":130,"line_end":130,"column_start":12,"column_end":29},"name":"anticommutes_with","qualname":"<PauliOperator>::anticommutes_with","value":"pub fn anticommutes_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if two operators anticommute.","sig":null,"attributes":[{"value":"/ Checks if two operators anticommute.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7225,"byte_end":7265,"line_start":113,"line_end":113,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7270,"byte_end":7273,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ If an operator is smaller than the other,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7278,"byte_end":7323,"line_start":115,"line_end":115,"column_start":5,"column_end":50}},{"value":"/ it is padded with identities.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7328,"byte_end":7361,"line_start":116,"line_end":116,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7366,"byte_end":7369,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7374,"byte_end":7387,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7392,"byte_end":7395,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7400,"byte_end":7407,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7412,"byte_end":7443,"line_start":121,"line_end":121,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7448,"byte_end":7475,"line_start":122,"line_end":122,"column_start":5,"column_end":32}},{"value":"/ let op1 = PauliOperator::new(5, vec![1, 2, 3], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7480,"byte_end":7546,"line_start":123,"line_end":123,"column_start":5,"column_end":71}},{"value":"/ let op2 = PauliOperator::new(5, vec![2, 3, 4], vec![X, X, X]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7551,"byte_end":7617,"line_start":124,"line_end":124,"column_start":5,"column_end":71}},{"value":"/ let op3 = PauliOperator::new(5, vec![0, 1], vec![Z, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7622,"byte_end":7682,"line_start":125,"line_end":125,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7687,"byte_end":7690,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ assert!(!op1.anticommutes_with(&op2));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7695,"byte_end":7737,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"/ assert!(op1.anticommutes_with(&op3));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7742,"byte_end":7783,"line_start":128,"line_end":128,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7788,"byte_end":7795,"line_start":129,"line_end":129,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8385,"byte_end":8389,"line_start":148,"line_end":148,"column_start":12,"column_end":16},"name":"iter","qualname":"<PauliOperator>::iter","value":"pub fn iter(&Self) -> VectorIterator<, Pauli, usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over pairs of positions and Paulis.","sig":null,"attributes":[{"value":"/ Returns an iterator over pairs of positions and Paulis.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7902,"byte_end":7961,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7966,"byte_end":7969,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7974,"byte_end":7987,"line_start":136,"line_end":136,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":7992,"byte_end":7995,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8000,"byte_end":8007,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ # use pauli::{PauliOperator, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8012,"byte_end":8054,"line_start":139,"line_end":139,"column_start":5,"column_end":47}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8059,"byte_end":8130,"line_start":140,"line_end":140,"column_start":5,"column_end":76}},{"value":"/ let mut iter = operator.iter();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8135,"byte_end":8170,"line_start":141,"line_end":141,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8175,"byte_end":8178,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.next(), Some((0, &X)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8183,"byte_end":8226,"line_start":143,"line_end":143,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(iter.next(), Some((2, &Y)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8231,"byte_end":8274,"line_start":144,"line_end":144,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(iter.next(), Some((4, &Z)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8279,"byte_end":8322,"line_start":145,"line_end":145,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8327,"byte_end":8361,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8366,"byte_end":8373,"line_start":147,"line_end":147,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8947,"byte_end":8950,"line_start":166,"line_end":166,"column_start":12,"column_end":15},"name":"get","qualname":"<PauliOperator>::get","value":"pub fn get(&Self, usize) -> Option<Pauli>","parent":null,"children":[],"decl_id":null,"docs":" Returns the Pauli at the given position\n or None if the position is out of bound.","sig":null,"attributes":[{"value":"/ Returns the Pauli at the given position","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8469,"byte_end":8512,"line_start":152,"line_end":152,"column_start":5,"column_end":48}},{"value":"/ or None if the position is out of bound.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8517,"byte_end":8561,"line_start":153,"line_end":153,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8566,"byte_end":8569,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8574,"byte_end":8587,"line_start":155,"line_end":155,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8592,"byte_end":8595,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8600,"byte_end":8607,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ # use pauli::{PauliOperator, I, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8612,"byte_end":8657,"line_start":158,"line_end":158,"column_start":5,"column_end":50}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8662,"byte_end":8733,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8738,"byte_end":8741,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(operator.get(0), Some(X));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8746,"byte_end":8787,"line_start":161,"line_end":161,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(operator.get(1), Some(I));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8792,"byte_end":8833,"line_start":162,"line_end":162,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(operator.get(2), Some(Y));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8838,"byte_end":8879,"line_start":163,"line_end":163,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(operator.get(10), None);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8884,"byte_end":8923,"line_start":164,"line_end":164,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":8928,"byte_end":8935,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9249,"byte_end":9252,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"len","qualname":"<PauliOperator>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the operator.\n","sig":null,"attributes":[{"value":"/ Returns the length of the operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9198,"byte_end":9237,"line_start":176,"line_end":176,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9368,"byte_end":9374,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"weight","qualname":"<PauliOperator>::weight","value":"pub fn weight(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non identity elements.\n","sig":null,"attributes":[{"value":"/ Returns the number of non identity elements.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9308,"byte_end":9356,"line_start":181,"line_end":181,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9776,"byte_end":9797,"line_start":197,"line_end":197,"column_start":12,"column_end":33},"name":"non_trivial_positions","qualname":"<PauliOperator>::non_trivial_positions","value":"pub fn non_trivial_positions(&Self) -> &[usize]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the positions\n where the element is not identity.","sig":null,"attributes":[{"value":"/ Returns a slice of the positions","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9430,"byte_end":9466,"line_start":186,"line_end":186,"column_start":5,"column_end":41}},{"value":"/ where the element is not identity.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9471,"byte_end":9509,"line_start":187,"line_end":187,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9514,"byte_end":9517,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9522,"byte_end":9535,"line_start":189,"line_end":189,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9540,"byte_end":9543,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9548,"byte_end":9555,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ # use pauli::{PauliOperator, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9560,"byte_end":9602,"line_start":192,"line_end":192,"column_start":5,"column_end":47}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9607,"byte_end":9678,"line_start":193,"line_end":193,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9683,"byte_end":9686,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(operator.non_trivial_positions(), &[0, 2, 4]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9691,"byte_end":9752,"line_start":195,"line_end":195,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9757,"byte_end":9764,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10433,"byte_end":10450,"line_start":215,"line_end":215,"column_start":12,"column_end":29},"name":"partition_x_and_z","qualname":"<PauliOperator>::partition_x_and_z","value":"pub fn partition_x_and_z(&Self) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Returns two operators such that there product is the\n original operator and the first contains only Xs and\n the second only Zs.","sig":null,"attributes":[{"value":"/ Returns two operators such that there product is the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9860,"byte_end":9916,"line_start":201,"line_end":201,"column_start":5,"column_end":61}},{"value":"/ original operator and the first contains only Xs and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9921,"byte_end":9977,"line_start":202,"line_end":202,"column_start":5,"column_end":61}},{"value":"/ the second only Zs.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":9982,"byte_end":10005,"line_start":203,"line_end":203,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10010,"byte_end":10013,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10018,"byte_end":10031,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10036,"byte_end":10039,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10044,"byte_end":10051,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ # use pauli::{PauliOperator, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10056,"byte_end":10098,"line_start":208,"line_end":208,"column_start":5,"column_end":47}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10103,"byte_end":10174,"line_start":209,"line_end":209,"column_start":5,"column_end":76}},{"value":"/ let (x_operator, z_operator) = operator.partition_x_and_z();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10179,"byte_end":10243,"line_start":210,"line_end":210,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10248,"byte_end":10251,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x_operator, PauliOperator::new(5, vec![0, 2], vec![X, X]));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10256,"byte_end":10330,"line_start":212,"line_end":212,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(z_operator, PauliOperator::new(5, vec![2, 4], vec![Z, Z]));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10335,"byte_end":10409,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10414,"byte_end":10421,"line_start":214,"line_end":214,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10889,"byte_end":10895,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"x_part","qualname":"<PauliOperator>::x_part","value":"pub fn x_part(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the X part of the operator.","sig":null,"attributes":[{"value":"/ Returns the X part of the operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10526,"byte_end":10565,"line_start":219,"line_end":219,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10570,"byte_end":10573,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10578,"byte_end":10591,"line_start":221,"line_end":221,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10596,"byte_end":10599,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10604,"byte_end":10611,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/ # use pauli::{PauliOperator, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10616,"byte_end":10658,"line_start":224,"line_end":224,"column_start":5,"column_end":47}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10663,"byte_end":10734,"line_start":225,"line_end":225,"column_start":5,"column_end":76}},{"value":"/ let x_operator = operator.x_part();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10739,"byte_end":10778,"line_start":226,"line_end":226,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10783,"byte_end":10786,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x_operator, PauliOperator::new(5, vec![0, 2], vec![X, X]));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10791,"byte_end":10865,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":10870,"byte_end":10877,"line_start":229,"line_end":229,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11619,"byte_end":11625,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"z_part","qualname":"<PauliOperator>::z_part","value":"pub fn z_part(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the Z part of the operator.","sig":null,"attributes":[{"value":"/ Returns the Z part of the operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11256,"byte_end":11295,"line_start":244,"line_end":244,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11300,"byte_end":11303,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11308,"byte_end":11321,"line_start":246,"line_end":246,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11326,"byte_end":11329,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11334,"byte_end":11341,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ # use pauli::{PauliOperator, X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11346,"byte_end":11388,"line_start":249,"line_end":249,"column_start":5,"column_end":47}},{"value":"/ let operator = PauliOperator::new(5, vec![0, 2, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11393,"byte_end":11464,"line_start":250,"line_end":250,"column_start":5,"column_end":76}},{"value":"/ let z_operator = operator.z_part();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11469,"byte_end":11508,"line_start":251,"line_end":251,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11513,"byte_end":11516,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(z_operator, PauliOperator::new(5, vec![2, 4], vec![Z, Z]));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11521,"byte_end":11595,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11600,"byte_end":11607,"line_start":254,"line_end":254,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12582,"byte_end":12595,"line_start":286,"line_end":286,"column_start":12,"column_end":25},"name":"multiply_with","qualname":"<PauliOperator>::multiply_with","value":"pub fn multiply_with(&Self, &Self) -> Result<Self, PauliError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the element-wise product of two operators\n or an Error if they have different lengths.","sig":null,"attributes":[{"value":"/ Returns the element-wise product of two operators","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":11986,"byte_end":12039,"line_start":269,"line_end":269,"column_start":5,"column_end":58}},{"value":"/ or an Error if they have different lengths.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12044,"byte_end":12091,"line_start":270,"line_end":270,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12096,"byte_end":12099,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ For a panicking version, use the `*` operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12104,"byte_end":12154,"line_start":272,"line_end":272,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12159,"byte_end":12162,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12167,"byte_end":12180,"line_start":274,"line_end":274,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12185,"byte_end":12188,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12193,"byte_end":12200,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12205,"byte_end":12236,"line_start":277,"line_end":277,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12241,"byte_end":12268,"line_start":278,"line_end":278,"column_start":5,"column_end":32}},{"value":"/ let op1 = PauliOperator::new(5, vec![1, 2, 3], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12273,"byte_end":12339,"line_start":279,"line_end":279,"column_start":5,"column_end":71}},{"value":"/ let op2 = PauliOperator::new(5, vec![2, 3, 4], vec![Y, X, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12344,"byte_end":12410,"line_start":280,"line_end":280,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12415,"byte_end":12418,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let product = PauliOperator::new(5, vec![1, 3, 4], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12423,"byte_end":12493,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12498,"byte_end":12501,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(op1.multiply_with(&op2), Ok(product))","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12506,"byte_end":12558,"line_start":284,"line_end":284,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":12563,"byte_end":12570,"line_start":285,"line_end":285,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13776,"byte_end":13794,"line_start":316,"line_end":316,"column_start":12,"column_end":30},"name":"into_raw_positions","qualname":"<PauliOperator>::into_raw_positions","value":"pub fn into_raw_positions(Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Converts a PauliOperator to a Vec of its non trivial positions\n consumming the operator.","sig":null,"attributes":[{"value":"/ Converts a PauliOperator to a Vec of its non trivial positions","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13362,"byte_end":13428,"line_start":304,"line_end":304,"column_start":5,"column_end":71}},{"value":"/ consumming the operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13433,"byte_end":13461,"line_start":305,"line_end":305,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13466,"byte_end":13469,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13474,"byte_end":13487,"line_start":307,"line_end":307,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13492,"byte_end":13495,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13500,"byte_end":13507,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13512,"byte_end":13543,"line_start":310,"line_end":310,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13548,"byte_end":13575,"line_start":311,"line_end":311,"column_start":5,"column_end":32}},{"value":"/ let operator = PauliOperator::new(5, vec![1, 2, 3], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13580,"byte_end":13651,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/ let positions = operator.into_raw_positions();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13656,"byte_end":13706,"line_start":313,"line_end":313,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(positions, vec![1, 2, 3]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13711,"byte_end":13752,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13757,"byte_end":13764,"line_start":315,"line_end":315,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14259,"byte_end":14274,"line_start":332,"line_end":332,"column_start":12,"column_end":27},"name":"into_raw_paulis","qualname":"<PauliOperator>::into_raw_paulis","value":"pub fn into_raw_paulis(Self) -> Vec<Pauli>","parent":null,"children":[],"decl_id":null,"docs":" Converts a PauliOperator to a Vec of the Paulis\n consumming the operator.","sig":null,"attributes":[{"value":"/ Converts a PauliOperator to a Vec of the Paulis","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13869,"byte_end":13920,"line_start":320,"line_end":320,"column_start":5,"column_end":56}},{"value":"/ consumming the operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13925,"byte_end":13953,"line_start":321,"line_end":321,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13958,"byte_end":13961,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13966,"byte_end":13979,"line_start":323,"line_end":323,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13984,"byte_end":13987,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":13992,"byte_end":13999,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14004,"byte_end":14035,"line_start":326,"line_end":326,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14040,"byte_end":14067,"line_start":327,"line_end":327,"column_start":5,"column_end":32}},{"value":"/ let operator = PauliOperator::new(5, vec![1, 2, 3], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14072,"byte_end":14143,"line_start":328,"line_end":328,"column_start":5,"column_end":76}},{"value":"/ let paulis = operator.into_raw_paulis();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14148,"byte_end":14192,"line_start":329,"line_end":329,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(paulis, vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14197,"byte_end":14235,"line_start":330,"line_end":330,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14240,"byte_end":14247,"line_start":331,"line_end":331,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14814,"byte_end":14822,"line_start":349,"line_end":349,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<PauliOperator>::into_raw","value":"pub fn into_raw(Self) -> (Vec<usize>, Vec<Pauli>)","parent":null,"children":[],"decl_id":null,"docs":" Converts a PauliOperator to a Vec of the positions and\n a Vec of Paulis consumming the operator.","sig":null,"attributes":[{"value":"/ Converts a PauliOperator to a Vec of the positions and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14349,"byte_end":14407,"line_start":336,"line_end":336,"column_start":5,"column_end":63}},{"value":"/ a Vec of Paulis consumming the operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14412,"byte_end":14456,"line_start":337,"line_end":337,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14461,"byte_end":14464,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14469,"byte_end":14482,"line_start":339,"line_end":339,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14487,"byte_end":14490,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14495,"byte_end":14502,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ # use pauli::PauliOperator;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14507,"byte_end":14538,"line_start":342,"line_end":342,"column_start":5,"column_end":36}},{"value":"/ # use pauli::{X, Y, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14543,"byte_end":14570,"line_start":343,"line_end":343,"column_start":5,"column_end":32}},{"value":"/ let operator = PauliOperator::new(5, vec![1, 2, 3], vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14575,"byte_end":14646,"line_start":344,"line_end":344,"column_start":5,"column_end":76}},{"value":"/ let (positions, paulis) = operator.into_raw();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14651,"byte_end":14701,"line_start":345,"line_end":345,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(positions, vec![1, 2, 3]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14706,"byte_end":14747,"line_start":346,"line_end":346,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(paulis, vec![X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14752,"byte_end":14790,"line_start":347,"line_end":347,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":14795,"byte_end":14802,"line_start":348,"line_end":348,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":277},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15546,"byte_end":15564,"line_start":377,"line_end":377,"column_start":5,"column_end":23},"name":"IncompatibleLength","qualname":"::operator::PauliError::IncompatibleLength","value":"PauliError::IncompatibleLength(usize, usize)","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":281},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15584,"byte_end":15594,"line_start":378,"line_end":378,"column_start":5,"column_end":15},"name":"OutOfBound","qualname":"::operator::PauliError::OutOfBound","value":"PauliError::OutOfBound(usize, usize)","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":276},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15529,"byte_end":15539,"line_start":376,"line_end":376,"column_start":10,"column_end":20},"name":"PauliError","qualname":"::operator::PauliError","value":"pub enum PauliError {\n    IncompatibleLength(usize, usize),\n    OutOfBound(usize, usize),\n}","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":281}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":2,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":999,"byte_end":1004,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":2036,"byte_end":2041,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":2342,"byte_end":2347,"line_start":85,"line_end":85,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4441,"byte_end":4454,"line_start":23,"line_end":23,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15119,"byte_end":15132,"line_start":362,"line_end":362,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15635,"byte_end":15645,"line_start":381,"line_end":381,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":16032,"byte_end":16042,"line_start":394,"line_end":394,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":999,"byte_end":1004,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":2036,"byte_end":2041,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":141},"to":{"krate":2,"index":2909}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/base.rs","byte_start":2342,"byte_end":2347,"line_start":85,"line_end":85,"column_start":18,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":141},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":4441,"byte_end":4454,"line_start":23,"line_end":23,"column_start":6,"column_end":19},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15119,"byte_end":15132,"line_start":362,"line_end":362,"column_start":23,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":213},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":15635,"byte_end":15645,"line_start":381,"line_end":381,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/pauli-0.2.2/src/operator.rs","byte_start":16032,"byte_end":16042,"line_start":394,"line_end":394,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":276},"to":{"krate":1,"index":2326}}]}