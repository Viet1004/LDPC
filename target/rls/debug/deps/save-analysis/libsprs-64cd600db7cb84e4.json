{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0","program":"/home/viet1004/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sprs","--edition=2018","/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alga\"","--cfg","feature=\"default\"","--cfg","feature=\"multi_thread\"","--cfg","feature=\"num_cpus\"","--cfg","feature=\"rayon\"","-C","metadata=64cd600db7cb84e4","-C","extra-filename=-64cd600db7cb84e4","--out-dir","/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps","-L","dependency=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps","--extern","alga=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libalga-5f653c5a9e296c0c.rmeta","--extern","ndarray=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libndarray-d78d658ad0391e32.rmeta","--extern","num_complex=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libnum_complex-7e0c2d8d45af746f.rmeta","--extern","num_traits=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libnum_traits-be0235def4a0f255.rmeta","--extern","num_cpus=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libnum_cpus-558b212f5e0f1352.rmeta","--extern","rayon=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/librayon-ed2df90f79cf88a2.rmeta","--extern","smallvec=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libsmallvec-4c7aa5b72e35eef5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/viet1004/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libsprs-64cd600db7cb84e4.rmeta"},"prelude":{"crate_id":{"name":"sprs","disambiguator":[6514764956837929792,2832094754628661580]},"crate_root":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src","external_crates":[{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17255007459673538994,10308005785557406899]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1111923456158047016,16902919259693091653]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4206559302939301148,6164973543688958239]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5256837966271238037,14624209252821231605]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7550531950105187004,8150571798412653191]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15335445469838442753,9552689356239597613]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16502730494113453331,739642837530493346]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17056567370692029606,5237526203530126554]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14937216707889756020,8824175777475717960]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17577480307990758245,11665649631686256755]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10532265776820743552,12261914965731844528]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[15918998743166050901,5153345746580364318]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13847123446638245357,191099483651108540]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[8535951946701118478,247082403716274271]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8071155208203251459,9749237191716311885]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[10993643928529734294,4550819794165110057]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[3520407426629514955,6784388313453073637]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[947612539730288161,7851933247975044788]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","num":19,"id":{"name":"ndarray","disambiguator":[8021117650748528621,3419590294828977022]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","num":20,"id":{"name":"rawpointer","disambiguator":[3799986900532594637,8288097924864637507]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","num":21,"id":{"name":"num_traits","disambiguator":[11758907176880315391,16213556103891505502]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","num":22,"id":{"name":"num_integer","disambiguator":[15595888037091506902,6462916183863121957]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","num":23,"id":{"name":"num_complex","disambiguator":[12533645865909029083,12672658703935487093]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","num":24,"id":{"name":"approx","disambiguator":[14488528652736850579,12948720952866359417]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","num":25,"id":{"name":"matrixmultiply","disambiguator":[11549857473903792651,7861996465386242808]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":26,"id":{"name":"rayon","disambiguator":[5271440316651910950,11836932132169411024]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":27,"id":{"name":"either","disambiguator":[17324749041942919745,17631015617105789982]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":28,"id":{"name":"rayon_core","disambiguator":[5774679291067435048,2934900240586282169]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":29,"id":{"name":"crossbeam_channel","disambiguator":[8465700553016015246,9114169894263752434]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":30,"id":{"name":"cfg_if","disambiguator":[14479479994495409428,8356910125565977381]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":31,"id":{"name":"crossbeam_utils","disambiguator":[14428130060524004346,17285594480345136009]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":32,"id":{"name":"lazy_static","disambiguator":[7443740534153032238,3826169474377493746]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":33,"id":{"name":"crossbeam_deque","disambiguator":[287171032585754357,14087725499859628601]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":34,"id":{"name":"crossbeam_epoch","disambiguator":[2969186238207198273,15785136064806407902]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":35,"id":{"name":"scopeguard","disambiguator":[7299377805955797458,7294591669980585985]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":36,"id":{"name":"memoffset","disambiguator":[6172854601445748818,16404203980590622838]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":37,"id":{"name":"num_cpus","disambiguator":[50032682568882379,13730995347470449892]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","num":38,"id":{"name":"libc","disambiguator":[5895663687683051243,8327142491242069259]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/special_mats.rs","num":39,"id":{"name":"smallvec","disambiguator":[12551364976179206675,737105964580816995]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","num":40,"id":{"name":"alga","disambiguator":[16819763400157705892,14301495168976901306]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","num":41,"id":{"name":"approx","disambiguator":[14509074868442106239,2955486181328911951]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","num":42,"id":{"name":"num_complex","disambiguator":[10379687150891430141,6480384203410067680]}}],"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":0,"byte_end":5686,"line_start":1,"line_end":201,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1600},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":221507,"byte_end":221528,"line_start":12,"line_end":12,"column_start":25,"column_end":46},"alias_span":null,"name":"reverse_cuthill_mckee","value":"","parent":{"krate":0,"index":1455}},{"kind":"Use","ref_id":{"krate":0,"index":203},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2448,"byte_end":2455,"line_start":92,"line_end":92,"column_start":26,"column_end":33},"alias_span":null,"name":"SpIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":943},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2494,"byte_end":2500,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"alias_span":null,"name":"CsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2515,"byte_end":2521,"line_start":96,"line_end":96,"column_start":14,"column_end":20},"alias_span":null,"name":"IndPtr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3652},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2523,"byte_end":2533,"line_start":96,"line_end":96,"column_start":22,"column_end":32},"alias_span":null,"name":"IndPtrBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2535,"byte_end":2545,"line_start":96,"line_end":96,"column_start":34,"column_end":44},"alias_span":null,"name":"IndPtrView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1447},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2563,"byte_end":2580,"line_start":97,"line_end":97,"column_start":16,"column_end":33},"alias_span":null,"name":"kronecker_product","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":383},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2586,"byte_end":2591,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"alias_span":null,"name":"CsMat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3311},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2593,"byte_end":2602,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"alias_span":null,"name":"CsMatBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":364},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2604,"byte_end":2610,"line_start":98,"line_end":98,"column_start":23,"column_end":29},"alias_span":null,"name":"CsMatI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":391},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2612,"byte_end":2624,"line_start":98,"line_end":98,"column_start":31,"column_end":43},"alias_span":null,"name":"CsMatVecView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2626,"byte_end":2635,"line_start":98,"line_end":98,"column_start":45,"column_end":54},"alias_span":null,"name":"CsMatView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":368},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2637,"byte_end":2647,"line_start":98,"line_end":98,"column_start":56,"column_end":66},"alias_span":null,"name":"CsMatViewI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":388},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2653,"byte_end":2665,"line_start":99,"line_end":99,"column_start":5,"column_end":17},"alias_span":null,"name":"CsMatViewMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2667,"byte_end":2680,"line_start":99,"line_end":99,"column_start":19,"column_end":32},"alias_span":null,"name":"CsMatViewMutI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2682,"byte_end":2693,"line_start":99,"line_end":99,"column_start":34,"column_end":45},"alias_span":null,"name":"CsStructure","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":400},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2695,"byte_end":2707,"line_start":99,"line_end":99,"column_start":47,"column_end":59},"alias_span":null,"name":"CsStructureI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2709,"byte_end":2724,"line_start":99,"line_end":99,"column_start":61,"column_end":76},"alias_span":null,"name":"CsStructureView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2730,"byte_end":2746,"line_start":100,"line_end":100,"column_start":5,"column_end":21},"alias_span":null,"name":"CsStructureViewI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2748,"byte_end":2753,"line_start":100,"line_end":100,"column_start":23,"column_end":28},"alias_span":null,"name":"CsVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3387},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2755,"byte_end":2764,"line_start":100,"line_end":100,"column_start":30,"column_end":39},"alias_span":null,"name":"CsVecBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2766,"byte_end":2772,"line_start":100,"line_end":100,"column_start":41,"column_end":47},"alias_span":null,"name":"CsVecI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2774,"byte_end":2783,"line_start":100,"line_end":100,"column_start":49,"column_end":58},"alias_span":null,"name":"CsVecView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":407},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2785,"byte_end":2795,"line_start":100,"line_end":100,"column_start":60,"column_end":70},"alias_span":null,"name":"CsVecViewI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2801,"byte_end":2813,"line_start":101,"line_end":101,"column_start":5,"column_end":17},"alias_span":null,"name":"CsVecViewMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2815,"byte_end":2828,"line_start":101,"line_end":101,"column_start":19,"column_end":32},"alias_span":null,"name":"CsVecViewMutI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2830,"byte_end":2839,"line_start":101,"line_end":101,"column_start":34,"column_end":43},"alias_span":null,"name":"SparseMat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2841,"byte_end":2847,"line_start":101,"line_end":101,"column_start":45,"column_end":51},"alias_span":null,"name":"TriMat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3442},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2849,"byte_end":2859,"line_start":101,"line_end":101,"column_start":53,"column_end":63},"alias_span":null,"name":"TriMatBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2861,"byte_end":2868,"line_start":101,"line_end":101,"column_start":65,"column_end":72},"alias_span":null,"name":"TriMatI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3467},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2874,"byte_end":2884,"line_start":102,"line_end":102,"column_start":5,"column_end":15},"alias_span":null,"name":"TriMatIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2886,"byte_end":2896,"line_start":102,"line_end":102,"column_start":17,"column_end":27},"alias_span":null,"name":"TriMatView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2898,"byte_end":2909,"line_start":102,"line_end":102,"column_start":29,"column_end":40},"alias_span":null,"name":"TriMatViewI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2911,"byte_end":2924,"line_start":102,"line_end":102,"column_start":42,"column_end":55},"alias_span":null,"name":"TriMatViewMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2926,"byte_end":2940,"line_start":102,"line_end":102,"column_start":57,"column_end":71},"alias_span":null,"name":"TriMatViewMutI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2976,"byte_end":2987,"line_start":105,"line_end":105,"column_start":31,"column_end":42},"alias_span":null,"name":"DenseVector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":120},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2989,"byte_end":3003,"line_start":105,"line_end":105,"column_start":44,"column_end":58},"alias_span":null,"name":"DenseVectorMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3030,"byte_end":3036,"line_start":106,"line_end":106,"column_start":25,"column_end":31},"alias_span":null,"name":"MulAcc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2017},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3073,"byte_end":3085,"line_start":108,"line_end":108,"column_start":35,"column_end":47},"alias_span":null,"name":"is_symmetric","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1738},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3130,"byte_end":3143,"line_start":111,"line_end":111,"column_start":5,"column_end":18},"alias_span":null,"name":"perm_is_valid","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3145,"byte_end":3163,"line_start":111,"line_end":111,"column_start":20,"column_end":38},"alias_span":null,"name":"transform_mat_papt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1730},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3165,"byte_end":3174,"line_start":111,"line_end":111,"column_start":40,"column_end":49},"alias_span":null,"name":"PermOwned","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1731},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3176,"byte_end":3186,"line_start":111,"line_end":111,"column_start":51,"column_end":61},"alias_span":null,"name":"PermOwnedI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1733},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3188,"byte_end":3196,"line_start":111,"line_end":111,"column_start":63,"column_end":71},"alias_span":null,"name":"PermView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1735},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3202,"byte_end":3211,"line_start":112,"line_end":112,"column_start":5,"column_end":14},"alias_span":null,"name":"PermViewI","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3774},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3213,"byte_end":3224,"line_start":112,"line_end":112,"column_start":16,"column_end":27},"alias_span":null,"name":"Permutation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3617},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3253,"byte_end":3270,"line_start":115,"line_end":115,"column_start":24,"column_end":41},"alias_span":null,"name":"CompressedStorage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3620},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3279,"byte_end":3282,"line_start":115,"line_end":115,"column_start":50,"column_end":53},"alias_span":null,"name":"CSC","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3621},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3279,"byte_end":3282,"line_start":115,"line_end":115,"column_start":50,"column_end":53},"alias_span":null,"name":"CSC","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3618},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3284,"byte_end":3287,"line_start":115,"line_end":115,"column_start":55,"column_end":58},"alias_span":null,"name":"CSR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3619},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3284,"byte_end":3287,"line_start":115,"line_end":115,"column_start":55,"column_end":58},"alias_span":null,"name":"CSR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3314,"byte_end":3319,"line_start":117,"line_end":117,"column_start":24,"column_end":29},"alias_span":null,"name":"binop","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1455},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3344,"byte_end":3350,"line_start":118,"line_end":118,"column_start":24,"column_end":30},"alias_span":null,"name":"linalg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1785},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3375,"byte_end":3379,"line_start":119,"line_end":119,"column_start":24,"column_end":28},"alias_span":null,"name":"prod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3404,"byte_end":3408,"line_start":120,"line_end":120,"column_start":24,"column_end":28},"alias_span":null,"name":"smmp","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1992},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3433,"byte_end":3445,"line_start":121,"line_end":121,"column_start":24,"column_end":36},"alias_span":null,"name":"special_mats","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2766},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3470,"byte_end":3474,"line_start":122,"line_end":122,"column_start":24,"column_end":28},"alias_span":null,"name":"visu","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3519,"byte_end":3524,"line_start":125,"line_end":125,"column_start":29,"column_end":34},"alias_span":null,"name":"CsVec","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":3387},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3526,"byte_end":3535,"line_start":125,"line_end":125,"column_start":36,"column_end":45},"alias_span":null,"name":"CsVecBase","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3537,"byte_end":3546,"line_start":125,"line_end":125,"column_start":47,"column_end":56},"alias_span":null,"name":"CsVecView","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3548,"byte_end":3560,"line_start":125,"line_end":125,"column_start":58,"column_end":70},"alias_span":null,"name":"CsVecViewMut","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":2409},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3606,"byte_end":3623,"line_start":128,"line_end":128,"column_start":9,"column_end":26},"alias_span":null,"name":"IntoSparseVecIter","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":3846},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3625,"byte_end":3634,"line_start":128,"line_end":128,"column_start":28,"column_end":37},"alias_span":null,"name":"NnzEither","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":3831},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3636,"byte_end":3644,"line_start":128,"line_end":128,"column_start":39,"column_end":47},"alias_span":null,"name":"NnzIndex","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":3832},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3636,"byte_end":3644,"line_start":128,"line_end":128,"column_start":39,"column_end":47},"alias_span":null,"name":"NnzIndex","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":2445},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3646,"byte_end":3654,"line_start":128,"line_end":128,"column_start":49,"column_end":57},"alias_span":null,"name":"NnzOrZip","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":2392},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3656,"byte_end":3671,"line_start":128,"line_end":128,"column_start":59,"column_end":74},"alias_span":null,"name":"SparseIterTools","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":2340},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3681,"byte_end":3687,"line_start":129,"line_end":129,"column_start":9,"column_end":15},"alias_span":null,"name":"VecDim","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":2353},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3689,"byte_end":3703,"line_start":129,"line_end":129,"column_start":17,"column_end":31},"alias_span":null,"name":"VectorIterator","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":2364},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3705,"byte_end":3722,"line_start":129,"line_end":129,"column_start":33,"column_end":50},"alias_span":null,"name":"VectorIteratorMut","value":"","parent":{"krate":0,"index":3002}},{"kind":"Use","ref_id":{"krate":0,"index":802},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3769,"byte_end":3773,"line_start":133,"line_end":133,"column_start":36,"column_end":40},"alias_span":null,"name":"bmat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":796},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3775,"byte_end":3781,"line_start":133,"line_end":133,"column_start":42,"column_end":48},"alias_span":null,"name":"hstack","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3783,"byte_end":3789,"line_start":133,"line_end":133,"column_start":50,"column_end":56},"alias_span":null,"name":"vstack","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2049},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3826,"byte_end":3841,"line_start":135,"line_end":135,"column_start":34,"column_end":49},"alias_span":null,"name":"assign_to_dense","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4279,"byte_end":4280,"line_start":148,"line_end":148,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4485,"byte_end":4486,"line_start":156,"line_end":156,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":0,"byte_end":5686,"line_start":1,"line_end":201,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":18},{"krate":0,"index":175},{"krate":0,"index":193},{"krate":0,"index":218},{"krate":0,"index":300},{"krate":0,"index":310},{"krate":0,"index":323},{"krate":0,"index":345},{"krate":0,"index":2804},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2849},{"krate":0,"index":2852},{"krate":0,"index":2855},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2864},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":2873},{"krate":0,"index":2876},{"krate":0,"index":2879},{"krate":0,"index":2882},{"krate":0,"index":2885},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2894},{"krate":0,"index":2897},{"krate":0,"index":2900},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2909},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2924},{"krate":0,"index":2927},{"krate":0,"index":2930},{"krate":0,"index":2933},{"krate":0,"index":2936},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":2956},{"krate":0,"index":2959},{"krate":0,"index":2962},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":2971},{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":2981},{"krate":0,"index":2982},{"krate":0,"index":2984},{"krate":0,"index":2987},{"krate":0,"index":2990},{"krate":0,"index":2993},{"krate":0,"index":2996},{"krate":0,"index":2999},{"krate":0,"index":3002},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3045},{"krate":0,"index":3048},{"krate":0,"index":3051},{"krate":0,"index":3054},{"krate":0,"index":3912},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3926},{"krate":0,"index":3055},{"krate":0,"index":3928},{"krate":0,"index":3933},{"krate":0,"index":3934},{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3942},{"krate":0,"index":3056},{"krate":0,"index":3944},{"krate":0,"index":3951},{"krate":0,"index":3952},{"krate":0,"index":3954},{"krate":0,"index":3955},{"krate":0,"index":3957},{"krate":0,"index":3958},{"krate":0,"index":3960}],"decl_id":null,"docs":"sprs is a sparse linear algebra library for Rust.","sig":null,"attributes":[{"value":"*\n\nsprs is a sparse linear algebra library for Rust.\n\nIt features a sparse matrix type, [**`CsMat`**](struct.CsMatBase.html), and a sparse vector type,\n[**`CsVec`**](struct.CsVecBase.html), both based on the\n[compressed storage scheme](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR.2C_CRS_or_Yale_format.29).\n\n## Features\n\n- sparse matrix/sparse matrix addition, multiplication.\n- sparse vector/sparse vector addition, dot product.\n- sparse matrix/dense matrix addition, multiplication.\n- sparse triangular solves.\n- powerful iteration over the sparse structure, enabling easy extension of the library.\n- matrix construction using the [triplet format](struct.TriMatBase.html),\n  vertical and horizontal stacking, block construction.\n- sparse cholesky solver in the separate crate `sprs-ldl`.\n- fully generic integer type for the storage of indices, enabling compact\n  representations.\n- planned interoperability with existing sparse solvers such as `SuiteSparse`.\n\n## Quick Examples\n\n\nMatrix construction:\n\n```rust\nuse sprs::{CsMat, TriMat};\n\nlet mut a = TriMat::new((4, 4));\na.add_triplet(0, 0, 3.0_f64);\na.add_triplet(1, 2, 2.0);\na.add_triplet(3, 0, -2.0);\n\n// This matrix type does not allow computations, and must to\n// converted to a compatible sparse type, using for example\nlet b: CsMat<_> = a.to_csr();\n```\n\nConstructing matrix using the more efficient direct sparse constructor\n\n```rust\nuse sprs::{CsMat, CsVec};\nlet eye : CsMat<f64> = CsMat::eye(3);\nlet a = CsMat::new_csc((3, 3),\n                       vec![0, 2, 4, 5],\n                       vec![0, 1, 0, 2, 2],\n                       vec![1., 2., 3., 4., 5.]);\n```\n\nMatrix vector multiplication:\n\n```rust\nuse sprs::{CsMat, CsVec};\nlet eye = CsMat::eye(5);\nlet x = CsVec::new(5, vec![0, 2, 4], vec![1., 2., 3.]);\nlet y = &eye * &x;\nassert_eq!(x, y);\n```\n\nMatrix matrix multiplication, addition:\n\n```rust\nuse sprs::{CsMat, CsVec};\nlet eye = CsMat::eye(3);\nlet a = CsMat::new_csc((3, 3),\n                       vec![0, 2, 4, 5],\n                       vec![0, 1, 0, 2, 2],\n                       vec![1., 2., 3., 4., 5.]);\nlet b = &eye * &a;\nassert_eq!(a, b.to_csc());\n```\n\n*/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":0,"byte_end":2167,"line_start":1,"line_end":75,"column_start":1,"column_end":3}},{"value":"allow(clippy :: redundant_slicing)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2168,"byte_end":2204,"line_start":76,"line_end":76,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array_backend","qualname":"::array_backend","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":3057},{"krate":0,"index":3061},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":11},{"krate":0,"index":15}],"decl_id":null,"docs":" Fixed size arrays usable for sparse matrices.","sig":null,"attributes":[{"value":"/ Fixed size arrays usable for sparse matrices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5688,"byte_end":5737,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5738,"byte_end":5741,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Mainly useful to create a sparse matrix view over a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5742,"byte_end":5811,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ without allocation.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5812,"byte_end":5835,"line_start":4,"line_end":4,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3057},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5976,"byte_end":5982,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Array2","qualname":"::array_backend::Array2","value":"Array2 { data }","parent":null,"children":[{"krate":0,"index":3059}],"decl_id":null,"docs":" Wrapper around a size 2 array, with `Deref` implementation.\n","sig":null,"attributes":[{"value":"/ Wrapper around a size 2 array, with `Deref` implementation.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5871,"byte_end":5934,"line_start":8,"line_end":8,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3059},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":5996,"byte_end":6000,"line_start":11,"line_end":11,"column_start":9,"column_end":13},"name":"data","qualname":"::array_backend::Array2::data","value":"[T; 2]","parent":{"krate":0,"index":3057},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6561,"byte_end":6572,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"DenseVector","qualname":"::dense_vector::DenseVector","value":"DenseVector: seal::Sealed","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" A trait for types representing dense vectors, useful for expressing\n algorithms such as sparse-dense dot product, or linear solves.","sig":null,"attributes":[{"value":"/ A trait for types representing dense vectors, useful for expressing","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6323,"byte_end":6394,"line_start":5,"line_end":5,"column_start":1,"column_end":72}},{"value":"/ algorithms such as sparse-dense dot product, or linear solves.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6395,"byte_end":6461,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6462,"byte_end":6465,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed, and cannot be implemented outside of the `sprs`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6466,"byte_end":6539,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ crate.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6540,"byte_end":6550,"line_start":9,"line_end":9,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":33},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6598,"byte_end":6603,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Owned","qualname":"::dense_vector::DenseVector::Owned","value":"type Owned;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6614,"byte_end":6620,"line_start":12,"line_end":12,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::dense_vector::DenseVector::Scalar","value":"type Scalar;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6666,"byte_end":6669,"line_start":15,"line_end":15,"column_start":8,"column_end":11},"name":"dim","qualname":"::dense_vector::DenseVector::dim","value":"pub fn dim(&Self) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The dimension of the vector\n","sig":null,"attributes":[{"value":"/ The dimension of the vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6627,"byte_end":6658,"line_start":14,"line_end":14,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6817,"byte_end":6822,"line_start":22,"line_end":22,"column_start":8,"column_end":13},"name":"index","qualname":"::dense_vector::DenseVector::index","value":"pub fn index(&Self, usize) -> &Self::Scalar","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Random access to an element in the vector.","sig":null,"attributes":[{"value":"/ Random access to an element in the vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6692,"byte_end":6738,"line_start":17,"line_end":17,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6743,"byte_end":6746,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6751,"byte_end":6763,"line_start":19,"line_end":19,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6768,"byte_end":6771,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ If the index is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6776,"byte_end":6809,"line_start":21,"line_end":21,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6945,"byte_end":6950,"line_start":25,"line_end":25,"column_start":8,"column_end":13},"name":"zeros","qualname":"::dense_vector::DenseVector::zeros","value":"pub fn zeros(usize) -> Self::Owned","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Create an owned version of this dense vector type, filled with zeros\n","sig":null,"attributes":[{"value":"/ Create an owned version of this dense vector type, filled with zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6865,"byte_end":6937,"line_start":24,"line_end":24,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":7036,"byte_end":7044,"line_start":28,"line_end":28,"column_start":8,"column_end":16},"name":"to_owned","qualname":"::dense_vector::DenseVector::to_owned","value":"pub fn to_owned(&Self) -> Self::Owned","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Copies this vector into an owned version\n","sig":null,"attributes":[{"value":"/ Copies this vector into an owned version","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6984,"byte_end":7028,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":120},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11159,"byte_end":11173,"line_start":246,"line_end":246,"column_start":11,"column_end":25},"name":"DenseVectorMut","qualname":"::dense_vector::DenseVectorMut","value":"DenseVectorMut: DenseVector","parent":null,"children":[{"krate":0,"index":121}],"decl_id":null,"docs":" Trait for dense vectors that can be modified, useful for expressing\n algorithms which compute a resulting dense vector, such as solvers.","sig":null,"attributes":[{"value":"/ Trait for dense vectors that can be modified, useful for expressing","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":10916,"byte_end":10987,"line_start":241,"line_end":241,"column_start":1,"column_end":72}},{"value":"/ algorithms which compute a resulting dense vector, such as solvers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":10988,"byte_end":11059,"line_start":242,"line_end":242,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11060,"byte_end":11063,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed, and cannot be implemented outside of the `sprs`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11064,"byte_end":11137,"line_start":244,"line_end":244,"column_start":1,"column_end":74}},{"value":"/ crate.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11138,"byte_end":11148,"line_start":245,"line_end":245,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11326,"byte_end":11335,"line_start":252,"line_end":252,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::dense_vector::DenseVectorMut::index_mut","value":"pub fn index_mut(&mut Self, usize) -> &mut Self::Scalar","parent":{"krate":0,"index":120},"children":[],"decl_id":null,"docs":" Random mutable access to an element in the vector.","sig":null,"attributes":[{"value":"/ Random mutable access to an element in the vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11193,"byte_end":11247,"line_start":247,"line_end":247,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11252,"byte_end":11255,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11260,"byte_end":11272,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11277,"byte_end":11280,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the index is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11285,"byte_end":11318,"line_start":251,"line_end":251,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12527,"byte_end":12533,"line_start":306,"line_end":306,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::dense_vector::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":175},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::errors","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","parent":null,"children":[{"krate":0,"index":3069},{"krate":0,"index":3079},{"krate":0,"index":3080},{"krate":0,"index":3083},{"krate":0,"index":3085},{"krate":0,"index":3086},{"krate":0,"index":3088},{"krate":0,"index":3095},{"krate":0,"index":3096},{"krate":0,"index":3098},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":3103},{"krate":0,"index":3106},{"krate":0,"index":3107},{"krate":0,"index":3110},{"krate":0,"index":3112},{"krate":0,"index":3113},{"krate":0,"index":3115},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3122},{"krate":0,"index":3124},{"krate":0,"index":3125},{"krate":0,"index":3127},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3144},{"krate":0,"index":3146},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":3148},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3159},{"krate":0,"index":3161},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192}],"decl_id":null,"docs":" Error type for sprs\n","sig":null,"attributes":[{"value":"/ Error type for sprs","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13129,"byte_end":13152,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3070},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13225,"byte_end":13233,"line_start":5,"line_end":5,"column_start":5,"column_end":13},"name":"Unsorted","qualname":"::errors::StructureError::Unsorted","value":"StructureError::Unsorted(&'static str)","parent":{"krate":0,"index":3069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3073},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13253,"byte_end":13265,"line_start":6,"line_end":6,"column_start":5,"column_end":17},"name":"SizeMismatch","qualname":"::errors::StructureError::SizeMismatch","value":"StructureError::SizeMismatch(&'static str)","parent":{"krate":0,"index":3069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3076},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13285,"byte_end":13295,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::errors::StructureError::OutOfRange","value":"StructureError::OutOfRange(&'static str)","parent":{"krate":0,"index":3069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3069},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13204,"byte_end":13218,"line_start":4,"line_end":4,"column_start":10,"column_end":24},"name":"StructureError","qualname":"::errors::StructureError","value":"pub enum StructureError {\n    Unsorted(&'static str),\n    SizeMismatch(&'static str),\n    OutOfRange(&'static str),\n}","parent":null,"children":[{"krate":0,"index":3070},{"krate":0,"index":3073},{"krate":0,"index":3076}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3089},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13407,"byte_end":13415,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"Unsorted","qualname":"::errors::StructureErrorKind::Unsorted","value":"StructureErrorKind::Unsorted","parent":{"krate":0,"index":3088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3091},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13421,"byte_end":13433,"line_start":14,"line_end":14,"column_start":5,"column_end":17},"name":"SizeMismatch","qualname":"::errors::StructureErrorKind::SizeMismatch","value":"StructureErrorKind::SizeMismatch","parent":{"krate":0,"index":3088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3093},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13439,"byte_end":13449,"line_start":15,"line_end":15,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::errors::StructureErrorKind::OutOfRange","value":"StructureErrorKind::OutOfRange","parent":{"krate":0,"index":3088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3088},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13382,"byte_end":13400,"line_start":12,"line_end":12,"column_start":10,"column_end":28},"name":"StructureErrorKind","qualname":"::errors::StructureErrorKind","value":"pub enum StructureErrorKind { Unsorted, SizeMismatch, OutOfRange, }","parent":null,"children":[{"krate":0,"index":3089},{"krate":0,"index":3091},{"krate":0,"index":3093}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"non_exhaustive","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13355,"byte_end":13372,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13487,"byte_end":13491,"line_start":19,"line_end":19,"column_start":12,"column_end":16},"name":"kind","qualname":"<StructureError>::kind","value":"pub fn kind(&Self) -> StructureErrorKind","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3103},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14542,"byte_end":14559,"line_start":53,"line_end":53,"column_start":12,"column_end":29},"name":"ShapeMismatchInfo","qualname":"::errors::ShapeMismatchInfo","value":"ShapeMismatchInfo { expected, received }","parent":null,"children":[{"krate":0,"index":3104},{"krate":0,"index":3105}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3104},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14570,"byte_end":14578,"line_start":54,"line_end":54,"column_start":9,"column_end":17},"name":"expected","qualname":"::errors::ShapeMismatchInfo::expected","value":"(usize, usize)","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3105},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14604,"byte_end":14612,"line_start":55,"line_end":55,"column_start":9,"column_end":17},"name":"received","qualname":"::errors::ShapeMismatchInfo::received","value":"(usize, usize)","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3115},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14685,"byte_end":14703,"line_start":59,"line_end":59,"column_start":12,"column_end":30},"name":"SingularMatrixInfo","qualname":"::errors::SingularMatrixInfo","value":"SingularMatrixInfo { index, reason }","parent":null,"children":[{"krate":0,"index":3116},{"krate":0,"index":3117}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3116},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14714,"byte_end":14719,"line_start":60,"line_end":60,"column_start":9,"column_end":14},"name":"index","qualname":"::errors::SingularMatrixInfo::index","value":"usize","parent":{"krate":0,"index":3115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3117},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14736,"byte_end":14742,"line_start":61,"line_end":61,"column_start":9,"column_end":15},"name":"reason","qualname":"::errors::SingularMatrixInfo::reason","value":"&'static str","parent":{"krate":0,"index":3115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3128},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14841,"byte_end":14854,"line_start":67,"line_end":67,"column_start":5,"column_end":18},"name":"ShapeMismatch","qualname":"::errors::LinalgError::ShapeMismatch","value":"LinalgError::ShapeMismatch(ShapeMismatchInfo)","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3131},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14879,"byte_end":14894,"line_start":68,"line_end":68,"column_start":5,"column_end":20},"name":"NonSquareMatrix","qualname":"::errors::LinalgError::NonSquareMatrix","value":"LinalgError::NonSquareMatrix","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3133},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14900,"byte_end":14914,"line_start":69,"line_end":69,"column_start":5,"column_end":19},"name":"SingularMatrix","qualname":"::errors::LinalgError::SingularMatrix","value":"LinalgError::SingularMatrix(SingularMatrixInfo)","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3136},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14940,"byte_end":14955,"line_start":70,"line_end":70,"column_start":5,"column_end":20},"name":"ThirdPartyError","qualname":"::errors::LinalgError::ThirdPartyError","value":"LinalgError::ThirdPartyError(isize, &'static str)","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3127},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14823,"byte_end":14834,"line_start":66,"line_end":66,"column_start":10,"column_end":21},"name":"LinalgError","qualname":"::errors::LinalgError","value":"pub enum LinalgError {\n    ShapeMismatch(ShapeMismatchInfo),\n    NonSquareMatrix,\n    SingularMatrix(SingularMatrixInfo),\n    ThirdPartyError(isize, &'static str),\n}","parent":null,"children":[{"krate":0,"index":3128},{"krate":0,"index":3131},{"krate":0,"index":3133},{"krate":0,"index":3136}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"non_exhaustive","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14796,"byte_end":14813,"line_start":65,"line_end":65,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3149},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16257,"byte_end":16266,"line_start":109,"line_end":109,"column_start":5,"column_end":14},"name":"Structure","qualname":"::errors::SprsError::Structure","value":"SprsError::Structure(StructureError)","parent":{"krate":0,"index":3148},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3152},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16288,"byte_end":16294,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Linalg","qualname":"::errors::SprsError::Linalg","value":"SprsError::Linalg(LinalgError)","parent":{"krate":0,"index":3148},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3148},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16241,"byte_end":16250,"line_start":108,"line_end":108,"column_start":10,"column_end":19},"name":"SprsError","qualname":"::errors::SprsError","value":"pub enum SprsError { Structure(StructureError), Linalg(LinalgError), }","parent":null,"children":[{"krate":0,"index":3149},{"krate":0,"index":3152}],"decl_id":null,"docs":" Convenience wrapper around more precise error types. Not returned by\n functions in this crate, but can be easily obtained from any error\n returned in this crate using `Into` and `From`.\n","sig":null,"attributes":[{"value":"/ Convenience wrapper around more precise error types. Not returned by","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":15983,"byte_end":16055,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ functions in this crate, but can be easily obtained from any error","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16056,"byte_end":16126,"line_start":104,"line_end":104,"column_start":1,"column_end":71}},{"value":"/ returned in this crate using `Into` and `From`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16127,"byte_end":16178,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"non_exhaustive","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16214,"byte_end":16231,"line_start":107,"line_end":107,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":193},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"indexing","qualname":"::indexing","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":210},{"krate":0,"index":3163},{"krate":0,"index":3172},{"krate":0,"index":3181},{"krate":0,"index":3190},{"krate":0,"index":3199},{"krate":0,"index":3208},{"krate":0,"index":3217}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":203},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17497,"byte_end":17504,"line_start":18,"line_end":18,"column_start":11,"column_end":18},"name":"SpIndex","qualname":"::indexing::SpIndex","value":"SpIndex: Debug + PrimInt + AddAssign<Self> + Default + Send + Sync","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"decl_id":null,"docs":" A sparse matrix index","sig":null,"attributes":[{"value":"/ A sparse matrix index","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17356,"byte_end":17381,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17382,"byte_end":17385,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This is a convenience trait to enable using various integer sizes for sparse","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17386,"byte_end":17466,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ matrix indices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17467,"byte_end":17486,"line_start":17,"line_end":17,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17717,"byte_end":17722,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"index","qualname":"::indexing::SpIndex::index","value":"pub fn index(Self) -> usize","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Convert to usize.","sig":null,"attributes":[{"value":"/ Convert to usize.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17574,"byte_end":17595,"line_start":21,"line_end":21,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17600,"byte_end":17603,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17608,"byte_end":17620,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17625,"byte_end":17628,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ If the integer cannot be represented as an `usize`, eg negative numbers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17633,"byte_end":17709,"line_start":25,"line_end":25,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17777,"byte_end":17786,"line_start":29,"line_end":29,"column_start":8,"column_end":17},"name":"try_index","qualname":"::indexing::SpIndex::try_index","value":"pub fn try_index(Self) -> Option<usize>","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Try convert to usize.\n","sig":null,"attributes":[{"value":"/ Try convert to usize.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17744,"byte_end":17769,"line_start":28,"line_end":28,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17876,"byte_end":17891,"line_start":32,"line_end":32,"column_start":8,"column_end":23},"name":"index_unchecked","qualname":"::indexing::SpIndex::index_unchecked","value":"pub fn index_unchecked(Self) -> usize","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Convert to usize without checking for overflows.\n","sig":null,"attributes":[{"value":"/ Convert to usize without checking for overflows.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17816,"byte_end":17868,"line_start":31,"line_end":31,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":18024,"byte_end":18034,"line_start":39,"line_end":39,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::indexing::SpIndex::from_usize","value":"pub fn from_usize(usize) -> Self","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Convert from usize.","sig":null,"attributes":[{"value":"/ Convert from usize.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17913,"byte_end":17936,"line_start":34,"line_end":34,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17941,"byte_end":17944,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17949,"byte_end":17961,"line_start":36,"line_end":36,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17966,"byte_end":17969,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ If the input overflows the index type.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17974,"byte_end":18016,"line_start":38,"line_end":38,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":18096,"byte_end":18110,"line_start":42,"line_end":42,"column_start":8,"column_end":22},"name":"try_from_usize","qualname":"::indexing::SpIndex::try_from_usize","value":"pub fn try_from_usize(usize) -> Option<Self>","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Try convert from usize.\n","sig":null,"attributes":[{"value":"/ Try convert from usize.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":18061,"byte_end":18088,"line_start":41,"line_end":41,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":18207,"byte_end":18227,"line_start":45,"line_end":45,"column_start":8,"column_end":28},"name":"from_usize_unchecked","qualname":"::indexing::SpIndex::from_usize_unchecked","value":"pub fn from_usize_unchecked(usize) -> Self","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Convert from usize without checking for overflows.\n","sig":null,"attributes":[{"value":"/ Convert from usize without checking for overflows.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":18145,"byte_end":18199,"line_start":44,"line_end":44,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":218},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":3226},{"krate":0,"index":3234},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":3236},{"krate":0,"index":3243},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3248},{"krate":0,"index":3257},{"krate":0,"index":3258},{"krate":0,"index":3260},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":286},{"krate":0,"index":292}],"decl_id":null,"docs":" Serialization and deserialization of sparse matrices\n","sig":null,"attributes":[{"value":"/ Serialization and deserialization of sparse matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":20595,"byte_end":20651,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3227},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":20974,"byte_end":20976,"line_start":18,"line_end":18,"column_start":5,"column_end":7},"name":"Io","qualname":"::io::IoError::Io","value":"IoError::Io(io::Error)","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3230},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":20993,"byte_end":21012,"line_start":19,"line_end":19,"column_start":5,"column_end":24},"name":"BadMatrixMarketFile","qualname":"::io::IoError::BadMatrixMarketFile","value":"IoError::BadMatrixMarketFile","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3232},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21018,"byte_end":21047,"line_start":20,"line_end":20,"column_start":5,"column_end":34},"name":"UnsupportedMatrixMarketFormat","qualname":"::io::IoError::UnsupportedMatrixMarketFormat","value":"IoError::UnsupportedMatrixMarketFormat","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3226},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":20960,"byte_end":20967,"line_start":17,"line_end":17,"column_start":10,"column_end":17},"name":"IoError","qualname":"::io::IoError","value":"pub enum IoError {\n    Io(io::Error),\n    BadMatrixMarketFile,\n    UnsupportedMatrixMarketFormat,\n}","parent":null,"children":[{"krate":0,"index":3227},{"krate":0,"index":3230},{"krate":0,"index":3232}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3249},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":22077,"byte_end":22084,"line_start":67,"line_end":67,"column_start":5,"column_end":12},"name":"General","qualname":"::io::SymmetryMode::General","value":"SymmetryMode::General","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3251},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":22090,"byte_end":22099,"line_start":68,"line_end":68,"column_start":5,"column_end":14},"name":"Hermitian","qualname":"::io::SymmetryMode::Hermitian","value":"SymmetryMode::Hermitian","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3253},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":22105,"byte_end":22114,"line_start":69,"line_end":69,"column_start":5,"column_end":14},"name":"Symmetric","qualname":"::io::SymmetryMode::Symmetric","value":"SymmetryMode::Symmetric","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3255},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":22120,"byte_end":22133,"line_start":70,"line_end":70,"column_start":5,"column_end":18},"name":"SkewSymmetric","qualname":"::io::SymmetryMode::SkewSymmetric","value":"SymmetryMode::SkewSymmetric","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3248},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":22058,"byte_end":22070,"line_start":66,"line_end":66,"column_start":10,"column_end":22},"name":"SymmetryMode","qualname":"::io::SymmetryMode","value":"pub enum SymmetryMode { General, Hermitian, Symmetric, SkewSymmetric, }","parent":null,"children":[{"krate":0,"index":3249},{"krate":0,"index":3251},{"krate":0,"index":3253},{"krate":0,"index":3255}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23257,"byte_end":23275,"line_start":105,"line_end":105,"column_start":8,"column_end":26},"name":"read_matrix_market","qualname":"::io::read_matrix_market","value":"pub fn read_matrix_market<N, I, P>(P) -> Result<TriMatI<N, I>, IoError> where\nI: SpIndex, N: NumCast + Clone, P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read a sparse matrix file in the Matrix Market format and return a\n corresponding triplet matrix.","sig":null,"attributes":[{"value":"/ Read a sparse matrix file in the Matrix Market format and return a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23013,"byte_end":23083,"line_start":100,"line_end":100,"column_start":1,"column_end":71}},{"value":"/ corresponding triplet matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23084,"byte_end":23117,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23118,"byte_end":23121,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Presently, only general matrices are supported, but symmetric and hermitian","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23122,"byte_end":23201,"line_start":103,"line_end":103,"column_start":1,"column_end":80}},{"value":"/ matrices should be supported in the future.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23202,"byte_end":23249,"line_start":104,"line_end":104,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23826,"byte_end":23857,"line_start":122,"line_end":122,"column_start":8,"column_end":39},"name":"read_matrix_market_from_bufread","qualname":"::io::read_matrix_market_from_bufread","value":"pub fn read_matrix_market_from_bufread<N, I, R>(&mut R)\n-> Result<TriMatI<N, I>, IoError> where I: SpIndex, N: NumCast + Clone,\nR: io::BufRead","parent":null,"children":[],"decl_id":null,"docs":" Read a sparse matrix in the Matrix Market format from an `io::BufRead` and return a\n corresponding triplet matrix.","sig":null,"attributes":[{"value":"/ Read a sparse matrix in the Matrix Market format from an `io::BufRead` and return a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23565,"byte_end":23652,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"/ corresponding triplet matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23653,"byte_end":23686,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23687,"byte_end":23690,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Presently, only general matrices are supported, but symmetric and hermitian","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23691,"byte_end":23770,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/ matrices should be supported in the future.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":23771,"byte_end":23818,"line_start":121,"line_end":121,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28792,"byte_end":28811,"line_start":267,"line_end":267,"column_start":8,"column_end":27},"name":"write_matrix_market","qualname":"::io::write_matrix_market","value":"pub fn write_matrix_market<'a, N, I, M, P>(P, M) -> Result<(), io::Error>\nwhere I: 'a + SpIndex + fmt::Display, N: 'a + PrimitiveKind + fmt::Display,\nM: IntoIterator<Item = (&'a N, (I, I))> + SparseMat, P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Write a sparse matrix into the matrix market format.","sig":null,"attributes":[{"value":"/ Write a sparse matrix into the matrix market format.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28432,"byte_end":28488,"line_start":253,"line_end":253,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28489,"byte_end":28492,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28493,"byte_end":28506,"line_start":255,"line_end":255,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28507,"byte_end":28510,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28511,"byte_end":28529,"line_start":257,"line_end":257,"column_start":1,"column_end":19}},{"value":"/ use sprs::{CsMat};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28530,"byte_end":28552,"line_start":258,"line_end":258,"column_start":1,"column_end":23}},{"value":"/ # use std::io;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28553,"byte_end":28571,"line_start":259,"line_end":259,"column_start":1,"column_end":19}},{"value":"/ # fn save_id5() -> Result<(), io::Error> {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28572,"byte_end":28618,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ let save_path = \"/tmp/identity5.mm\";","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28619,"byte_end":28659,"line_start":261,"line_end":261,"column_start":1,"column_end":41}},{"value":"/ let eye : CsMat<f64> = CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28660,"byte_end":28701,"line_start":262,"line_end":262,"column_start":1,"column_end":42}},{"value":"/ sprs::io::write_matrix_market(&save_path, &eye)?;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28702,"byte_end":28755,"line_start":263,"line_end":263,"column_start":1,"column_end":54}},{"value":"/ # Ok(())","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28756,"byte_end":28768,"line_start":264,"line_end":264,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28769,"byte_end":28776,"line_start":265,"line_end":265,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":28777,"byte_end":28784,"line_start":266,"line_end":266,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":292},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":30215,"byte_end":30238,"line_start":315,"line_end":315,"column_start":8,"column_end":31},"name":"write_matrix_market_sym","qualname":"::io::write_matrix_market_sym","value":"pub fn write_matrix_market_sym<'a, N, I, M, P>(P, M, SymmetryMode)\n-> Result<(), io::Error> where I: 'a + SpIndex + fmt::Display, N: 'a +\nPrimitiveKind + fmt::Display, M: IntoIterator<Item = (&'a N, (I, I))> +\nSparseMat, P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Write a symmetric sparse matrix into the matrix market format.","sig":null,"attributes":[{"value":"/ Write a symmetric sparse matrix into the matrix market format.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":29745,"byte_end":29811,"line_start":304,"line_end":304,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":29812,"byte_end":29815,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This function does not enforce the actual symmetry of the matrix,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":29816,"byte_end":29885,"line_start":306,"line_end":306,"column_start":1,"column_end":70}},{"value":"/ instead only the elements below the diagonal are written.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":29886,"byte_end":29947,"line_start":307,"line_end":307,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":29948,"byte_end":29951,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ If `sym` is `SymmetryMode::SkewSymmetric`, the diagonal elements","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":29952,"byte_end":30020,"line_start":309,"line_end":309,"column_start":1,"column_end":69}},{"value":"/ are also ignored.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":30021,"byte_end":30042,"line_start":310,"line_end":310,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":30043,"byte_end":30046,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ Note that this method can also be used to write general sparse","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":30047,"byte_end":30113,"line_start":312,"line_end":312,"column_start":1,"column_end":67}},{"value":"/ matrices, but this would be slightly less efficient than using","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":30114,"byte_end":30180,"line_start":313,"line_end":313,"column_start":1,"column_end":67}},{"value":"/ `write_matrix_market`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":30181,"byte_end":30207,"line_start":314,"line_end":314,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":301},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41502,"byte_end":41508,"line_start":15,"line_end":15,"column_start":11,"column_end":17},"name":"MulAcc","qualname":"::mul_acc::MulAcc","value":"MulAcc<A = Self, B = A>","parent":null,"children":[{"krate":0,"index":304}],"decl_id":null,"docs":" Trait for types that have a multiply-accumulate operation, as required\n in dot products and matrix products.","sig":null,"attributes":[{"value":"/ Trait for types that have a multiply-accumulate operation, as required","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41021,"byte_end":41095,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ in dot products and matrix products.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41096,"byte_end":41136,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41137,"byte_end":41140,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented for numeric types that are `Copy`,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41141,"byte_end":41219,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ however the implementation is open for more complex types, to allow them","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41220,"byte_end":41296,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ to provide the most performant implementation. For instance, we could have","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41297,"byte_end":41375,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ a default implementation for numeric types that are `Clone`, but it would","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41376,"byte_end":41453,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ make possibly unnecessary copies.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41454,"byte_end":41491,"line_start":14,"line_end":14,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41612,"byte_end":41619,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"mul_acc","qualname":"::mul_acc::MulAcc::mul_acc","value":"pub fn mul_acc(&mut Self, &A, &B)","parent":{"krate":0,"index":301},"children":[],"decl_id":null,"docs":" Multiply and accumulate in this variable, formally `*self += a * b`.\n","sig":null,"attributes":[{"value":"/ Multiply and accumulate in this variable, formally `*self += a * b`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41532,"byte_end":41604,"line_start":16,"line_end":16,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":310},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num_kinds","qualname":"::num_kinds","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":3265},{"krate":0,"index":3272},{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":3277},{"krate":0,"index":3278},{"krate":0,"index":3280},{"krate":0,"index":3281},{"krate":0,"index":318},{"krate":0,"index":3283},{"krate":0,"index":3285},{"krate":0,"index":3287},{"krate":0,"index":3289},{"krate":0,"index":3291},{"krate":0,"index":3293},{"krate":0,"index":3295},{"krate":0,"index":3297},{"krate":0,"index":3299},{"krate":0,"index":3301},{"krate":0,"index":3303},{"krate":0,"index":3305},{"krate":0,"index":3307},{"krate":0,"index":3309}],"decl_id":null,"docs":" Trait to be able to know at runtime if a generic scalar is an integer, a float\n or a complex.\n","sig":null,"attributes":[{"value":"/ Trait to be able to know at runtime if a generic scalar is an integer, a float","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42678,"byte_end":42760,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/ or a complex.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42761,"byte_end":42778,"line_start":2,"line_end":2,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3266},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42890,"byte_end":42897,"line_start":8,"line_end":8,"column_start":5,"column_end":12},"name":"Integer","qualname":"::num_kinds::NumKind::Integer","value":"NumKind::Integer","parent":{"krate":0,"index":3265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3268},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42903,"byte_end":42908,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Float","qualname":"::num_kinds::NumKind::Float","value":"NumKind::Float","parent":{"krate":0,"index":3265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3270},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42914,"byte_end":42921,"line_start":10,"line_end":10,"column_start":5,"column_end":12},"name":"Complex","qualname":"::num_kinds::NumKind::Complex","value":"NumKind::Complex","parent":{"krate":0,"index":3265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3265},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42876,"byte_end":42883,"line_start":7,"line_end":7,"column_start":10,"column_end":17},"name":"NumKind","qualname":"::num_kinds::NumKind","value":"pub enum NumKind { Integer, Float, Complex, }","parent":null,"children":[{"krate":0,"index":3266},{"krate":0,"index":3268},{"krate":0,"index":3270}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":318},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42936,"byte_end":42949,"line_start":13,"line_end":13,"column_start":11,"column_end":24},"name":"PrimitiveKind","qualname":"::num_kinds::PrimitiveKind","value":"PrimitiveKind","parent":null,"children":[{"krate":0,"index":319}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":43058,"byte_end":43066,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"num_kind","qualname":"::num_kinds::PrimitiveKind::num_kind","value":"pub fn num_kind() -> NumKind","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Informs whether a generic primitive type contains an integer,\n a float or a complex\n","sig":null,"attributes":[{"value":"/ Informs whether a generic primitive type contains an integer,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":42956,"byte_end":43021,"line_start":14,"line_end":14,"column_start":5,"column_end":70}},{"value":"/ a float or a complex","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/num_kinds.rs","byte_start":43026,"byte_end":43050,"line_start":15,"line_end":15,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":324},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44397,"byte_end":44402,"line_start":6,"line_end":6,"column_start":11,"column_end":16},"name":"Range","qualname":"::range::Range","value":"Range","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326}],"decl_id":null,"docs":" Abstract over `std::ops::{Range,RangeFrom,RangeTo,RangeFull}`\n","sig":null,"attributes":[{"value":"/ Abstract over `std::ops::{Range,RangeFrom,RangeTo,RangeFull}`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44321,"byte_end":44386,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44412,"byte_end":44417,"line_start":7,"line_end":7,"column_start":8,"column_end":13},"name":"start","qualname":"::range::Range::start","value":"pub fn start(&Self) -> usize","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44443,"byte_end":44446,"line_start":9,"line_end":9,"column_start":8,"column_end":11},"name":"end","qualname":"::range::Range::end","value":"pub fn end(&Self) -> Option<usize>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3311},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49556,"byte_end":49565,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"CsMatBase","qualname":"::sparse::CsMatBase","value":"CsMatBase {  }","parent":null,"children":[{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323}],"decl_id":null,"docs":" Compressed matrix in the CSR or CSC format, with sorted indices.","sig":null,"attributes":[{"value":"/ Compressed matrix in the CSR or CSC format, with sorted indices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":45795,"byte_end":45863,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":45864,"byte_end":45867,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This sparse matrix format is the preferred format for performing arithmetic","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":45868,"byte_end":45947,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ operations. Constructing a sparse matrix directly in this format requires","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":45948,"byte_end":46025,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ a deep knowledge of its internals. For easier matrix construction, the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46026,"byte_end":46100,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [triplet format](struct.TripletMatBase) is preferred.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46101,"byte_end":46158,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46159,"byte_end":46162,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The `CsMatBase` type is parameterized by the scalar type `N`, the indexing","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46163,"byte_end":46241,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ type `I`, the indexing storage backend types `IptrStorage` and `IndStorage`,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46242,"byte_end":46322,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ and the value storage backend type `DataStorage`. Convenient aliases are","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46323,"byte_end":46399,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ available to specify frequent variants: [`CsMat`] refers to a sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46400,"byte_end":46479,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ that owns its data, similar to `Vec<T>`; [`CsMatView`] refers to a sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46480,"byte_end":46564,"line_start":25,"line_end":25,"column_start":1,"column_end":85}},{"value":"/ that borrows its data, similar to `& [T]`; and [`CsMatViewMut`] refers to a sparse","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46565,"byte_end":46651,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ matrix borrowing its data, with a mutable borrow for its values. No mutable","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46652,"byte_end":46731,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ borrow is allowed for the structure of the matrix, allowing the invariants","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46732,"byte_end":46810,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ to be preserved.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46811,"byte_end":46831,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46832,"byte_end":46835,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Additionaly, the type aliases [`CsMatI`], [`CsMatViewI`] and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46836,"byte_end":46900,"line_start":31,"line_end":31,"column_start":1,"column_end":65}},{"value":"/ [`CsMatViewMutI`] can be used to choose an index type different from the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46901,"byte_end":46977,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ default `usize`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46978,"byte_end":46998,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":46999,"byte_end":47002,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`CsMat`]: type.CsMat.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47003,"byte_end":47033,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ [`CsMatView`]: type.CsMatView.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47034,"byte_end":47072,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"/ [`CsMatViewMut`]: type.CsMatViewMut.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47073,"byte_end":47117,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/ [`CsMatI`]: type.CsMatI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47118,"byte_end":47150,"line_start":38,"line_end":38,"column_start":1,"column_end":33}},{"value":"/ [`CsMatViewI`]: type.CsMatViewI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47151,"byte_end":47191,"line_start":39,"line_end":39,"column_start":1,"column_end":41}},{"value":"/ [`CsMatViewMutI`]: type.CsMatViewMutI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47192,"byte_end":47238,"line_start":40,"line_end":40,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47239,"byte_end":47242,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ## Storage format","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47243,"byte_end":47264,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47265,"byte_end":47268,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ In the compressed storage format, the non-zero values of a sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47269,"byte_end":47345,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ are stored as the row and column location of the non-zero values, with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47346,"byte_end":47420,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ a compression along the rows (CSR) or columns (CSC) indices. The dimension","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47421,"byte_end":47499,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ along which the storage is compressed is referred to as the *outer dimension*,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47500,"byte_end":47582,"line_start":47,"line_end":47,"column_start":1,"column_end":83}},{"value":"/ the other dimension is called the *inner dimension*. For clarity, the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47583,"byte_end":47656,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ remaining explanation will assume a CSR matrix, but the information stands","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47657,"byte_end":47735,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/ for CSC matrices as well.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47736,"byte_end":47765,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47766,"byte_end":47769,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ### Indptr","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47770,"byte_end":47784,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47785,"byte_end":47788,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ An index pointer array `indptr` of size corresponding to the number of rows","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47789,"byte_end":47868,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ stores the cumulative sum of non-zero elements for each row. For instance,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47869,"byte_end":47947,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ the number of non-zero elements of the i-th row can be obtained by computing","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":47948,"byte_end":48028,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/ `indptr[i + 1] - indptr[i]`. The total number of non-zero elements is thus","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48029,"byte_end":48107,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ `nnz = indptr[nb_rows + 1]`. This index pointer array can then be used to","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48108,"byte_end":48185,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ efficiently index the `indices` and `data` array, which respectively contain","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48186,"byte_end":48266,"line_start":59,"line_end":59,"column_start":1,"column_end":81}},{"value":"/ the column indices and the values of the non-zero elements.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48267,"byte_end":48330,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48331,"byte_end":48334,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ### Indices and data","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48335,"byte_end":48359,"line_start":62,"line_end":62,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48360,"byte_end":48363,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The non-zero locations and values are stored in arrays of size `nnz`, `indices`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48364,"byte_end":48447,"line_start":64,"line_end":64,"column_start":1,"column_end":84}},{"value":"/ and `data`. For row `i`, the non-zeros are located in the slices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48448,"byte_end":48516,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/ `indices[indptr[i]..indptr[i+1]]` and `data[indptr[i]..indptr[i+1]]`. We","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48517,"byte_end":48593,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ require and enforce sorted indices for each row.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48594,"byte_end":48646,"line_start":67,"line_end":67,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48647,"byte_end":48650,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ## Construction","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48651,"byte_end":48670,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48671,"byte_end":48674,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ A sparse matrix can be directly constructed by providing its index pointer,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48675,"byte_end":48754,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"/ indices and data arrays. The coherence of the provided structure is then","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48755,"byte_end":48831,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ verified.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48832,"byte_end":48845,"line_start":73,"line_end":73,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48846,"byte_end":48849,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ For situations where the compressed structure is hard to figure out up front,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48850,"byte_end":48931,"line_start":75,"line_end":75,"column_start":1,"column_end":82}},{"value":"/ the [triplet format](struct.TriMatBase.html) can be used. A matrix in the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":48932,"byte_end":49009,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ triplet format can then be efficiently converted to a `CsMat`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49010,"byte_end":49076,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49077,"byte_end":49080,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Alternately, a sparse matrix can be constructed from other sparse matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49081,"byte_end":49159,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ using [`vstack`], [`hstack`] or [`bmat`].","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49160,"byte_end":49205,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49206,"byte_end":49209,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`vstack`]: fn.vstack.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49210,"byte_end":49240,"line_start":82,"line_end":82,"column_start":1,"column_end":31}},{"value":"/ [`hstack`]: fn.hstack.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49241,"byte_end":49271,"line_start":83,"line_end":83,"column_start":1,"column_end":31}},{"value":"/ [`bmat`]: fn.bmat.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":49272,"byte_end":49298,"line_start":84,"line_end":84,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":364},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50001,"byte_end":50007,"line_start":111,"line_end":111,"column_start":10,"column_end":16},"name":"CsMatI","qualname":"::sparse::CsMatI","value":"CsMatBase<N, I, Vec<Iptr>, Vec<I>, Vec<N>, Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":368},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50089,"byte_end":50099,"line_start":113,"line_end":113,"column_start":10,"column_end":20},"name":"CsMatViewI","qualname":"::sparse::CsMatViewI","value":"CsMatBase<N, I, &'a [Iptr], &'a [I], &'a [N], Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":373},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50188,"byte_end":50201,"line_start":115,"line_end":115,"column_start":10,"column_end":23},"name":"CsMatViewMutI","qualname":"::sparse::CsMatViewMutI","value":"CsMatBase<N, I, &'a [Iptr], &'a [I], &'a mut [N], Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":383},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50399,"byte_end":50404,"line_start":120,"line_end":120,"column_start":10,"column_end":15},"name":"CsMat","qualname":"::sparse::CsMat","value":"CsMatI<N, usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":385},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50437,"byte_end":50446,"line_start":121,"line_end":121,"column_start":10,"column_end":19},"name":"CsMatView","qualname":"::sparse::CsMatView","value":"CsMatViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":388},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50491,"byte_end":50503,"line_start":122,"line_end":122,"column_start":10,"column_end":22},"name":"CsMatViewMut","qualname":"::sparse::CsMatViewMut","value":"CsMatViewMutI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":391},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50615,"byte_end":50627,"line_start":124,"line_end":124,"column_start":10,"column_end":22},"name":"CsMatVecView","qualname":"::sparse::CsMatVecView","value":"CsMatVecView_","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":394},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50676,"byte_end":50692,"line_start":126,"line_end":126,"column_start":10,"column_end":26},"name":"CsStructureViewI","qualname":"::sparse::CsStructureViewI","value":"CsMatViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50750,"byte_end":50765,"line_start":127,"line_end":127,"column_start":10,"column_end":25},"name":"CsStructureView","qualname":"::sparse::CsStructureView","value":"CsStructureViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":400},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50810,"byte_end":50822,"line_start":128,"line_end":128,"column_start":10,"column_end":22},"name":"CsStructureI","qualname":"::sparse::CsStructureI","value":"CsMatI<(), I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":403},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50868,"byte_end":50879,"line_start":129,"line_end":129,"column_start":10,"column_end":21},"name":"CsStructure","qualname":"::sparse::CsStructure","value":"CsStructureI<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3387},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52527,"byte_end":52536,"line_start":165,"line_end":165,"column_start":12,"column_end":21},"name":"CsVecBase","qualname":"::sparse::CsVecBase","value":"CsVecBase {  }","parent":null,"children":[{"krate":0,"index":3392},{"krate":0,"index":3393},{"krate":0,"index":3394}],"decl_id":null,"docs":" A sparse vector, storing the indices of its non-zero data.","sig":null,"attributes":[{"value":"/ A sparse vector, storing the indices of its non-zero data.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50904,"byte_end":50966,"line_start":131,"line_end":131,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50967,"byte_end":50970,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ A `CsVec` represents a sparse vector by storing a sorted `indices()` array","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":50971,"byte_end":51049,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ containing the locations of the non-zero values and a `data()` array","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51050,"byte_end":51122,"line_start":134,"line_end":134,"column_start":1,"column_end":73}},{"value":"/ containing the corresponding values. The format is compatible with `CsMat`,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51123,"byte_end":51202,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ ie a `CsVec` can represent the row of a CSR matrix without any copying.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51203,"byte_end":51278,"line_start":136,"line_end":136,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51279,"byte_end":51282,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ Similar to [`CsMat`] and [`TriMat`], the `CsVecBase` type is parameterized","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51283,"byte_end":51361,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ over the indexing storage backend `IStorage` and the data storage backend","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51362,"byte_end":51439,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ `DStorage`. Type aliases are provided for common cases: [`CsVec`] represents","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51440,"byte_end":51520,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/ a sparse vector owning its data, with `Vec`s as storage backends;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51521,"byte_end":51590,"line_start":141,"line_end":141,"column_start":1,"column_end":70}},{"value":"/ [`CsVecView`] represents a sparse vector borrowing its data, using slices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51591,"byte_end":51668,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ as storage backends; and [`CsVecViewMut`] represents a sparse vector that","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51669,"byte_end":51746,"line_start":143,"line_end":143,"column_start":1,"column_end":78}},{"value":"/ mutably borrows its data (but immutably borrows its indices).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51747,"byte_end":51812,"line_start":144,"line_end":144,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51813,"byte_end":51816,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ Additionaly, the type aliases [`CsVecI`], [`CsVecViewI`], and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51817,"byte_end":51882,"line_start":146,"line_end":146,"column_start":1,"column_end":66}},{"value":"/ [`CsVecViewMutI`] can be used to choose an index type different from the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51883,"byte_end":51959,"line_start":147,"line_end":147,"column_start":1,"column_end":77}},{"value":"/ default `usize`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51960,"byte_end":51980,"line_start":148,"line_end":148,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51981,"byte_end":51984,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ [`CsMat`]: struct.CsMatBase.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":51985,"byte_end":52021,"line_start":150,"line_end":150,"column_start":1,"column_end":37}},{"value":"/ [`TriMat`]: struct.TriMatBase.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52022,"byte_end":52060,"line_start":151,"line_end":151,"column_start":1,"column_end":39}},{"value":"/ [`CsVec`]: type.CsVec.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52061,"byte_end":52091,"line_start":152,"line_end":152,"column_start":1,"column_end":31}},{"value":"/ [`CsVecView`]: type.CsVecView.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52092,"byte_end":52130,"line_start":153,"line_end":153,"column_start":1,"column_end":39}},{"value":"/ [`CsVecViewMut`]: type.CsVecViewMut.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52131,"byte_end":52175,"line_start":154,"line_end":154,"column_start":1,"column_end":45}},{"value":"/ [`CsVecI`]: type.CsVecI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52176,"byte_end":52208,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/ [`CsVecViewI`]: type.CsVecViewI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52209,"byte_end":52249,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ [`CsVecViewMutI`]: type.CsVecViewMutI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52250,"byte_end":52296,"line_start":157,"line_end":157,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":404},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52729,"byte_end":52735,"line_start":175,"line_end":175,"column_start":10,"column_end":16},"name":"CsVecI","qualname":"::sparse::CsVecI","value":"CsVecBase<Vec<I>, Vec<N>, N, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":407},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52794,"byte_end":52804,"line_start":176,"line_end":176,"column_start":10,"column_end":20},"name":"CsVecViewI","qualname":"::sparse::CsVecViewI","value":"CsVecBase<&'a [I], &'a [N], N, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":411},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52869,"byte_end":52882,"line_start":177,"line_end":177,"column_start":10,"column_end":23},"name":"CsVecViewMutI","qualname":"::sparse::CsVecViewMutI","value":"CsVecBase<&'a [I], &'a mut [N], N, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":415},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":52956,"byte_end":52965,"line_start":180,"line_end":180,"column_start":10,"column_end":19},"name":"CsVecView","qualname":"::sparse::CsVecView","value":"CsVecViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":418},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53003,"byte_end":53015,"line_start":181,"line_end":181,"column_start":10,"column_end":22},"name":"CsVecViewMut","qualname":"::sparse::CsVecViewMut","value":"CsVecViewMutI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":421},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53056,"byte_end":53061,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"CsVec","qualname":"::sparse::CsVec","value":"CsVecI<N>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3442},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55344,"byte_end":55354,"line_start":228,"line_end":228,"column_start":12,"column_end":22},"name":"TriMatBase","qualname":"::sparse::TriMatBase","value":"TriMatBase {  }","parent":null,"children":[{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448},{"krate":0,"index":3449}],"decl_id":null,"docs":" Sparse matrix in the triplet format.","sig":null,"attributes":[{"value":"/ Sparse matrix in the triplet format.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53079,"byte_end":53119,"line_start":184,"line_end":184,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53120,"byte_end":53123,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Sparse matrices in the triplet format use three arrays of equal sizes (accessible through the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53124,"byte_end":53221,"line_start":186,"line_end":186,"column_start":1,"column_end":98}},{"value":"/ methods [`row_inds`], [`col_inds`], [`data`]), the first one","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53222,"byte_end":53286,"line_start":187,"line_end":187,"column_start":1,"column_end":65}},{"value":"/ storing the row indices of non-zero values, the second storing the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53287,"byte_end":53357,"line_start":188,"line_end":188,"column_start":1,"column_end":71}},{"value":"/ corresponding column indices and the last array storing the corresponding","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53358,"byte_end":53435,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/ scalar value. If a non-zero location is repeated in the arrays, the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53436,"byte_end":53507,"line_start":190,"line_end":190,"column_start":1,"column_end":72}},{"value":"/ non-zero value is taken as the sum of the corresponding scalar entries.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53508,"byte_end":53583,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53584,"byte_end":53587,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [`row_inds`]: struct.TriMatBase.html#method.row_inds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53588,"byte_end":53644,"line_start":193,"line_end":193,"column_start":1,"column_end":57}},{"value":"/ [`col_inds`]: struct.TriMatBase.html#method.col_inds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53645,"byte_end":53701,"line_start":194,"line_end":194,"column_start":1,"column_end":57}},{"value":"/ [`data`]: struct.TriMatBase.html#method.data","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53702,"byte_end":53750,"line_start":195,"line_end":195,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53751,"byte_end":53754,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This format is useful for iteratively building a sparse matrix, since the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53755,"byte_end":53832,"line_start":197,"line_end":197,"column_start":1,"column_end":78}},{"value":"/ various non-zero entries can be specified in any order, or even partially","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53833,"byte_end":53910,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"/ as is common in physics with partial derivatives equations.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53911,"byte_end":53974,"line_start":199,"line_end":199,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53975,"byte_end":53978,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This format cannot be used for arithmetic operations. Arithmetic operations","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":53979,"byte_end":54058,"line_start":201,"line_end":201,"column_start":1,"column_end":80}},{"value":"/ are more efficient in the [compressed format](struct.CsMatBase.html).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54059,"byte_end":54132,"line_start":202,"line_end":202,"column_start":1,"column_end":74}},{"value":"/ A matrix in the triplet format can be converted to the compressed format","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54133,"byte_end":54209,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ using the methods [`to_csc`] and [`to_csr`].","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54210,"byte_end":54258,"line_start":204,"line_end":204,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54259,"byte_end":54262,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ [`to_csc`]: struct.TriMatBase.html#method.to_csc","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54263,"byte_end":54315,"line_start":206,"line_end":206,"column_start":1,"column_end":53}},{"value":"/ [`to_csr`]: struct.TriMatBase.html#method.to_csr","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54316,"byte_end":54368,"line_start":207,"line_end":207,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54369,"byte_end":54372,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ The `TriMatBase` type is parameterized by the storage type for the row and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54373,"byte_end":54451,"line_start":209,"line_end":209,"column_start":1,"column_end":79}},{"value":"/ column indices, `IStorage`, and by the storage type for the non-zero values","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54452,"byte_end":54531,"line_start":210,"line_end":210,"column_start":1,"column_end":80}},{"value":"/ `DStorage`. Convenient aliases are availaible to specify frequent variant:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54532,"byte_end":54610,"line_start":211,"line_end":211,"column_start":1,"column_end":79}},{"value":"/ [`TriMat`] refers to a triplet matrix owning the storage of its indices and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54611,"byte_end":54690,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ and values, [`TriMatView`] refers to a triplet matrix with slices to store","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54691,"byte_end":54769,"line_start":213,"line_end":213,"column_start":1,"column_end":79}},{"value":"/ its indices and values, while [`TriMatViewMut`] refers to a a triplet matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54770,"byte_end":54850,"line_start":214,"line_end":214,"column_start":1,"column_end":81}},{"value":"/ using mutable slices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54851,"byte_end":54876,"line_start":215,"line_end":215,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54877,"byte_end":54880,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Additionaly, the type aliases [`TriMatI`], [`TriMatViewI`] and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54881,"byte_end":54947,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"/ [`TriMatViewMutI`] can be used to choose an index type different from the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":54948,"byte_end":55025,"line_start":218,"line_end":218,"column_start":1,"column_end":78}},{"value":"/ default `usize`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55026,"byte_end":55046,"line_start":219,"line_end":219,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55047,"byte_end":55050,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ [`TriMat`]: type.TriMat.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55051,"byte_end":55083,"line_start":221,"line_end":221,"column_start":1,"column_end":33}},{"value":"/ [`TriMatView`]: type.TriMatView.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55084,"byte_end":55124,"line_start":222,"line_end":222,"column_start":1,"column_end":41}},{"value":"/ [`TriMatViewMut`]: type.TriMatViewMut.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55125,"byte_end":55171,"line_start":223,"line_end":223,"column_start":1,"column_end":47}},{"value":"/ [`TriMatI`]: type.TriMatI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55172,"byte_end":55206,"line_start":224,"line_end":224,"column_start":1,"column_end":35}},{"value":"/ [`TriMatViewI`]: type.TriMatViewI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55207,"byte_end":55249,"line_start":225,"line_end":225,"column_start":1,"column_end":43}},{"value":"/ [`TriMatViewMutI`]: type.TriMatViewMutI.html","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55250,"byte_end":55298,"line_start":226,"line_end":226,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55491,"byte_end":55498,"line_start":236,"line_end":236,"column_start":10,"column_end":17},"name":"TriMatI","qualname":"::sparse::TriMatI","value":"TriMatBase<Vec<I>, Vec<N>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":426},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55544,"byte_end":55555,"line_start":237,"line_end":237,"column_start":10,"column_end":21},"name":"TriMatViewI","qualname":"::sparse::TriMatViewI","value":"TriMatBase<&'a [I], &'a [N]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":430},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55607,"byte_end":55621,"line_start":238,"line_end":238,"column_start":10,"column_end":24},"name":"TriMatViewMutI","qualname":"::sparse::TriMatViewMutI","value":"TriMatBase<&'a mut [I], &'a mut [N]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":434},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55682,"byte_end":55688,"line_start":240,"line_end":240,"column_start":10,"column_end":16},"name":"TriMat","qualname":"::sparse::TriMat","value":"TriMatI<N, usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":436},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55722,"byte_end":55732,"line_start":241,"line_end":241,"column_start":10,"column_end":20},"name":"TriMatView","qualname":"::sparse::TriMatView","value":"TriMatViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":439},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55778,"byte_end":55791,"line_start":242,"line_end":242,"column_start":10,"column_end":23},"name":"TriMatViewMut","qualname":"::sparse::TriMatViewMut","value":"TriMatViewMutI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3467},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56263,"byte_end":56273,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"TriMatIter","qualname":"::sparse::TriMatIter","value":"TriMatIter {  }","parent":null,"children":[{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3476}],"decl_id":null,"docs":" An iterator over elements of a sparse matrix, in the triplet format","sig":null,"attributes":[{"value":"/ An iterator over elements of a sparse matrix, in the triplet format","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55832,"byte_end":55903,"line_start":244,"line_end":244,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55904,"byte_end":55907,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ The dataypes RI, CI, and DI are iterators yielding the row, column and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55908,"byte_end":55982,"line_start":246,"line_end":246,"column_start":1,"column_end":75}},{"value":"/ values of non-zero entries.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":55983,"byte_end":56014,"line_start":247,"line_end":247,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56015,"byte_end":56018,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ As in `TriMat`, no order guarantee is provided and the same location can","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56019,"byte_end":56095,"line_start":249,"line_end":249,"column_start":1,"column_end":77}},{"value":"/ appear multiple times. The non-zero value is then considered as the sum","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56096,"byte_end":56171,"line_start":250,"line_end":250,"column_start":1,"column_end":76}},{"value":"/ of all the entries sharing its location.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56172,"byte_end":56216,"line_start":251,"line_end":251,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56899,"byte_end":56908,"line_start":274,"line_end":274,"column_start":11,"column_end":20},"name":"SparseMat","qualname":"::sparse::SparseMat","value":"SparseMat","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" A trait for common members of sparse matrices\n","sig":null,"attributes":[{"value":"/ A trait for common members of sparse matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56839,"byte_end":56888,"line_start":273,"line_end":273,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56960,"byte_end":56964,"line_start":276,"line_end":276,"column_start":8,"column_end":12},"name":"rows","qualname":"::sparse::SparseMat::rows","value":"pub fn rows(&Self) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" The number of rows of this matrix\n","sig":null,"attributes":[{"value":"/ The number of rows of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56915,"byte_end":56952,"line_start":275,"line_end":275,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":57035,"byte_end":57039,"line_start":279,"line_end":279,"column_start":8,"column_end":12},"name":"cols","qualname":"::sparse::SparseMat::cols","value":"pub fn cols(&Self) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" The number of columns of this matrix\n","sig":null,"attributes":[{"value":"/ The number of columns of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":56987,"byte_end":57027,"line_start":278,"line_end":278,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":57111,"byte_end":57114,"line_start":282,"line_end":282,"column_start":8,"column_end":11},"name":"nnz","qualname":"::sparse::SparseMat::nnz","value":"pub fn nnz(&Self) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" The number of nonzeros of this matrix\n","sig":null,"attributes":[{"value":"/ The number of nonzeros of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":57062,"byte_end":57103,"line_start":281,"line_end":281,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":558},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binop","qualname":"::sparse::binop","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":623},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":648},{"krate":0,"index":667},{"krate":0,"index":3497},{"krate":0,"index":3507},{"krate":0,"index":3517},{"krate":0,"index":3527},{"krate":0,"index":3537},{"krate":0,"index":3547},{"krate":0,"index":3557},{"krate":0,"index":3567},{"krate":0,"index":3577},{"krate":0,"index":3587},{"krate":0,"index":3597},{"krate":0,"index":3607},{"krate":0,"index":678},{"krate":0,"index":685},{"krate":0,"index":692},{"krate":0,"index":707},{"krate":0,"index":720},{"krate":0,"index":728},{"krate":0,"index":734}],"decl_id":null,"docs":" Sparse matrix addition, subtraction\n","sig":null,"attributes":[{"value":"/ Sparse matrix addition, subtraction","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":63260,"byte_end":63299,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":66336,"byte_end":66356,"line_start":115,"line_end":115,"column_start":8,"column_end":28},"name":"mul_mat_same_storage","qualname":"::sparse::binop::mul_mat_same_storage","value":"pub fn mul_mat_same_storage<Lhs, Rhs, Res, I, Iptr, Mat1, Mat2>(&Mat1, &Mat2)\n-> CsMatI<Res, I, Iptr> where Lhs: num_traits::Zero + PartialEq + Clone,\nRhs: num_traits::Zero + PartialEq + Clone, Res: num_traits::Zero + PartialEq +\nClone, for<'r> &'r Lhs: std::ops::Mul<&'r Rhs, Output = Res>, I: SpIndex,\nIptr: SpIndex, Mat1: SpMatView<Lhs, I, Iptr>, Mat2: SpMatView<Rhs, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Sparse matrix scalar multiplication, with same storage type\n","sig":null,"attributes":[{"value":"/ Sparse matrix scalar multiplication, with same storage type","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":66265,"byte_end":66328,"line_start":114,"line_end":114,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68191,"byte_end":68202,"line_start":176,"line_end":176,"column_start":8,"column_end":19},"name":"csmat_binop","qualname":"::sparse::binop::csmat_binop","value":"pub fn csmat_binop<Lhs, Rhs, Res, I, Iptr,\n                   F>(CsMatViewI<, Lhs, I, Iptr>, CsMatViewI<, Rhs, I, Iptr>,\n                      F) -> CsMatI<Res, I, Iptr> where Lhs: num_traits::Zero +\nPartialEq + Clone, Rhs: num_traits::Zero + PartialEq + Clone,\nRes: num_traits::Zero + PartialEq + Clone, I: SpIndex, Iptr: SpIndex,\nF: Fn(&Lhs, &Rhs) -> Res","parent":null,"children":[],"decl_id":null,"docs":" Applies a binary operation to matching non-zero elements\n of two sparse matrices. When e.g. only the `lhs` has a non-zero at a\n given location, `0` is inferred for the non-zero value of the other matrix.\n Both matrices should have the same storage.","sig":null,"attributes":[{"value":"/ Applies a binary operation to matching non-zero elements","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":67754,"byte_end":67814,"line_start":165,"line_end":165,"column_start":1,"column_end":61}},{"value":"/ of two sparse matrices. When e.g. only the `lhs` has a non-zero at a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":67815,"byte_end":67887,"line_start":166,"line_end":166,"column_start":1,"column_end":73}},{"value":"/ given location, `0` is inferred for the non-zero value of the other matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":67888,"byte_end":67967,"line_start":167,"line_end":167,"column_start":1,"column_end":80}},{"value":"/ Both matrices should have the same storage.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":67968,"byte_end":68015,"line_start":168,"line_end":168,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68016,"byte_end":68019,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Thus the behaviour is correct iff `binop(N::zero(), N::zero()) == N::zero()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68020,"byte_end":68100,"line_start":170,"line_end":170,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68101,"byte_end":68104,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68105,"byte_end":68117,"line_start":172,"line_end":172,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68118,"byte_end":68121,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ - on incompatible dimensions","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68122,"byte_end":68154,"line_start":174,"line_end":174,"column_start":1,"column_end":33}},{"value":"/ - on incomatible storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":68155,"byte_end":68183,"line_start":175,"line_end":175,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":69635,"byte_end":69663,"line_start":228,"line_end":228,"column_start":8,"column_end":36},"name":"csmat_binop_same_storage_raw","qualname":"::sparse::binop::csmat_binop_same_storage_raw","value":"pub fn csmat_binop_same_storage_raw<Lhs, Rhs, Res, I, Iptr,\n                                    F>(CsMatViewI<, Lhs, I, Iptr>,\n                                       CsMatViewI<, Rhs, I, Iptr>, F,\n                                       &mut [Iptr], &mut [I], &mut [Res])\n-> usize where Lhs: num_traits::Zero + PartialEq, Rhs: num_traits::Zero +\nPartialEq, Res: num_traits::Zero + PartialEq, I: SpIndex, Iptr: SpIndex,\nF: Fn(&Lhs, &Rhs) -> Res","parent":null,"children":[],"decl_id":null,"docs":" Raw implementation of scalar binary operation for compressed sparse matrices\n sharing the same storage. The output arrays are assumed to be preallocated","sig":null,"attributes":[{"value":"/ Raw implementation of scalar binary operation for compressed sparse matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":69438,"byte_end":69518,"line_start":224,"line_end":224,"column_start":1,"column_end":81}},{"value":"/ sharing the same storage. The output arrays are assumed to be preallocated","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":69519,"byte_end":69597,"line_start":225,"line_end":225,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":69598,"byte_end":69601,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Returns the nnz count","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":69602,"byte_end":69627,"line_start":227,"line_end":227,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71430,"byte_end":71457,"line_start":278,"line_end":278,"column_start":8,"column_end":35},"name":"add_dense_mat_same_ordering","qualname":"::sparse::binop::add_dense_mat_same_ordering","value":"pub fn add_dense_mat_same_ordering<Lhs, Rhs, Res, Alpha, Beta, ByProd1,\n                                   ByProd2, I, Iptr, Mat,\n                                   D>(&Mat, &ArrayBase<D, Ix2>, Alpha, Beta)\n-> Array<Res, Ix2> where Mat: SpMatView<Lhs, I, Iptr>, D: ndarray::Data<Elem =\nRhs>, Lhs: Num, Rhs: Num, Res: Num + Copy, for<'r> &'r Alpha: Mul<&'r Lhs,\nOutput = ByProd1>, for<'r> &'r Beta: Mul<&'r Rhs, Output = ByProd2>,\nByProd1: Add<ByProd2, Output = Res>, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Compute alpha * lhs + beta * rhs with lhs a sparse matrix and rhs dense\n and alpha and beta scalars","sig":null,"attributes":[{"value":"/ Compute alpha * lhs + beta * rhs with lhs a sparse matrix and rhs dense","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71124,"byte_end":71199,"line_start":272,"line_end":272,"column_start":1,"column_end":76}},{"value":"/ and alpha and beta scalars","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71200,"byte_end":71230,"line_start":273,"line_end":273,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71231,"byte_end":71234,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The matrices must have the same ordering, a `CSR` matrix must be","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71235,"byte_end":71303,"line_start":275,"line_end":275,"column_start":1,"column_end":69}},{"value":"/ added with a matrix with `C`-like ordering, a `CSC` matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71304,"byte_end":71366,"line_start":276,"line_end":276,"column_start":1,"column_end":63}},{"value":"/ must be added with a matrix with `F`-like ordering.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":71367,"byte_end":71422,"line_start":277,"line_end":277,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72699,"byte_end":72726,"line_start":330,"line_end":330,"column_start":8,"column_end":35},"name":"mul_dense_mat_same_ordering","qualname":"::sparse::binop::mul_dense_mat_same_ordering","value":"pub fn mul_dense_mat_same_ordering<Lhs, Rhs, Res, Alpha, ByProd, I, Iptr, Mat,\n                                   D>(&Mat, &ArrayBase<D, Ix2>, Alpha)\n-> Array<Res, Ix2> where Lhs: Num, Rhs: Num, Res: Num + Clone, Alpha: Copy +\nfor<'r> Mul<&'r Lhs, Output = ByProd>, ByProd: for<'r> Mul<&'r Rhs, Output =\nRes>, I: SpIndex, Iptr: SpIndex, Mat: SpMatView<Lhs, I, Iptr>,\nD: ndarray::Data<Elem = Rhs>","parent":null,"children":[],"decl_id":null,"docs":" Compute coeff wise `alpha * lhs * rhs` with `lhs` a sparse matrix,\n `rhs` a dense matrix, and `alpha` a scalar","sig":null,"attributes":[{"value":"/ Compute coeff wise `alpha * lhs * rhs` with `lhs` a sparse matrix,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72372,"byte_end":72442,"line_start":324,"line_end":324,"column_start":1,"column_end":71}},{"value":"/ `rhs` a dense matrix, and `alpha` a scalar","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72443,"byte_end":72489,"line_start":325,"line_end":325,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72490,"byte_end":72493,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ The matrices must have the same ordering, a `CSR` matrix must be","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72494,"byte_end":72562,"line_start":327,"line_end":327,"column_start":1,"column_end":69}},{"value":"/ multiplied with a matrix with `C`-like ordering, a `CSC` matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72563,"byte_end":72630,"line_start":328,"line_end":328,"column_start":1,"column_end":68}},{"value":"/ must be multiplied with a matrix with `F`-like ordering.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":72631,"byte_end":72691,"line_start":329,"line_end":329,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73922,"byte_end":73943,"line_start":383,"line_end":383,"column_start":8,"column_end":29},"name":"csmat_binop_dense_raw","qualname":"::sparse::binop::csmat_binop_dense_raw","value":"pub fn csmat_binop_dense_raw<'a, Lhs, Rhs, Res, I, Iptr,\n                             F>(CsMatViewI, ArrayView, F, ArrayViewMut) where\nLhs: 'a + Num, Rhs: 'a + Num, Res: Num, I: 'a + SpIndex, Iptr: 'a + SpIndex,\nF: Fn(&Lhs, &Rhs) -> Res","parent":null,"children":[],"decl_id":null,"docs":" Raw implementation of sparse/dense binary operations with the same\n ordering","sig":null,"attributes":[{"value":"/ Raw implementation of sparse/dense binary operations with the same","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73548,"byte_end":73618,"line_start":372,"line_end":372,"column_start":1,"column_end":71}},{"value":"/ ordering","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73619,"byte_end":73631,"line_start":373,"line_end":373,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73632,"byte_end":73635,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73636,"byte_end":73648,"line_start":375,"line_end":375,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73649,"byte_end":73652,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ On dimension mismatch","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73653,"byte_end":73678,"line_start":377,"line_end":377,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73679,"byte_end":73682,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ On storage mismatch. The storage for the matrices must either be","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73683,"byte_end":73751,"line_start":379,"line_end":379,"column_start":1,"column_end":69}},{"value":"/ `lhs = CSR` with `rhs` and `out` with `Axis(1)` as the fastest dimension,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73752,"byte_end":73829,"line_start":380,"line_end":380,"column_start":1,"column_end":78}},{"value":"/ or","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73830,"byte_end":73836,"line_start":381,"line_end":381,"column_start":1,"column_end":7}},{"value":"/ `lhs = CSC` with `rhs` and `out` with `Axis(0)` as the fastest dimension,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":73837,"byte_end":73914,"line_start":382,"line_end":382,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75819,"byte_end":75830,"line_start":441,"line_end":441,"column_start":8,"column_end":19},"name":"csvec_binop","qualname":"::sparse::binop::csvec_binop","value":"pub fn csvec_binop<Lhs, Rhs, Res, I,\n                   F>(CsVecViewI<, Lhs, I>, CsVecViewI<, Rhs, I>, F)\n-> Result<CsVecI<Res, I>, StructureError> where Lhs: Num, Rhs: Num,\nF: Fn(&Lhs, &Rhs) -> Res, I: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Binary operations for [`CsVec`](CsVecBase)","sig":null,"attributes":[{"value":"/ Binary operations for [`CsVec`](CsVecBase)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75475,"byte_end":75521,"line_start":434,"line_end":434,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75522,"byte_end":75525,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ This function iterates the non-zero locations of `lhs` and `rhs`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75526,"byte_end":75594,"line_start":436,"line_end":436,"column_start":1,"column_end":69}},{"value":"/ and applies the function `binop` to the matching elements (defaulting","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75595,"byte_end":75668,"line_start":437,"line_end":437,"column_start":1,"column_end":74}},{"value":"/ to zero when e.g. only `lhs` has a non-zero at a given location).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75669,"byte_end":75738,"line_start":438,"line_end":438,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75739,"byte_end":75742,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ The function thus has a correct behavior iff `binop(0, 0) == 0`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/binop.rs","byte_start":75743,"byte_end":75811,"line_start":440,"line_end":440,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":746},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84258,"byte_end":84267,"line_start":8,"line_end":8,"column_start":11,"column_end":20},"name":"SpMatView","qualname":"::sparse::compressed::SpMatView","value":"SpMatView<N, I: SpIndex, Iptr: SpIndex = I>","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" The `SpMatView` trait describes data that can be seen as a view\n into a `CsMat`\n","sig":null,"attributes":[{"value":"/ The `SpMatView` trait describes data that can be seen as a view","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84161,"byte_end":84228,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"/ into a `CsMat`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84229,"byte_end":84247,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84357,"byte_end":84361,"line_start":10,"line_end":10,"column_start":8,"column_end":12},"name":"view","qualname":"::sparse::compressed::SpMatView::view","value":"pub fn view(&Self) -> CsMatViewI<, N, I, Iptr>","parent":{"krate":0,"index":746},"children":[],"decl_id":null,"docs":" Return a view into the current matrix\n","sig":null,"attributes":[{"value":"/ Return a view into the current matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84308,"byte_end":84349,"line_start":9,"line_end":9,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84450,"byte_end":84464,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"transpose_view","qualname":"::sparse::compressed::SpMatView::transpose_view","value":"pub fn transpose_view(&Self) -> CsMatViewI<, N, I, Iptr>","parent":{"krate":0,"index":746},"children":[],"decl_id":null,"docs":" Return a view into the current matrix\n","sig":null,"attributes":[{"value":"/ Return a view into the current matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84401,"byte_end":84442,"line_start":12,"line_end":12,"column_start":5,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":86896,"byte_end":86902,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"vstack","qualname":"::sparse::construct::vstack","value":"pub fn vstack<'a, N, I, Iptr, MatArray>(&MatArray) -> CsMatI<N, I, Iptr> where\nN: 'a + Clone + Default, I: 'a + SpIndex, Iptr: 'a + SpIndex,\nMatArray: AsRef<[CsMatViewI]>","parent":null,"children":[],"decl_id":null,"docs":" Construct a sparse matrix by vertically stacking other matrices\n","sig":null,"attributes":[{"value":"/ Construct a sparse matrix by vertically stacking other matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":86821,"byte_end":86888,"line_start":47,"line_end":47,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":87508,"byte_end":87514,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"hstack","qualname":"::sparse::construct::hstack","value":"pub fn hstack<'a, N, I, Iptr, MatArray>(&MatArray) -> CsMatI<N, I, Iptr> where\nN: 'a + Clone + Default, I: 'a + SpIndex, Iptr: 'a + SpIndex,\nMatArray: AsRef<[CsMatViewI]>","parent":null,"children":[],"decl_id":null,"docs":" Construct a sparse matrix by horizontally stacking other matrices\n","sig":null,"attributes":[{"value":"/ Construct a sparse matrix by horizontally stacking other matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":87431,"byte_end":87500,"line_start":65,"line_end":65,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88380,"byte_end":88384,"line_start":94,"line_end":94,"column_start":8,"column_end":12},"name":"bmat","qualname":"::sparse::construct::bmat","value":"pub fn bmat<'a, N, I, Iptr, OuterArray, InnerArray>(&OuterArray)\n-> CsMatI<N, I, Iptr> where N: 'a + Clone + Default, I: 'a + SpIndex,\nIptr: 'a + SpIndex, OuterArray: 'a + AsRef<[InnerArray]>, InnerArray: 'a +\nAsRef<[Option<CsMatViewI>]>","parent":null,"children":[],"decl_id":null,"docs":" Specify a sparse matrix by constructing it from blocks of other matrices","sig":null,"attributes":[{"value":"/ Specify a sparse matrix by constructing it from blocks of other matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88043,"byte_end":88119,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88120,"byte_end":88123,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88124,"byte_end":88138,"line_start":85,"line_end":85,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88139,"byte_end":88146,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/ use sprs::CsMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88147,"byte_end":88167,"line_start":87,"line_end":87,"column_start":1,"column_end":21}},{"value":"/ let a = CsMat::<f64>::eye(3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88168,"byte_end":88201,"line_start":88,"line_end":88,"column_start":1,"column_end":34}},{"value":"/ let b = CsMat::<f64>::eye(4);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88202,"byte_end":88235,"line_start":89,"line_end":89,"column_start":1,"column_end":34}},{"value":"/ let c = sprs::bmat(&[[Some(a.view()), None],","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88236,"byte_end":88284,"line_start":90,"line_end":90,"column_start":1,"column_end":49}},{"value":"/                      [None, Some(b.view())]]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88285,"byte_end":88335,"line_start":91,"line_end":91,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c.rows(), 7);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88336,"byte_end":88364,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/construct.rs","byte_start":88365,"byte_end":88372,"line_start":93,"line_end":93,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3618},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96489,"byte_end":96492,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"CSR","qualname":"::sparse::csmat::CompressedStorage::CSR","value":"CompressedStorage::CSR","parent":{"krate":0,"index":3617},"children":[],"decl_id":null,"docs":" Compressed row storage\n","sig":null,"attributes":[{"value":"/ Compressed row storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96458,"byte_end":96484,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3620},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96532,"byte_end":96535,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"CSC","qualname":"::sparse::csmat::CompressedStorage::CSC","value":"CompressedStorage::CSC","parent":{"krate":0,"index":3617},"children":[],"decl_id":null,"docs":" Compressed column storage\n","sig":null,"attributes":[{"value":"/ Compressed column storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96498,"byte_end":96527,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":3617},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96434,"byte_end":96451,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"name":"CompressedStorage","qualname":"::sparse::csmat::CompressedStorage","value":"pub enum CompressedStorage { CSR, CSC, }","parent":null,"children":[{"krate":0,"index":3618},{"krate":0,"index":3620}],"decl_id":null,"docs":" Describe the storage of a `CsMat`\n","sig":null,"attributes":[{"value":"/ Describe the storage of a `CsMat`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96235,"byte_end":96272,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"allow(clippy :: upper_case_acronyms)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96387,"byte_end":96424,"line_start":40,"line_end":40,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96652,"byte_end":96665,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"other_storage","qualname":"<CompressedStorage>::other_storage","value":"pub fn other_storage(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the other storage, ie return CSC if we were CSR, and vice versa\n","sig":null,"attributes":[{"value":"/ Get the other storage, ie return CSC if we were CSR, and vice versa","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96569,"byte_end":96640,"line_start":49,"line_end":49,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":3636},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97380,"byte_end":97388,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"NnzIndex","qualname":"::sparse::csmat::NnzIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hold the index of a non-zero element in the compressed storage","sig":null,"attributes":[{"value":"/ Hold the index of a non-zero element in the compressed storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97209,"byte_end":97275,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97276,"byte_end":97279,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ An `NnzIndex` can be used to later access the non-zero element in constant","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97280,"byte_end":97358,"line_start":85,"line_end":85,"column_start":1,"column_end":79}},{"value":"/ time.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97359,"byte_end":97368,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Field","id":{"krate":0,"index":3638},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97389,"byte_end":97398,"line_start":87,"line_end":87,"column_start":21,"column_end":30},"name":"0","qualname":"::sparse::csmat::NnzIndex::0","value":"usize","parent":{"krate":0,"index":3636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":943},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97413,"byte_end":97419,"line_start":89,"line_end":89,"column_start":12,"column_end":18},"name":"CsIter","qualname":"::sparse::csmat::CsIter","value":"CsIter {  }","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101203,"byte_end":101206,"line_start":207,"line_end":207,"column_start":12,"column_end":15},"name":"new","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::new","value":"pub fn new((usize, usize), IptrStorage, IStorage, DStorage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CSR` sparse matrix","sig":null,"attributes":[{"value":"/ Create a new `CSR` sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100347,"byte_end":100383,"line_start":186,"line_end":186,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100388,"byte_end":100391,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ See `new_csc` for the `CSC` equivalent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100396,"byte_end":100438,"line_start":188,"line_end":188,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100443,"byte_end":100446,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This constructor can be used to construct all","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100451,"byte_end":100500,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ sparse matrix types.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100505,"byte_end":100529,"line_start":191,"line_end":191,"column_start":5,"column_end":29}},{"value":"/ By using the type aliases one helps constrain the resulting type,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100534,"byte_end":100603,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/ as shown below","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100608,"byte_end":100626,"line_start":193,"line_end":193,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100631,"byte_end":100634,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100639,"byte_end":100652,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100657,"byte_end":100660,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100665,"byte_end":100676,"line_start":197,"line_end":197,"column_start":5,"column_end":16}},{"value":"/ # use sprs::*;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100681,"byte_end":100699,"line_start":198,"line_end":198,"column_start":5,"column_end":23}},{"value":"/ // This creates an owned matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100704,"byte_end":100739,"line_start":199,"line_end":199,"column_start":5,"column_end":40}},{"value":"/ let owned_matrix = CsMat::new((2, 2), vec![0, 1, 1], vec![1], vec![4_u8]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100744,"byte_end":100822,"line_start":200,"line_end":200,"column_start":5,"column_end":83}},{"value":"/ // This creates a matrix which only borrows the elements","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100827,"byte_end":100887,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/ let borrow_matrix = CsMatView::new((2, 2), &[0, 1, 1], &[1], &[4_u8]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100892,"byte_end":100966,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ // A combination of storage types may also be used for a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":100971,"byte_end":101031,"line_start":203,"line_end":203,"column_start":5,"column_end":65}},{"value":"/ // general sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101036,"byte_end":101064,"line_start":204,"line_end":204,"column_start":5,"column_end":33}},{"value":"/ let mixed_matrix = CsMatBase::new((2, 2), &[0, 1, 1] as &[_], vec![1_i64].into_boxed_slice(), vec![4_u8]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101069,"byte_end":101179,"line_start":205,"line_end":205,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101184,"byte_end":101191,"line_start":206,"line_end":206,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101586,"byte_end":101593,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"new_csc","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::new_csc","value":"pub fn new_csc((usize, usize), IptrStorage, IStorage, DStorage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CSC` sparse matrix","sig":null,"attributes":[{"value":"/ Create a new `CSC` sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101487,"byte_end":101523,"line_start":218,"line_end":218,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101528,"byte_end":101531,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ See `new` for the `CSR` equivalent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101536,"byte_end":101574,"line_start":220,"line_end":220,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101988,"byte_end":101995,"line_start":235,"line_end":235,"column_start":12,"column_end":19},"name":"try_new","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::try_new","value":"pub fn try_new((usize, usize), IptrStorage, IStorage, DStorage)\n-> Result<Self, (IptrStorage, IStorage, DStorage, StructureError)>","parent":null,"children":[],"decl_id":null,"docs":" Try to create a new `CSR` sparse matrix","sig":null,"attributes":[{"value":"/ Try to create a new `CSR` sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101874,"byte_end":101917,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101922,"byte_end":101925,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ See `try_new_csc` for the `CSC` equivalent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":101930,"byte_end":101976,"line_start":234,"line_end":234,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102380,"byte_end":102391,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"try_new_csc","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::try_new_csc","value":"pub fn try_new_csc((usize, usize), IptrStorage, IStorage, DStorage)\n-> Result<Self, (IptrStorage, IStorage, DStorage, StructureError)>","parent":null,"children":[],"decl_id":null,"docs":" Try to create a new `CSC` sparse matrix","sig":null,"attributes":[{"value":"/ Try to create a new `CSC` sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102274,"byte_end":102317,"line_start":244,"line_end":244,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102322,"byte_end":102325,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ See `new` for the `CSR` equivalent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102330,"byte_end":102368,"line_start":246,"line_end":246,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":103092,"byte_end":103105,"line_start":265,"line_end":265,"column_start":19,"column_end":32},"name":"new_unchecked","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::new_unchecked","value":"pub unsafe fn new_unchecked(CompressedStorage, Shape, IptrStorage, IStorage,\n                            DStorage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `CsMat` matrix from raw data,\n without checking their validity","sig":null,"attributes":[{"value":"/ Create a `CsMat` matrix from raw data,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102670,"byte_end":102712,"line_start":256,"line_end":256,"column_start":5,"column_end":47}},{"value":"/ without checking their validity","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102717,"byte_end":102752,"line_start":257,"line_end":257,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102757,"byte_end":102760,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102765,"byte_end":102777,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/ This is unsafe because algorithms are free to assume","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102782,"byte_end":102838,"line_start":260,"line_end":260,"column_start":5,"column_end":61}},{"value":"/ that properties guaranteed by","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102843,"byte_end":102876,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/ [`check_compressed_structure`](Self::check_compressed_structure) are enforced.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102881,"byte_end":102963,"line_start":262,"line_end":262,"column_start":5,"column_end":87}},{"value":"/ For instance, non out-of-bounds indices can be relied upon to","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":102968,"byte_end":103033,"line_start":263,"line_end":263,"column_start":5,"column_end":70}},{"value":"/ perform unchecked slice access.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":103038,"byte_end":103073,"line_start":264,"line_end":264,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106328,"byte_end":106345,"line_start":374,"line_end":374,"column_start":12,"column_end":29},"name":"new_from_unsorted","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::new_from_unsorted","value":"pub fn new_from_unsorted(Shape, IptrStorage, IStorage, DStorage)\n-> Result<Self, (IptrStorage, IStorage, DStorage, StructureError)> where\nN: Clone","parent":null,"children":[],"decl_id":null,"docs":" Try create a `CSR` matrix which acts as an owner of its data.","sig":null,"attributes":[{"value":"/ Try create a `CSR` matrix which acts as an owner of its data.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106106,"byte_end":106171,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106176,"byte_end":106179,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ A `CSC` matrix can be created with `new_from_unsorted_csc()`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106184,"byte_end":106249,"line_start":371,"line_end":371,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106254,"byte_end":106257,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If necessary, the indices will be sorted in place.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106262,"byte_end":106316,"line_start":373,"line_end":373,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106864,"byte_end":106885,"line_start":391,"line_end":391,"column_start":12,"column_end":33},"name":"new_from_unsorted_csc","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::new_from_unsorted_csc","value":"pub fn new_from_unsorted_csc(Shape, IptrStorage, IStorage, DStorage)\n-> Result<Self, (IptrStorage, IStorage, DStorage, StructureError)> where\nN: Clone","parent":null,"children":[],"decl_id":null,"docs":" Try create a `CSC` matrix which acts as an owner of its data.","sig":null,"attributes":[{"value":"/ Try create a `CSC` matrix which acts as an owner of its data.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106642,"byte_end":106707,"line_start":386,"line_end":386,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106712,"byte_end":106715,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ A `CSR` matrix can be created with `new_from_unsorted_csr()`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106720,"byte_end":106785,"line_start":388,"line_end":388,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106790,"byte_end":106793,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ If necessary, the indices will be sorted in place.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":106798,"byte_end":106852,"line_start":390,"line_end":390,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107599,"byte_end":107602,"line_start":416,"line_end":416,"column_start":12,"column_end":15},"name":"eye","qualname":"<CsMatI<N, I, Iptr>>::eye","value":"pub fn eye(usize) -> Self where N: Num + Clone","parent":null,"children":[],"decl_id":null,"docs":" Identity matrix, stored as a CSR matrix.","sig":null,"attributes":[{"value":"/ Identity matrix, stored as a CSR matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107292,"byte_end":107336,"line_start":406,"line_end":406,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107341,"byte_end":107344,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107349,"byte_end":107360,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ use sprs::{CsMat, CsVec};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107365,"byte_end":107394,"line_start":409,"line_end":409,"column_start":5,"column_end":34}},{"value":"/ let eye = CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107399,"byte_end":107427,"line_start":410,"line_end":410,"column_start":5,"column_end":33}},{"value":"/ assert!(eye.is_csr());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107432,"byte_end":107458,"line_start":411,"line_end":411,"column_start":5,"column_end":31}},{"value":"/ let x = CsVec::new(5, vec![0, 2, 4], vec![1., 2., 3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107463,"byte_end":107522,"line_start":412,"line_end":412,"column_start":5,"column_end":64}},{"value":"/ let y = &eye * &x;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107527,"byte_end":107549,"line_start":413,"line_end":413,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(x, y);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107554,"byte_end":107575,"line_start":414,"line_end":414,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107580,"byte_end":107587,"line_start":415,"line_end":415,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108347,"byte_end":108354,"line_start":438,"line_end":438,"column_start":12,"column_end":19},"name":"eye_csc","qualname":"<CsMatI<N, I, Iptr>>::eye_csc","value":"pub fn eye_csc(usize) -> Self where N: Num + Clone","parent":null,"children":[],"decl_id":null,"docs":" Identity matrix, stored as a CSC matrix.","sig":null,"attributes":[{"value":"/ Identity matrix, stored as a CSC matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108036,"byte_end":108080,"line_start":428,"line_end":428,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108085,"byte_end":108088,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108093,"byte_end":108104,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ use sprs::{CsMat, CsVec};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108109,"byte_end":108138,"line_start":431,"line_end":431,"column_start":5,"column_end":34}},{"value":"/ let eye = CsMat::eye_csc(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108143,"byte_end":108175,"line_start":432,"line_end":432,"column_start":5,"column_end":37}},{"value":"/ assert!(eye.is_csc());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108180,"byte_end":108206,"line_start":433,"line_end":433,"column_start":5,"column_end":31}},{"value":"/ let x = CsVec::new(5, vec![0, 2, 4], vec![1., 2., 3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108211,"byte_end":108270,"line_start":434,"line_end":434,"column_start":5,"column_end":64}},{"value":"/ let y = &eye * &x;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108275,"byte_end":108297,"line_start":435,"line_end":435,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(x, y);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108302,"byte_end":108323,"line_start":436,"line_end":436,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108328,"byte_end":108335,"line_start":437,"line_end":437,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108848,"byte_end":108853,"line_start":450,"line_end":450,"column_start":12,"column_end":17},"name":"empty","qualname":"<CsMatI<N, I, Iptr>>::empty","value":"pub fn empty(CompressedStorage, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `CsMat` for building purposes\n","sig":null,"attributes":[{"value":"/ Create an empty `CsMat` for building purposes","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":108787,"byte_end":108836,"line_start":449,"line_end":449,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109310,"byte_end":109314,"line_start":466,"line_end":466,"column_start":12,"column_end":16},"name":"zero","qualname":"<CsMatI<N, I, Iptr>>::zero","value":"pub fn zero(Shape) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CsMat` representing the zero matrix.\n Hence it has no non-zero elements.\n","sig":null,"attributes":[{"value":"/ Create a new `CsMat` representing the zero matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109201,"byte_end":109255,"line_start":464,"line_end":464,"column_start":5,"column_end":59}},{"value":"/ Hence it has no non-zero elements.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109260,"byte_end":109298,"line_start":465,"line_end":465,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109634,"byte_end":109651,"line_start":478,"line_end":478,"column_start":12,"column_end":29},"name":"reserve_outer_dim","qualname":"<CsMatI<N, I, Iptr>>::reserve_outer_dim","value":"pub fn reserve_outer_dim(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve the storage for the given additional number of nonzero data\n","sig":null,"attributes":[{"value":"/ Reserve the storage for the given additional number of nonzero data","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109551,"byte_end":109622,"line_start":477,"line_end":477,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109839,"byte_end":109850,"line_start":483,"line_end":483,"column_start":12,"column_end":23},"name":"reserve_nnz","qualname":"<CsMatI<N, I, Iptr>>::reserve_nnz","value":"pub fn reserve_nnz(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve the storage for the given additional number of nonzero data\n","sig":null,"attributes":[{"value":"/ Reserve the storage for the given additional number of nonzero data","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109756,"byte_end":109827,"line_start":482,"line_end":482,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110059,"byte_end":110082,"line_start":489,"line_end":489,"column_start":12,"column_end":35},"name":"reserve_outer_dim_exact","qualname":"<CsMatI<N, I, Iptr>>::reserve_outer_dim_exact","value":"pub fn reserve_outer_dim_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve the storage for the given number of nonzero data\n","sig":null,"attributes":[{"value":"/ Reserve the storage for the given number of nonzero data","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":109987,"byte_end":110047,"line_start":488,"line_end":488,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110255,"byte_end":110272,"line_start":494,"line_end":494,"column_start":12,"column_end":29},"name":"reserve_nnz_exact","qualname":"<CsMatI<N, I, Iptr>>::reserve_nnz_exact","value":"pub fn reserve_nnz_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve the storage for the given number of nonzero data\n","sig":null,"attributes":[{"value":"/ Reserve the storage for the given number of nonzero data","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110183,"byte_end":110243,"line_start":493,"line_end":493,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110564,"byte_end":110578,"line_start":502,"line_end":502,"column_start":12,"column_end":26},"name":"csr_from_dense","qualname":"<CsMatI<N, I, Iptr>>::csr_from_dense","value":"pub fn csr_from_dense(ArrayView<, N, Ix2>, N) -> Self where N: Num + Clone +\ncmp::PartialOrd + Signed","parent":null,"children":[],"decl_id":null,"docs":" Create a CSR matrix from a dense matrix, ignoring elements lower than `epsilon`.","sig":null,"attributes":[{"value":"/ Create a CSR matrix from a dense matrix, ignoring elements lower than `epsilon`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110400,"byte_end":110484,"line_start":499,"line_end":499,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110489,"byte_end":110492,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ If epsilon is negative, it will be clamped to zero.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":110497,"byte_end":110552,"line_start":501,"line_end":501,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":111906,"byte_end":111920,"line_start":544,"line_end":544,"column_start":12,"column_end":26},"name":"csc_from_dense","qualname":"<CsMatI<N, I, Iptr>>::csc_from_dense","value":"pub fn csc_from_dense(ArrayView<, N, Ix2>, N) -> Self where N: Num + Clone +\ncmp::PartialOrd + Signed","parent":null,"children":[],"decl_id":null,"docs":" Create a CSC matrix from a dense matrix, ignoring elements lower than `epsilon`.","sig":null,"attributes":[{"value":"/ Create a CSC matrix from a dense matrix, ignoring elements lower than `epsilon`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":111742,"byte_end":111826,"line_start":541,"line_end":541,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":111831,"byte_end":111834,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ If epsilon is negative, it will be clamped to zero.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":111839,"byte_end":111894,"line_start":543,"line_end":543,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":112203,"byte_end":112215,"line_start":552,"line_end":552,"column_start":12,"column_end":24},"name":"append_outer","qualname":"<CsMatI<N, I, Iptr>>::append_outer","value":"pub fn append_outer(Self, &[N]) -> Self where N: Clone + Num","parent":null,"children":[],"decl_id":null,"docs":" Append an outer dim to an existing matrix, compressing it in the process\n","sig":null,"attributes":[{"value":"/ Append an outer dim to an existing matrix, compressing it in the process","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":112115,"byte_end":112191,"line_start":551,"line_end":551,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":112839,"byte_end":112857,"line_start":573,"line_end":573,"column_start":12,"column_end":30},"name":"append_outer_csvec","qualname":"<CsMatI<N, I, Iptr>>::append_outer_csvec","value":"pub fn append_outer_csvec(Self, CsVecViewI<, N, I>) -> Self where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Append an outer dim to an existing matrix, provided by a sparse vector\n","sig":null,"attributes":[{"value":"/ Append an outer dim to an existing matrix, provided by a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":112753,"byte_end":112827,"line_start":572,"line_end":572,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113807,"byte_end":113813,"line_start":600,"line_end":600,"column_start":12,"column_end":18},"name":"insert","qualname":"<CsMatI<N, I, Iptr>>::insert","value":"pub fn insert(&mut Self, usize, usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Insert an element in the matrix. If the element is already present,\n its value is overwritten.","sig":null,"attributes":[{"value":"/ Insert an element in the matrix. If the element is already present,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113369,"byte_end":113440,"line_start":591,"line_end":591,"column_start":5,"column_end":76}},{"value":"/ its value is overwritten.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113445,"byte_end":113474,"line_start":592,"line_end":592,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113479,"byte_end":113482,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Warning: this is not an efficient operation, as it requires","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113487,"byte_end":113550,"line_start":594,"line_end":594,"column_start":5,"column_end":68}},{"value":"/ a non-constant lookup followed by two `Vec` insertions.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113555,"byte_end":113614,"line_start":595,"line_end":595,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113619,"byte_end":113622,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The insertion will be efficient, however, if the elements are inserted","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113627,"byte_end":113701,"line_start":597,"line_end":597,"column_start":5,"column_end":79}},{"value":"/ according to the matrix's order, eg following the row order for a CSR","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113706,"byte_end":113779,"line_start":598,"line_end":598,"column_start":5,"column_end":78}},{"value":"/ matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":113784,"byte_end":113795,"line_start":599,"line_end":599,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116626,"byte_end":116644,"line_start":682,"line_end":682,"column_start":12,"column_end":30},"name":"middle_outer_views","qualname":"<CsMatViewI>::middle_outer_views","value":"pub fn middle_outer_views(&Self, usize, usize) -> CsMatViewI","parent":null,"children":[],"decl_id":null,"docs":" Get a view into count contiguous outer dimensions, starting from i.","sig":null,"attributes":[{"value":"/ Get a view into count contiguous outer dimensions, starting from i.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116108,"byte_end":116179,"line_start":670,"line_end":670,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116184,"byte_end":116187,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ eg this gets the rows from i to i + count in a CSR matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116192,"byte_end":116253,"line_start":672,"line_end":672,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116258,"byte_end":116261,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ This function is now deprecated, as using an index and a count is not","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116266,"byte_end":116339,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"/ ergonomic. The replacement, `slice_outer`, leverages the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116344,"byte_end":116404,"line_start":675,"line_end":675,"column_start":5,"column_end":65}},{"value":"/ `std::ops::Range` family of types, which is better integrated into the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116409,"byte_end":116483,"line_start":676,"line_end":676,"column_start":5,"column_end":79}},{"value":"/ ecosystem.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116488,"byte_end":116502,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"deprecated(since = \"0.10.0\", note =\n             \"Please use the `slice_outer` method instead\")","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116507,"byte_end":116614,"line_start":678,"line_end":681,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117517,"byte_end":117525,"line_start":708,"line_end":708,"column_start":12,"column_end":20},"name":"iter_rbr","qualname":"<CsMatViewI>::iter_rbr","value":"pub fn iter_rbr(&Self) -> CsIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator that yields the non-zero locations and values stored in\n this matrix, in the fastest iteration order.","sig":null,"attributes":[{"value":"/ Get an iterator that yields the non-zero locations and values stored in","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117268,"byte_end":117343,"line_start":703,"line_end":703,"column_start":5,"column_end":80}},{"value":"/ this matrix, in the fastest iteration order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117348,"byte_end":117396,"line_start":704,"line_end":704,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117401,"byte_end":117404,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ This method will yield the correct lifetime for iterating over a sparse","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117409,"byte_end":117484,"line_start":706,"line_end":706,"column_start":5,"column_end":80}},{"value":"/ matrix view.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117489,"byte_end":117505,"line_start":707,"line_end":707,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118193,"byte_end":118200,"line_start":729,"line_end":729,"column_start":12,"column_end":19},"name":"storage","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::storage","value":"pub fn storage(&Self) -> CompressedStorage","parent":null,"children":[],"decl_id":null,"docs":" The underlying storage of this matrix\n","sig":null,"attributes":[{"value":"/ The underlying storage of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118140,"byte_end":118181,"line_start":728,"line_end":728,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118312,"byte_end":118316,"line_start":734,"line_end":734,"column_start":12,"column_end":16},"name":"rows","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::rows","value":"pub fn rows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of rows of this matrix\n","sig":null,"attributes":[{"value":"/ The number of rows of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118263,"byte_end":118300,"line_start":733,"line_end":733,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118414,"byte_end":118418,"line_start":739,"line_end":739,"column_start":12,"column_end":16},"name":"cols","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::cols","value":"pub fn cols(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of cols of this matrix\n","sig":null,"attributes":[{"value":"/ The number of cols of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118365,"byte_end":118402,"line_start":738,"line_end":738,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118565,"byte_end":118570,"line_start":745,"line_end":745,"column_start":12,"column_end":17},"name":"shape","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::shape","value":"pub fn shape(&Self) -> Shape","parent":null,"children":[],"decl_id":null,"docs":" The shape of the matrix.\n Equivalent to `let shape = (a.rows(), a.cols())`.\n","sig":null,"attributes":[{"value":"/ The shape of the matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118467,"byte_end":118495,"line_start":743,"line_end":743,"column_start":5,"column_end":33}},{"value":"/ Equivalent to `let shape = (a.rows(), a.cols())`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118500,"byte_end":118553,"line_start":744,"line_end":744,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118843,"byte_end":118846,"line_start":752,"line_end":752,"column_start":12,"column_end":15},"name":"nnz","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::nnz","value":"pub fn nnz(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of non-zero elements this matrix stores.\n This is often relevant for the complexity of most sparse matrix\n algorithms, which are often linear in the number of non-zeros.\n","sig":null,"attributes":[{"value":"/ The number of non-zero elements this matrix stores.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118633,"byte_end":118688,"line_start":749,"line_end":749,"column_start":5,"column_end":60}},{"value":"/ This is often relevant for the complexity of most sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118693,"byte_end":118760,"line_start":750,"line_end":750,"column_start":5,"column_end":72}},{"value":"/ algorithms, which are often linear in the number of non-zeros.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118765,"byte_end":118831,"line_start":751,"line_end":751,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119044,"byte_end":119051,"line_start":758,"line_end":758,"column_start":12,"column_end":19},"name":"density","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::density","value":"pub fn density(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The density of the sparse matrix, defined as the number of non-zero\n elements divided by the maximum number of elements\n","sig":null,"attributes":[{"value":"/ The density of the sparse matrix, defined as the number of non-zero","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118902,"byte_end":118973,"line_start":756,"line_end":756,"column_start":5,"column_end":76}},{"value":"/ elements divided by the maximum number of elements","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":118978,"byte_end":119032,"line_start":757,"line_end":757,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119360,"byte_end":119370,"line_start":767,"line_end":767,"column_start":12,"column_end":22},"name":"outer_dims","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_dims","value":"pub fn outer_dims(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of outer dimensions, that ie equal to self.rows() for a CSR\n matrix, and equal to self.cols() for a CSC matrix\n","sig":null,"attributes":[{"value":"/ Number of outer dimensions, that ie equal to self.rows() for a CSR","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119220,"byte_end":119290,"line_start":765,"line_end":765,"column_start":5,"column_end":75}},{"value":"/ matrix, and equal to self.cols() for a CSC matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119295,"byte_end":119348,"line_start":766,"line_end":766,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119602,"byte_end":119612,"line_start":773,"line_end":773,"column_start":12,"column_end":22},"name":"inner_dims","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::inner_dims","value":"pub fn inner_dims(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of inner dimensions, that ie equal to self.cols() for a CSR\n matrix, and equal to self.rows() for a CSC matrix\n","sig":null,"attributes":[{"value":"/ Number of inner dimensions, that ie equal to self.cols() for a CSR","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119462,"byte_end":119532,"line_start":771,"line_end":771,"column_start":5,"column_end":75}},{"value":"/ matrix, and equal to self.rows() for a CSC matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119537,"byte_end":119590,"line_start":772,"line_end":772,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120167,"byte_end":120170,"line_start":787,"line_end":787,"column_start":12,"column_end":15},"name":"get","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::get","value":"pub fn get(&Self, usize, usize) -> Option<&N>","parent":null,"children":[],"decl_id":null,"docs":" Access the element located at row i and column j.\n Will return None if there is no non-zero element at this location.","sig":null,"attributes":[{"value":"/ Access the element located at row i and column j.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119743,"byte_end":119796,"line_start":780,"line_end":780,"column_start":5,"column_end":58}},{"value":"/ Will return None if there is no non-zero element at this location.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119801,"byte_end":119871,"line_start":781,"line_end":781,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119876,"byte_end":119879,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ This access is logarithmic in the number of non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119884,"byte_end":119941,"line_start":783,"line_end":783,"column_start":5,"column_end":62}},{"value":"/ in the corresponding outer slice. It is therefore advisable not to rely","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":119946,"byte_end":120021,"line_start":784,"line_end":784,"column_start":5,"column_end":80}},{"value":"/ on this for algorithms, and prefer [`outer_iterator`](Self::outer_iterator)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120026,"byte_end":120105,"line_start":785,"line_end":785,"column_start":5,"column_end":84}},{"value":"/ which accesses elements in storage order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120110,"byte_end":120155,"line_start":786,"line_end":786,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121098,"byte_end":121104,"line_start":813,"line_end":813,"column_start":12,"column_end":18},"name":"indptr","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::indptr","value":"pub fn indptr(&Self) -> crate::IndPtrView<, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" The array of offsets in the indices() and data() slices.\n The elements of the slice at outer dimension i\n are available between the elements indptr\\[i\\] and indptr\\[i+1\\]\n in the indices() and data() slices.","sig":null,"attributes":[{"value":"/ The array of offsets in the indices() and data() slices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120358,"byte_end":120418,"line_start":794,"line_end":794,"column_start":5,"column_end":65}},{"value":"/ The elements of the slice at outer dimension i","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120423,"byte_end":120473,"line_start":795,"line_end":795,"column_start":5,"column_end":55}},{"value":"/ are available between the elements indptr\\[i\\] and indptr\\[i+1\\]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120478,"byte_end":120546,"line_start":796,"line_end":796,"column_start":5,"column_end":73}},{"value":"/ in the indices() and data() slices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120551,"byte_end":120590,"line_start":797,"line_end":797,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120595,"byte_end":120598,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120603,"byte_end":120616,"line_start":799,"line_end":799,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120621,"byte_end":120624,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120629,"byte_end":120640,"line_start":801,"line_end":801,"column_start":5,"column_end":16}},{"value":"/ use sprs::{CsMat};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120645,"byte_end":120667,"line_start":802,"line_end":802,"column_start":5,"column_end":27}},{"value":"/ let eye : CsMat<f64> = CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120672,"byte_end":120713,"line_start":803,"line_end":803,"column_start":5,"column_end":46}},{"value":"/ // get the element of row 3","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120718,"byte_end":120749,"line_start":804,"line_end":804,"column_start":5,"column_end":36}},{"value":"/ // there is only one element in this row, with a column index of 3","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120754,"byte_end":120824,"line_start":805,"line_end":805,"column_start":5,"column_end":75}},{"value":"/ // and a value of 1.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120829,"byte_end":120853,"line_start":806,"line_end":806,"column_start":5,"column_end":29}},{"value":"/ let range = eye.indptr().outer_inds_sz(3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120858,"byte_end":120904,"line_start":807,"line_end":807,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(range.start, 3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120909,"byte_end":120940,"line_start":808,"line_end":808,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(range.end, 4);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120945,"byte_end":120974,"line_start":809,"line_end":809,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(eye.indices()[range.start], 3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":120979,"byte_end":121025,"line_start":810,"line_end":810,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(eye.data()[range.start], 1.);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121030,"byte_end":121074,"line_start":811,"line_end":811,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121079,"byte_end":121086,"line_start":812,"line_end":812,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122072,"byte_end":122085,"line_start":840,"line_end":840,"column_start":12,"column_end":25},"name":"proper_indptr","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::proper_indptr","value":"pub fn proper_indptr(&Self) -> std::borrow::Cow<, [Iptr]>","parent":null,"children":[],"decl_id":null,"docs":" Get an indptr representation suitable for ffi, cloning if necessary to\n get a compatible representation.","sig":null,"attributes":[{"value":"/ Get an indptr representation suitable for ffi, cloning if necessary to","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121218,"byte_end":121292,"line_start":817,"line_end":817,"column_start":5,"column_end":79}},{"value":"/ get a compatible representation.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121297,"byte_end":121333,"line_start":818,"line_end":818,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121338,"byte_end":121341,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121346,"byte_end":121359,"line_start":820,"line_end":820,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121364,"byte_end":121367,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ For ffi usage, one needs to call `Cow::as_ptr`, but it's important","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121372,"byte_end":121442,"line_start":822,"line_end":822,"column_start":5,"column_end":75}},{"value":"/ to keep the `Cow` alive during the lifetime of the pointer. Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121447,"byte_end":121518,"line_start":823,"line_end":823,"column_start":5,"column_end":76}},{"value":"/ of a correct and incorrect ffi usage:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121523,"byte_end":121564,"line_start":824,"line_end":824,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121569,"byte_end":121572,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121577,"byte_end":121588,"line_start":826,"line_end":826,"column_start":5,"column_end":16}},{"value":"/ let mat: sprs::CsMat<f64> = sprs::CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121593,"byte_end":121645,"line_start":827,"line_end":827,"column_start":5,"column_end":57}},{"value":"/ let mid = mat.view().middle_outer_views(1, 2);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121650,"byte_end":121700,"line_start":828,"line_end":828,"column_start":5,"column_end":55}},{"value":"/ let ptr = {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121705,"byte_end":121720,"line_start":829,"line_end":829,"column_start":5,"column_end":20}},{"value":"/     let indptr_proper = mid.proper_indptr();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121725,"byte_end":121773,"line_start":830,"line_end":830,"column_start":5,"column_end":53}},{"value":"/     println!(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121778,"byte_end":121795,"line_start":831,"line_end":831,"column_start":5,"column_end":22}},{"value":"/         \"ptr {:?} is valid as long as _indptr_proper_owned is in scope\",","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121800,"byte_end":121876,"line_start":832,"line_end":832,"column_start":5,"column_end":81}},{"value":"/         indptr_proper.as_ptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121881,"byte_end":121915,"line_start":833,"line_end":833,"column_start":5,"column_end":39}},{"value":"/     );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121920,"byte_end":121930,"line_start":834,"line_end":834,"column_start":5,"column_end":15}},{"value":"/     indptr_proper.as_ptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121935,"byte_end":121965,"line_start":835,"line_end":835,"column_start":5,"column_end":35}},{"value":"/ };","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121970,"byte_end":121976,"line_start":836,"line_end":836,"column_start":5,"column_end":11}},{"value":"/ // This line is UB.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":121981,"byte_end":122004,"line_start":837,"line_end":837,"column_start":5,"column_end":28}},{"value":"/ // println!(\"ptr deref: {}\", *ptr);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122009,"byte_end":122048,"line_start":838,"line_end":838,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122053,"byte_end":122060,"line_start":839,"line_end":839,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122300,"byte_end":122307,"line_start":846,"line_end":846,"column_start":12,"column_end":19},"name":"indices","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::indices","value":"pub fn indices(&Self) -> &[I]","parent":null,"children":[],"decl_id":null,"docs":" The inner dimension location for each non-zero value. See\n the documentation of indptr() for more explanations.\n","sig":null,"attributes":[{"value":"/ The inner dimension location for each non-zero value. See","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122166,"byte_end":122227,"line_start":844,"line_end":844,"column_start":5,"column_end":66}},{"value":"/ the documentation of indptr() for more explanations.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122232,"byte_end":122288,"line_start":845,"line_end":845,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122463,"byte_end":122467,"line_start":852,"line_end":852,"column_start":12,"column_end":16},"name":"data","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::data","value":"pub fn data(&Self) -> &[N]","parent":null,"children":[],"decl_id":null,"docs":" The non-zero values. See the documentation of indptr()\n for more explanations.\n","sig":null,"attributes":[{"value":"/ The non-zero values. See the documentation of indptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122362,"byte_end":122420,"line_start":850,"line_end":850,"column_start":5,"column_end":63}},{"value":"/ for more explanations.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122425,"byte_end":122451,"line_start":851,"line_end":851,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122896,"byte_end":122912,"line_start":867,"line_end":867,"column_start":12,"column_end":28},"name":"into_raw_storage","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::into_raw_storage","value":"pub fn into_raw_storage(Self) -> (IptrStorage, IndStorage, DataStorage)","parent":null,"children":[],"decl_id":null,"docs":" Destruct the matrix object and recycle its storage containers.","sig":null,"attributes":[{"value":"/ Destruct the matrix object and recycle its storage containers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122519,"byte_end":122585,"line_start":856,"line_end":856,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122590,"byte_end":122593,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122598,"byte_end":122611,"line_start":858,"line_end":858,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122616,"byte_end":122619,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122624,"byte_end":122635,"line_start":860,"line_end":860,"column_start":5,"column_end":16}},{"value":"/ use sprs::{CsMat};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122640,"byte_end":122662,"line_start":861,"line_end":861,"column_start":5,"column_end":27}},{"value":"/ let (indptr, indices, data) = CsMat::<i32>::eye(3).into_raw_storage();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122667,"byte_end":122741,"line_start":862,"line_end":862,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(indptr, vec![0, 1, 2, 3]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122746,"byte_end":122787,"line_start":863,"line_end":863,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(indices, vec![0, 1, 2]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122792,"byte_end":122831,"line_start":864,"line_end":864,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(data, vec![1, 1, 1]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122836,"byte_end":122872,"line_start":865,"line_end":865,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":122877,"byte_end":122884,"line_start":866,"line_end":866,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123193,"byte_end":123199,"line_start":878,"line_end":878,"column_start":12,"column_end":18},"name":"is_csc","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::is_csc","value":"pub fn is_csc(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the matrix is in CSC storage\n","sig":null,"attributes":[{"value":"/ Test whether the matrix is in CSC storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123136,"byte_end":123181,"line_start":877,"line_end":877,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123313,"byte_end":123319,"line_start":883,"line_end":883,"column_start":12,"column_end":18},"name":"is_csr","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::is_csr","value":"pub fn is_csr(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the matrix is in CSR storage\n","sig":null,"attributes":[{"value":"/ Test whether the matrix is in CSR storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123256,"byte_end":123301,"line_start":882,"line_end":882,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123490,"byte_end":123503,"line_start":889,"line_end":889,"column_start":12,"column_end":25},"name":"transpose_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::transpose_mut","value":"pub fn transpose_mut(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Transpose a matrix in place\n No allocation required (this is simply a storage order change)\n","sig":null,"attributes":[{"value":"/ Transpose a matrix in place","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123376,"byte_end":123407,"line_start":887,"line_end":887,"column_start":5,"column_end":36}},{"value":"/ No allocation required (this is simply a storage order change)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123412,"byte_end":123478,"line_start":888,"line_end":888,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123748,"byte_end":123762,"line_start":896,"line_end":896,"column_start":12,"column_end":26},"name":"transpose_into","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::transpose_into","value":"pub fn transpose_into(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transpose a matrix in place\n No allocation required (this is simply a storage order change)\n","sig":null,"attributes":[{"value":"/ Transpose a matrix in place","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123634,"byte_end":123665,"line_start":894,"line_end":894,"column_start":5,"column_end":36}},{"value":"/ No allocation required (this is simply a storage order change)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123670,"byte_end":123736,"line_start":895,"line_end":895,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123954,"byte_end":123968,"line_start":903,"line_end":903,"column_start":12,"column_end":26},"name":"transpose_view","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::transpose_view","value":"pub fn transpose_view(&Self) -> CsMatViewI<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Transposed view of this matrix\n No allocation required (this is simply a storage order change)\n","sig":null,"attributes":[{"value":"/ Transposed view of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123837,"byte_end":123871,"line_start":901,"line_end":901,"column_start":5,"column_end":39}},{"value":"/ No allocation required (this is simply a storage order change)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":123876,"byte_end":123942,"line_start":902,"line_end":902,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124433,"byte_end":124441,"line_start":916,"line_end":916,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_owned","value":"pub fn to_owned(&Self) -> CsMatI<N, I, Iptr> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Get an owned version of this matrix. If the matrix was already\n owned, this will make a deep copy.\n","sig":null,"attributes":[{"value":"/ Get an owned version of this matrix. If the matrix was already","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124312,"byte_end":124378,"line_start":914,"line_end":914,"column_start":5,"column_end":71}},{"value":"/ owned, this will make a deep copy.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124383,"byte_end":124421,"line_start":915,"line_end":915,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":125152,"byte_end":125167,"line_start":938,"line_end":938,"column_start":12,"column_end":27},"name":"to_inner_onehot","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_inner_onehot","value":"pub fn to_inner_onehot(&Self) -> CsMatI<N, I, Iptr> where N: Clone + Float +\nPartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Generate a one-hot matrix, compressing the inner dimension.","sig":null,"attributes":[{"value":"/ Generate a one-hot matrix, compressing the inner dimension.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124766,"byte_end":124829,"line_start":930,"line_end":930,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124834,"byte_end":124837,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ Returns a matrix with the same size, the same CSR/CSC type,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124842,"byte_end":124905,"line_start":932,"line_end":932,"column_start":5,"column_end":68}},{"value":"/ and a single value of 1.0 within each populated inner vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124910,"byte_end":124975,"line_start":933,"line_end":933,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124980,"byte_end":124983,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ See [`into_csc`](CsMatBase::into_csc) and [`into_csr`](CsMatBase::into_csr)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":124988,"byte_end":125067,"line_start":935,"line_end":935,"column_start":5,"column_end":84}},{"value":"/ if you need to prepare a matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":125072,"byte_end":125107,"line_start":936,"line_end":936,"column_start":5,"column_end":40}},{"value":"/ for one-hot compression.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":125112,"byte_end":125140,"line_start":937,"line_end":937,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126693,"byte_end":126707,"line_start":985,"line_end":985,"column_start":12,"column_end":26},"name":"to_other_types","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_other_types","value":"pub fn to_other_types<I2, N2, Iptr2>(&Self) -> CsMatI<N2, I2, Iptr2> where\nN: Clone + Into<N2>, I2: SpIndex, Iptr2: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Clone the matrix with another integer type for indptr and indices","sig":null,"attributes":[{"value":"/ Clone the matrix with another integer type for indptr and indices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126478,"byte_end":126547,"line_start":979,"line_end":979,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126552,"byte_end":126555,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126560,"byte_end":126572,"line_start":981,"line_end":981,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126577,"byte_end":126580,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ If the indices or indptr values cannot be represented by the requested","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126585,"byte_end":126659,"line_start":983,"line_end":983,"column_start":5,"column_end":79}},{"value":"/ integer type.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":126664,"byte_end":126681,"line_start":984,"line_end":984,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":127547,"byte_end":127551,"line_start":1015,"line_end":1015,"column_start":12,"column_end":16},"name":"view","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::view","value":"pub fn view(&Self) -> CsMatViewI<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Return a view into the current matrix\n","sig":null,"attributes":[{"value":"/ Return a view into the current matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":127494,"byte_end":127535,"line_start":1014,"line_end":1014,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":127886,"byte_end":127900,"line_start":1026,"line_end":1026,"column_start":12,"column_end":26},"name":"structure_view","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::structure_view","value":"pub fn structure_view(&Self) -> CsStructureViewI<, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":128759,"byte_end":128767,"line_start":1048,"line_end":1048,"column_start":12,"column_end":20},"name":"to_dense","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_dense","value":"pub fn to_dense(&Self) -> Array<N, Ix2> where N: Clone + Zero","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129467,"byte_end":129481,"line_start":1071,"line_end":1071,"column_start":12,"column_end":26},"name":"outer_iterator","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_iterator","value":"pub fn outer_iterator(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an outer iterator for the matrix","sig":null,"attributes":[{"value":"/ Return an outer iterator for the matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":128974,"byte_end":129017,"line_start":1057,"line_end":1057,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129022,"byte_end":129025,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This can be used for iterating over the rows (resp. cols) of","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129030,"byte_end":129094,"line_start":1059,"line_end":1059,"column_start":5,"column_end":69}},{"value":"/ a CSR (resp. CSC) matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129099,"byte_end":129128,"line_start":1060,"line_end":1060,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129133,"byte_end":129136,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129141,"byte_end":129152,"line_start":1062,"line_end":1062,"column_start":5,"column_end":16}},{"value":"/ use sprs::{CsMat};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129157,"byte_end":129179,"line_start":1063,"line_end":1063,"column_start":5,"column_end":27}},{"value":"/ let eye = CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129184,"byte_end":129212,"line_start":1064,"line_end":1064,"column_start":5,"column_end":33}},{"value":"/ for (row_ind, row_vec) in eye.outer_iterator().enumerate() {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129217,"byte_end":129281,"line_start":1065,"line_end":1065,"column_start":5,"column_end":69}},{"value":"/     let (col_ind, &val): (_, &f64) = row_vec.iter().next().unwrap();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129286,"byte_end":129358,"line_start":1066,"line_end":1066,"column_start":5,"column_end":77}},{"value":"/     assert_eq!(row_ind, col_ind);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129363,"byte_end":129400,"line_start":1067,"line_end":1067,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(val, 1.);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129405,"byte_end":129433,"line_start":1068,"line_end":1068,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129438,"byte_end":129443,"line_start":1069,"line_end":1069,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129448,"byte_end":129455,"line_start":1070,"line_end":1070,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":130213,"byte_end":130232,"line_start":1091,"line_end":1091,"column_start":12,"column_end":31},"name":"outer_iterator_papt","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_iterator_papt","value":"pub fn outer_iterator_papt<'a, 'perm:'a>(&'a Self, PermViewI)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an outer iterator over P*A*P^T, where it is necessary to use\n `CsVec::iter_perm(perm.inv())` to iterate over the inner dimension.\n Unstable, this is a convenience function for the crate `sprs-ldl`\n for now.\n","sig":null,"attributes":[{"value":"/ Return an outer iterator over P*A*P^T, where it is necessary to use","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":129944,"byte_end":130015,"line_start":1086,"line_end":1086,"column_start":5,"column_end":76}},{"value":"/ `CsVec::iter_perm(perm.inv())` to iterate over the inner dimension.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":130020,"byte_end":130091,"line_start":1087,"line_end":1087,"column_start":5,"column_end":76}},{"value":"/ Unstable, this is a convenience function for the crate `sprs-ldl`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":130096,"byte_end":130165,"line_start":1088,"line_end":1088,"column_start":5,"column_end":74}},{"value":"/ for now.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":130170,"byte_end":130182,"line_start":1089,"line_end":1089,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131010,"byte_end":131023,"line_start":1109,"line_end":1109,"column_start":12,"column_end":25},"name":"max_outer_nnz","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::max_outer_nnz","value":"pub fn max_outer_nnz(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the max number of nnz for each outer dim\n","sig":null,"attributes":[{"value":"/ Get the max number of nnz for each outer dim","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":130950,"byte_end":130998,"line_start":1108,"line_end":1108,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131709,"byte_end":131716,"line_start":1126,"line_end":1126,"column_start":12,"column_end":19},"name":"degrees","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::degrees","value":"pub fn degrees(&Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the degrees of each vertex on a symmetric matrix","sig":null,"attributes":[{"value":"/ Get the degrees of each vertex on a symmetric matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131176,"byte_end":131232,"line_start":1116,"line_end":1116,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131237,"byte_end":131240,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ The nonzero pattern of a symmetric matrix can be interpreted as","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131245,"byte_end":131312,"line_start":1118,"line_end":1118,"column_start":5,"column_end":72}},{"value":"/ an undirected graph. In such a graph, a vertex i is connected to another","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131317,"byte_end":131393,"line_start":1119,"line_end":1119,"column_start":5,"column_end":81}},{"value":"/ vertex j if there is a corresponding nonzero entry in the matrix at","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131398,"byte_end":131469,"line_start":1120,"line_end":1120,"column_start":5,"column_end":76}},{"value":"/ location (i, j).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131474,"byte_end":131494,"line_start":1121,"line_end":1121,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131499,"byte_end":131502,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ This function returns a vector containing the degree of each vertex,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131507,"byte_end":131579,"line_start":1123,"line_end":1123,"column_start":5,"column_end":77}},{"value":"/ that is to say the number of neighbor of each vertex. We do not","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131584,"byte_end":131651,"line_start":1124,"line_end":1124,"column_start":5,"column_end":72}},{"value":"/ count diagonal entries as a neighbor.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":131656,"byte_end":131697,"line_start":1125,"line_end":1125,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":132141,"byte_end":132151,"line_start":1140,"line_end":1140,"column_start":12,"column_end":22},"name":"outer_view","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_view","value":"pub fn outer_view(&Self, usize) -> Option<CsVecViewI<, N, I>>","parent":null,"children":[],"decl_id":null,"docs":" Get a view into the i-th outer dimension (eg i-th row for a CSR matrix)\n","sig":null,"attributes":[{"value":"/ Get a view into the i-th outer dimension (eg i-th row for a CSR matrix)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":132054,"byte_end":132129,"line_start":1139,"line_end":1139,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":132629,"byte_end":132633,"line_start":1155,"line_end":1155,"column_start":12,"column_end":16},"name":"diag","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::diag","value":"pub fn diag(&Self) -> CsVecI<N, I> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Get the diagonal of a sparse matrix\n","sig":null,"attributes":[{"value":"/ Get the diagonal of a sparse matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":132578,"byte_end":132617,"line_start":1154,"line_end":1154,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133531,"byte_end":133540,"line_start":1180,"line_end":1180,"column_start":12,"column_end":21},"name":"diag_iter","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::diag_iter","value":"pub fn diag_iter(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iteration over all entries on the diagonal\n","sig":null,"attributes":[{"value":"/ Iteration over all entries on the diagonal","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133473,"byte_end":133519,"line_start":1179,"line_end":1179,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133928,"byte_end":133944,"line_start":1193,"line_end":1193,"column_start":12,"column_end":28},"name":"outer_block_iter","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_block_iter","value":"pub fn outer_block_iter(&Self, usize) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iteration on outer blocks of size `block_size`","sig":null,"attributes":[{"value":"/ Iteration on outer blocks of size `block_size`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133801,"byte_end":133851,"line_start":1188,"line_end":1188,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133856,"byte_end":133859,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133864,"byte_end":133876,"line_start":1190,"line_end":1190,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133881,"byte_end":133884,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ If the block size is 0.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":133889,"byte_end":133916,"line_start":1192,"line_end":1192,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":134589,"byte_end":134592,"line_start":1210,"line_end":1210,"column_start":12,"column_end":15},"name":"map","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::map","value":"pub fn map<F, N2>(&Self, F) -> CsMatI<N2, I, Iptr> where F: FnMut(&N) -> N2","parent":null,"children":[],"decl_id":null,"docs":" Return a new sparse matrix with the same sparsity pattern, with all non-zero values mapped by the function `f`.\n","sig":null,"attributes":[{"value":"/ Return a new sparse matrix with the same sparsity pattern, with all non-zero values mapped by the function `f`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":134462,"byte_end":134577,"line_start":1209,"line_end":1209,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135416,"byte_end":135431,"line_start":1233,"line_end":1233,"column_start":12,"column_end":27},"name":"get_outer_inner","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::get_outer_inner","value":"pub fn get_outer_inner(&Self, usize, usize) -> Option<&N>","parent":null,"children":[],"decl_id":null,"docs":" Access an element given its `outer_ind` and `inner_ind`.\n Will return None if there is no non-zero element at this location.","sig":null,"attributes":[{"value":"/ Access an element given its `outer_ind` and `inner_ind`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":134985,"byte_end":135045,"line_start":1226,"line_end":1226,"column_start":5,"column_end":65}},{"value":"/ Will return None if there is no non-zero element at this location.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135050,"byte_end":135120,"line_start":1227,"line_end":1227,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135125,"byte_end":135128,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ This access is logarithmic in the number of non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135133,"byte_end":135190,"line_start":1229,"line_end":1229,"column_start":5,"column_end":62}},{"value":"/ in the corresponding outer slice. It is therefore advisable not to rely","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135195,"byte_end":135270,"line_start":1230,"line_end":1230,"column_start":5,"column_end":80}},{"value":"/ on this for algorithms, and prefer [`outer_iterator`](Self::outer_iterator)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135275,"byte_end":135354,"line_start":1231,"line_end":1231,"column_start":5,"column_end":84}},{"value":"/ which accesses elements in storage order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135359,"byte_end":135404,"line_start":1232,"line_end":1232,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135923,"byte_end":135932,"line_start":1248,"line_end":1248,"column_start":12,"column_end":21},"name":"nnz_index","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::nnz_index","value":"pub fn nnz_index(&Self, usize, usize) -> Option<NnzIndex>","parent":null,"children":[],"decl_id":null,"docs":" Find the non-zero index of the element specified by row and col","sig":null,"attributes":[{"value":"/ Find the non-zero index of the element specified by row and col","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135620,"byte_end":135687,"line_start":1242,"line_end":1242,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135692,"byte_end":135695,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ Searching this index is logarithmic in the number of non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135700,"byte_end":135766,"line_start":1244,"line_end":1244,"column_start":5,"column_end":71}},{"value":"/ in the corresponding outer slice.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135771,"byte_end":135808,"line_start":1245,"line_end":1245,"column_start":5,"column_end":42}},{"value":"/ Once it is available, the `NnzIndex` enables retrieving the data with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135813,"byte_end":135886,"line_start":1246,"line_end":1246,"column_start":5,"column_end":78}},{"value":"/ O(1) complexity.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":135891,"byte_end":135911,"line_start":1247,"line_end":1247,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136377,"byte_end":136398,"line_start":1260,"line_end":1260,"column_start":12,"column_end":33},"name":"nnz_index_outer_inner","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::nnz_index_outer_inner","value":"pub fn nnz_index_outer_inner(&Self, usize, usize) -> Option<NnzIndex>","parent":null,"children":[],"decl_id":null,"docs":" Find the non-zero index of the element specified by `outer_ind` and\n `inner_ind`.","sig":null,"attributes":[{"value":"/ Find the non-zero index of the element specified by `outer_ind` and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136152,"byte_end":136223,"line_start":1255,"line_end":1255,"column_start":5,"column_end":76}},{"value":"/ `inner_ind`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136228,"byte_end":136244,"line_start":1256,"line_end":1256,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136249,"byte_end":136252,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ Searching this index is logarithmic in the number of non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136257,"byte_end":136323,"line_start":1258,"line_end":1258,"column_start":5,"column_end":71}},{"value":"/ in the corresponding outer slice.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136328,"byte_end":136365,"line_start":1259,"line_end":1259,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137309,"byte_end":137335,"line_start":1283,"line_end":1283,"column_start":12,"column_end":38},"name":"check_compressed_structure","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::check_compressed_structure","value":"pub fn check_compressed_structure(&Self) -> Result<(), StructureError>","parent":null,"children":[],"decl_id":null,"docs":" Check the structure of `CsMat` components\n This will ensure that:\n * indptr is of length `outer_dim() + 1`\n * indices and data have the same length, `nnz == indptr[outer_dims()]`\n * indptr is sorted\n * indptr values do not exceed [`usize::MAX`](usize::MAX)`/ 2`, as that would mean\n   indices and indptr would take more space than the addressable memory\n * indices is sorted for each outer slice\n * indices are lower than `inner_dims()`\n","sig":null,"attributes":[{"value":"/ Check the structure of `CsMat` components","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136801,"byte_end":136846,"line_start":1274,"line_end":1274,"column_start":5,"column_end":50}},{"value":"/ This will ensure that:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136851,"byte_end":136877,"line_start":1275,"line_end":1275,"column_start":5,"column_end":31}},{"value":"/ * indptr is of length `outer_dim() + 1`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136882,"byte_end":136925,"line_start":1276,"line_end":1276,"column_start":5,"column_end":48}},{"value":"/ * indices and data have the same length, `nnz == indptr[outer_dims()]`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":136930,"byte_end":137004,"line_start":1277,"line_end":1277,"column_start":5,"column_end":79}},{"value":"/ * indptr is sorted","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137009,"byte_end":137031,"line_start":1278,"line_end":1278,"column_start":5,"column_end":27}},{"value":"/ * indptr values do not exceed [`usize::MAX`](usize::MAX)`/ 2`, as that would mean","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137036,"byte_end":137121,"line_start":1279,"line_end":1279,"column_start":5,"column_end":90}},{"value":"/   indices and indptr would take more space than the addressable memory","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137126,"byte_end":137200,"line_start":1280,"line_end":1280,"column_start":5,"column_end":79}},{"value":"/ * indices is sorted for each outer slice","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137205,"byte_end":137249,"line_start":1281,"line_end":1281,"column_start":5,"column_end":49}},{"value":"/ * indices are lower than `inner_dims()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137254,"byte_end":137297,"line_start":1282,"line_end":1282,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137950,"byte_end":137954,"line_start":1303,"line_end":1303,"column_start":12,"column_end":16},"name":"iter","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::iter","value":"pub fn iter(&Self) -> CsIter<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator that yields the non-zero locations and values stored in\n this matrix, in the fastest iteration order.\n","sig":null,"attributes":[{"value":"/ Get an iterator that yields the non-zero locations and values stored in","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137810,"byte_end":137885,"line_start":1301,"line_end":1301,"column_start":5,"column_end":80}},{"value":"/ this matrix, in the fastest iteration order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":137890,"byte_end":137938,"line_start":1302,"line_end":1302,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":138753,"byte_end":138769,"line_start":1326,"line_end":1326,"column_start":12,"column_end":28},"name":"to_other_storage","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_other_storage","value":"pub fn to_other_storage(&Self) -> CsMatI<N, I, Iptr> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a matrix mathematically equal to this one, but with the\n opposed storage (a CSC matrix will be converted to CSR, and vice versa)\n","sig":null,"attributes":[{"value":"/ Create a matrix mathematically equal to this one, but with the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":138595,"byte_end":138661,"line_start":1324,"line_end":1324,"column_start":5,"column_end":71}},{"value":"/ opposed storage (a CSC matrix will be converted to CSR, and vice versa)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":138666,"byte_end":138741,"line_start":1325,"line_end":1325,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":139540,"byte_end":139546,"line_start":1351,"line_end":1351,"column_start":12,"column_end":18},"name":"to_csc","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_csc","value":"pub fn to_csc(&Self) -> CsMatI<N, I, Iptr> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSC matrix equivalent to this one.\n A new matrix will be created even if this matrix was already CSC.\n","sig":null,"attributes":[{"value":"/ Create a new CSC matrix equivalent to this one.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":139403,"byte_end":139454,"line_start":1349,"line_end":1349,"column_start":5,"column_end":56}},{"value":"/ A new matrix will be created even if this matrix was already CSC.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":139459,"byte_end":139528,"line_start":1350,"line_end":1350,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":139877,"byte_end":139883,"line_start":1363,"line_end":1363,"column_start":12,"column_end":18},"name":"to_csr","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::to_csr","value":"pub fn to_csr(&Self) -> CsMatI<N, I, Iptr> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSR matrix equivalent to this one.\n A new matrix will be created even if this matrix was already CSR.\n","sig":null,"attributes":[{"value":"/ Create a new CSR matrix equivalent to this one.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":139740,"byte_end":139791,"line_start":1361,"line_end":1361,"column_start":5,"column_end":56}},{"value":"/ A new matrix will be created even if this matrix was already CSR.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":139796,"byte_end":139865,"line_start":1362,"line_end":1362,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140347,"byte_end":140355,"line_start":1384,"line_end":1384,"column_start":12,"column_end":20},"name":"into_csc","qualname":"<CsMatI<N, I, Iptr>>::into_csc","value":"pub fn into_csc(Self) -> Self where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSC matrix equivalent to this one.\n If this matrix is CSR, it is converted to CSC\n If this matrix is CSC, it is returned by value\n","sig":null,"attributes":[{"value":"/ Create a new CSC matrix equivalent to this one.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140175,"byte_end":140226,"line_start":1381,"line_end":1381,"column_start":5,"column_end":56}},{"value":"/ If this matrix is CSR, it is converted to CSC","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140231,"byte_end":140280,"line_start":1382,"line_end":1382,"column_start":5,"column_end":54}},{"value":"/ If this matrix is CSC, it is returned by value","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140285,"byte_end":140335,"line_start":1383,"line_end":1383,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140695,"byte_end":140703,"line_start":1397,"line_end":1397,"column_start":12,"column_end":20},"name":"into_csr","qualname":"<CsMatI<N, I, Iptr>>::into_csr","value":"pub fn into_csr(Self) -> Self where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSR matrix equivalent to this one.\n If this matrix is CSC, it is converted to CSR\n If this matrix is CSR, it is returned by value\n","sig":null,"attributes":[{"value":"/ Create a new CSR matrix equivalent to this one.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140523,"byte_end":140574,"line_start":1394,"line_end":1394,"column_start":5,"column_end":56}},{"value":"/ If this matrix is CSC, it is converted to CSR","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140579,"byte_end":140628,"line_start":1395,"line_end":1395,"column_start":5,"column_end":54}},{"value":"/ If this matrix is CSR, it is returned by value","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140633,"byte_end":140683,"line_start":1396,"line_end":1396,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141455,"byte_end":141463,"line_start":1423,"line_end":1423,"column_start":12,"column_end":20},"name":"data_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::data_mut","value":"pub fn data_mut(&mut Self) -> &mut [N]","parent":null,"children":[],"decl_id":null,"docs":" Mutable access to the non zero values","sig":null,"attributes":[{"value":"/ Mutable access to the non zero values","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141228,"byte_end":141269,"line_start":1418,"line_end":1418,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141274,"byte_end":141277,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ This enables changing the values without changing the matrix's","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141282,"byte_end":141348,"line_start":1420,"line_end":1420,"column_start":5,"column_end":71}},{"value":"/ structure. To also change the matrix's structure,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141353,"byte_end":141406,"line_start":1421,"line_end":1421,"column_start":5,"column_end":58}},{"value":"/ see [modify](fn.modify.html)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141411,"byte_end":141443,"line_start":1422,"line_end":1422,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141588,"byte_end":141593,"line_start":1428,"line_end":1428,"column_start":12,"column_end":17},"name":"scale","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::scale","value":"pub fn scale(&mut Self, N) where for<'r> N: MulAssign<&'r N>","parent":null,"children":[],"decl_id":null,"docs":" Sparse matrix self-multiplication by a scalar\n","sig":null,"attributes":[{"value":"/ Sparse matrix self-multiplication by a scalar","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141527,"byte_end":141576,"line_start":1427,"line_end":1427,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141855,"byte_end":141869,"line_start":1439,"line_end":1439,"column_start":12,"column_end":26},"name":"outer_view_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_view_mut","value":"pub fn outer_view_mut(&mut Self, usize) -> Option<CsVecViewMutI<, N, I>>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable view into the i-th outer dimension\n (eg i-th row for a CSR matrix)\n","sig":null,"attributes":[{"value":"/ Get a mutable view into the i-th outer dimension","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141752,"byte_end":141804,"line_start":1437,"line_end":1437,"column_start":5,"column_end":57}},{"value":"/ (eg i-th row for a CSR matrix)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141809,"byte_end":141843,"line_start":1438,"line_end":1438,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142773,"byte_end":142780,"line_start":1460,"line_end":1460,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::get_mut","value":"pub fn get_mut(&mut Self, usize, usize) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the element located at row i and column j.\n Will return None if there is no non-zero element at this location.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the element located at row i and column j.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142263,"byte_end":142336,"line_start":1452,"line_end":1452,"column_start":5,"column_end":78}},{"value":"/ Will return None if there is no non-zero element at this location.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142341,"byte_end":142411,"line_start":1453,"line_end":1453,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142416,"byte_end":142419,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ This access is logarithmic in the number of non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142424,"byte_end":142481,"line_start":1455,"line_end":1455,"column_start":5,"column_end":62}},{"value":"/ in the corresponding outer slice. It is therefore advisable not to rely","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142486,"byte_end":142561,"line_start":1456,"line_end":1456,"column_start":5,"column_end":80}},{"value":"/ on this for algorithms, and prefer [`outer_iterator_mut`](Self::outer_iterator_mut)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142566,"byte_end":142653,"line_start":1457,"line_end":1457,"column_start":5,"column_end":92}},{"value":"/ which accesses elements in storage order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142658,"byte_end":142703,"line_start":1458,"line_end":1458,"column_start":5,"column_end":50}},{"value":"/ TODO: `outer_iterator_mut` is not yet implemented","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142708,"byte_end":142761,"line_start":1459,"line_end":1459,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143443,"byte_end":143462,"line_start":1474,"line_end":1474,"column_start":12,"column_end":31},"name":"get_outer_inner_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::get_outer_inner_mut","value":"pub fn get_outer_inner_mut(&mut Self, usize, usize) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to an element given its `outer_ind` and `inner_ind`.\n Will return None if there is no non-zero element at this location.","sig":null,"attributes":[{"value":"/ Get a mutable reference to an element given its `outer_ind` and `inner_ind`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":142984,"byte_end":143064,"line_start":1467,"line_end":1467,"column_start":5,"column_end":85}},{"value":"/ Will return None if there is no non-zero element at this location.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143069,"byte_end":143139,"line_start":1468,"line_end":1468,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143144,"byte_end":143147,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ This access is logarithmic in the number of non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143152,"byte_end":143209,"line_start":1470,"line_end":1470,"column_start":5,"column_end":62}},{"value":"/ in the corresponding outer slice. It is therefore advisable not to rely","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143214,"byte_end":143289,"line_start":1471,"line_end":1471,"column_start":5,"column_end":80}},{"value":"/ on this for algorithms, and prefer [`outer_iterator_mut`](Self::outer_iterator_mut)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143294,"byte_end":143381,"line_start":1472,"line_end":1472,"column_start":5,"column_end":92}},{"value":"/ which accesses elements in storage order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143386,"byte_end":143431,"line_start":1473,"line_end":1473,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143970,"byte_end":143973,"line_start":1494,"line_end":1494,"column_start":12,"column_end":15},"name":"set","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::set","value":"pub fn set(&mut Self, usize, usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of the non-zero element located at (row, col)","sig":null,"attributes":[{"value":"/ Set the value of the non-zero element located at (row, col)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143766,"byte_end":143829,"line_start":1488,"line_end":1488,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143834,"byte_end":143837,"line_start":1489,"line_end":1489,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143842,"byte_end":143854,"line_start":1490,"line_end":1490,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143859,"byte_end":143862,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ - on out-of-bounds access","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143867,"byte_end":143896,"line_start":1492,"line_end":1492,"column_start":5,"column_end":34}},{"value":"/ - if no non-zero element exists at the given location","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":143901,"byte_end":143958,"line_start":1493,"line_end":1493,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144390,"byte_end":144401,"line_start":1505,"line_end":1505,"column_start":12,"column_end":23},"name":"map_inplace","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::map_inplace","value":"pub fn map_inplace<F>(&mut Self, F) where F: FnMut(&N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to every non-zero element\n","sig":null,"attributes":[{"value":"/ Apply a function to every non-zero element","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144332,"byte_end":144378,"line_start":1504,"line_end":1504,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144801,"byte_end":144819,"line_start":1519,"line_end":1519,"column_start":12,"column_end":30},"name":"outer_iterator_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::outer_iterator_mut","value":"pub fn outer_iterator_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable outer iterator for the matrix","sig":null,"attributes":[{"value":"/ Return a mutable outer iterator for the matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144557,"byte_end":144607,"line_start":1514,"line_end":1514,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144612,"byte_end":144615,"line_start":1515,"line_end":1515,"column_start":5,"column_end":8}},{"value":"/ This iterator yields mutable sparse vector views for each outer","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144620,"byte_end":144687,"line_start":1516,"line_end":1516,"column_start":5,"column_end":72}},{"value":"/ dimension. Only the non-zero values can be modified, the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144692,"byte_end":144752,"line_start":1517,"line_end":1517,"column_start":5,"column_end":65}},{"value":"/ structure is kept immutable.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":144757,"byte_end":144789,"line_start":1518,"line_end":1518,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":145700,"byte_end":145708,"line_start":1543,"line_end":1543,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::view_mut","value":"pub fn view_mut(&mut Self) -> CsMatViewMutI<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into the current matrix\n","sig":null,"attributes":[{"value":"/ Return a mutable view into the current matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":145639,"byte_end":145688,"line_start":1542,"line_end":1542,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":146108,"byte_end":146121,"line_start":1555,"line_end":1555,"column_start":12,"column_end":25},"name":"diag_iter_mut","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::diag_iter_mut","value":"pub fn diag_iter_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iteration over all entries on the diagonal\n","sig":null,"attributes":[{"value":"/ Iteration over all entries on the diagonal","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":146050,"byte_end":146096,"line_start":1554,"line_end":1554,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148413,"byte_end":148419,"line_start":1623,"line_end":1623,"column_start":12,"column_end":18},"name":"modify","qualname":"<CsMatBase<N, I, IptrStorage, IndStorage, DataStorage, Iptr>>::modify","value":"pub fn modify<F>(&mut Self, F) where F: FnMut(&mut [Iptr], &mut [I], &mut [N])\n-> ()","parent":null,"children":[],"decl_id":null,"docs":" Modify the matrix's structure without changing its nonzero count.","sig":null,"attributes":[{"value":"/ Modify the matrix's structure without changing its nonzero count.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147447,"byte_end":147516,"line_start":1590,"line_end":1590,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147521,"byte_end":147524,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ The coherence of the structure will be checked afterwards.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147529,"byte_end":147591,"line_start":1592,"line_end":1592,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147596,"byte_end":147599,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147604,"byte_end":147616,"line_start":1594,"line_end":1594,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147621,"byte_end":147624,"line_start":1595,"line_end":1595,"column_start":5,"column_end":8}},{"value":"/ If the resulting matrix breaks the `CsMat` invariants","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147629,"byte_end":147686,"line_start":1596,"line_end":1596,"column_start":5,"column_end":62}},{"value":"/ (sorted indices, no out of bounds indices).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147691,"byte_end":147738,"line_start":1597,"line_end":1597,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147743,"byte_end":147746,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147751,"byte_end":147764,"line_start":1599,"line_end":1599,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147769,"byte_end":147772,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147777,"byte_end":147788,"line_start":1601,"line_end":1601,"column_start":5,"column_end":16}},{"value":"/ use sprs::CsMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147793,"byte_end":147813,"line_start":1602,"line_end":1602,"column_start":5,"column_end":25}},{"value":"/ // |   1   |","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147818,"byte_end":147834,"line_start":1603,"line_end":1603,"column_start":5,"column_end":21}},{"value":"/ // | 1     |","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147839,"byte_end":147855,"line_start":1604,"line_end":1604,"column_start":5,"column_end":21}},{"value":"/ // |   1 1 |","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147860,"byte_end":147876,"line_start":1605,"line_end":1605,"column_start":5,"column_end":21}},{"value":"/ let mut mat = CsMat::new_csc((3, 3),","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147881,"byte_end":147921,"line_start":1606,"line_end":1606,"column_start":5,"column_end":45}},{"value":"/                                   vec![0, 1, 3, 4],","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147926,"byte_end":147981,"line_start":1607,"line_end":1607,"column_start":5,"column_end":60}},{"value":"/                                   vec![1, 0, 2, 2],","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147986,"byte_end":148041,"line_start":1608,"line_end":1608,"column_start":5,"column_end":60}},{"value":"/                                   vec![1.; 4]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148046,"byte_end":148097,"line_start":1609,"line_end":1609,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148102,"byte_end":148105,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ // | 1 2   |","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148110,"byte_end":148126,"line_start":1611,"line_end":1611,"column_start":5,"column_end":21}},{"value":"/ // | 1     |","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148131,"byte_end":148147,"line_start":1612,"line_end":1612,"column_start":5,"column_end":21}},{"value":"/ // |   1   |","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148152,"byte_end":148168,"line_start":1613,"line_end":1613,"column_start":5,"column_end":21}},{"value":"/ mat.modify(|indptr, indices, data| {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148173,"byte_end":148213,"line_start":1614,"line_end":1614,"column_start":5,"column_end":45}},{"value":"/     indptr[1] = 2;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148218,"byte_end":148240,"line_start":1615,"line_end":1615,"column_start":5,"column_end":27}},{"value":"/     indptr[2] = 4;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148245,"byte_end":148267,"line_start":1616,"line_end":1616,"column_start":5,"column_end":27}},{"value":"/     indices[0] = 0;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148272,"byte_end":148295,"line_start":1617,"line_end":1617,"column_start":5,"column_end":28}},{"value":"/     indices[1] = 1;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148300,"byte_end":148323,"line_start":1618,"line_end":1618,"column_start":5,"column_end":28}},{"value":"/     indices[2] = 0;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148328,"byte_end":148351,"line_start":1619,"line_end":1619,"column_start":5,"column_end":28}},{"value":"/     data[2] = 2.;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148356,"byte_end":148377,"line_start":1620,"line_end":1620,"column_start":5,"column_end":26}},{"value":"/ });","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148382,"byte_end":148389,"line_start":1621,"line_end":1621,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":148394,"byte_end":148401,"line_start":1622,"line_end":1622,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3652},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":198412,"byte_end":198422,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"name":"IndPtrBase","qualname":"::sparse::indptr::IndPtrBase","value":"IndPtrBase {  }","parent":null,"children":[{"krate":0,"index":3655}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1363},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":198536,"byte_end":198542,"line_start":29,"line_end":29,"column_start":10,"column_end":16},"name":"IndPtr","qualname":"::sparse::indptr::IndPtr","value":"IndPtrBase<Iptr, Vec<Iptr>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1365},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":198589,"byte_end":198599,"line_start":30,"line_end":30,"column_start":10,"column_end":20},"name":"IndPtrView","qualname":"::sparse::indptr::IndPtrView","value":"IndPtrBase<Iptr, &'a [Iptr]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":200172,"byte_end":200183,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"new_checked","qualname":"<IndPtrBase<Iptr, Storage>>::new_checked","value":"pub fn new_checked(Storage) -> Result<Self, (Storage, StructureError)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":200540,"byte_end":200544,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"view","qualname":"<IndPtrBase<Iptr, Storage>>::view","value":"pub fn view(&Self) -> IndPtrView<, Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":200708,"byte_end":200711,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"len","qualname":"<IndPtrBase<Iptr, Storage>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length of the underlying storage\n","sig":null,"attributes":[{"value":"/ The length of the underlying storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":200656,"byte_end":200696,"line_start":97,"line_end":97,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":200818,"byte_end":200826,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndPtrBase<Iptr, Storage>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this indptr is empty\n","sig":null,"attributes":[{"value":"/ Tests whether this indptr is empty","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":200768,"byte_end":200806,"line_start":102,"line_end":102,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201109,"byte_end":201119,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"outer_dims","qualname":"<IndPtrBase<Iptr, Storage>>::outer_dims","value":"pub fn outer_dims(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of outer dimensions this indptr represents\n","sig":null,"attributes":[{"value":"/ The number of outer dimensions this indptr represents","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201040,"byte_end":201097,"line_start":110,"line_end":110,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201454,"byte_end":201463,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"is_proper","qualname":"<IndPtrBase<Iptr, Storage>>::is_proper","value":"pub fn is_proper(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether the underlying storage is proper, which means the\n indptr corresponds to a non-sliced matrix.","sig":null,"attributes":[{"value":"/ Indicates whether the underlying storage is proper, which means the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201262,"byte_end":201333,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/ indptr corresponds to a non-sliced matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201338,"byte_end":201384,"line_start":120,"line_end":120,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201389,"byte_end":201392,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ An empty matrix is considered non-proper.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201397,"byte_end":201442,"line_start":122,"line_end":122,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201787,"byte_end":201795,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<IndPtrBase<Iptr, Storage>>::as_slice","value":"pub fn as_slice(&Self) -> Option<&[Iptr]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the underlying slice if it is a proper `indptr` slice,\n which is the case if its first element is 0. `None` will be returned\n otherwise.\n","sig":null,"attributes":[{"value":"/ Return a view on the underlying slice if it is a proper `indptr` slice,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201604,"byte_end":201679,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ which is the case if its first element is 0. `None` will be returned","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201684,"byte_end":201756,"line_start":131,"line_end":131,"column_start":5,"column_end":77}},{"value":"/ otherwise.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201761,"byte_end":201775,"line_start":132,"line_end":132,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202130,"byte_end":202141,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"raw_storage","qualname":"<IndPtrBase<Iptr, Storage>>::raw_storage","value":"pub fn raw_storage(&Self) -> &[Iptr]","parent":null,"children":[],"decl_id":null,"docs":" Return a view of the underlying storage. Should be used with care in\n sparse algorithms, as this won't check if the storage corresponds to a\n proper matrix\n","sig":null,"attributes":[{"value":"/ Return a view of the underlying storage. Should be used with care in","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":201945,"byte_end":202017,"line_start":141,"line_end":141,"column_start":5,"column_end":77}},{"value":"/ sparse algorithms, as this won't check if the storage corresponds to a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202022,"byte_end":202096,"line_start":142,"line_end":142,"column_start":5,"column_end":79}},{"value":"/ proper matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202101,"byte_end":202118,"line_start":143,"line_end":143,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202531,"byte_end":202547,"line_start":158,"line_end":158,"column_start":12,"column_end":28},"name":"into_raw_storage","qualname":"<IndPtrBase<Iptr, Storage>>::into_raw_storage","value":"pub fn into_raw_storage(Self) -> Storage","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and return the underlying storage\n","sig":null,"attributes":[{"value":"/ Consume `self` and return the underlying storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202467,"byte_end":202519,"line_start":157,"line_end":157,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202606,"byte_end":202614,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<IndPtrBase<Iptr, Storage>>::to_owned","value":"pub fn to_owned(&Self) -> IndPtr<Iptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204222,"byte_end":204231,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"to_proper","qualname":"<IndPtrBase<Iptr, Storage>>::to_proper","value":"pub fn to_proper(&Self) -> std::borrow::Cow<, [Iptr]>","parent":null,"children":[],"decl_id":null,"docs":" Returns a proper indptr representation, cloning if we do not have\n a proper indptr.","sig":null,"attributes":[{"value":"/ Returns a proper indptr representation, cloning if we do not have","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202722,"byte_end":202791,"line_start":168,"line_end":168,"column_start":5,"column_end":74}},{"value":"/ a proper indptr.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202796,"byte_end":202816,"line_start":169,"line_end":169,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202821,"byte_end":202824,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202829,"byte_end":202842,"line_start":171,"line_end":171,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202847,"byte_end":202850,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ For ffi usage, one needs to call `Cow::as_ptr`, but it's important","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202855,"byte_end":202925,"line_start":173,"line_end":173,"column_start":5,"column_end":75}},{"value":"/ to keep the `Cow` alive during the lifetime of the pointer. Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":202930,"byte_end":203001,"line_start":174,"line_end":174,"column_start":5,"column_end":76}},{"value":"/ of a correct and incorrect ffi usage:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203006,"byte_end":203047,"line_start":175,"line_end":175,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203052,"byte_end":203055,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203060,"byte_end":203071,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/ let mat: sprs::CsMat<f64> = sprs::CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203076,"byte_end":203128,"line_start":178,"line_end":178,"column_start":5,"column_end":57}},{"value":"/ let mid = mat.view().middle_outer_views(1, 2);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203133,"byte_end":203183,"line_start":179,"line_end":179,"column_start":5,"column_end":55}},{"value":"/ let ptr = {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203188,"byte_end":203203,"line_start":180,"line_end":180,"column_start":5,"column_end":20}},{"value":"/     let indptr = mid.indptr(); // needed for lifetime","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203208,"byte_end":203265,"line_start":181,"line_end":181,"column_start":5,"column_end":62}},{"value":"/     let indptr_proper = indptr.to_proper();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203270,"byte_end":203317,"line_start":182,"line_end":182,"column_start":5,"column_end":52}},{"value":"/     println!(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203322,"byte_end":203339,"line_start":183,"line_end":183,"column_start":5,"column_end":22}},{"value":"/         \"ptr {:?} is valid as long as _indptr_proper_owned is in scope\",","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203344,"byte_end":203420,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/         indptr_proper.as_ptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203425,"byte_end":203459,"line_start":185,"line_end":185,"column_start":5,"column_end":39}},{"value":"/     );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203464,"byte_end":203474,"line_start":186,"line_end":186,"column_start":5,"column_end":15}},{"value":"/     indptr_proper.as_ptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203479,"byte_end":203509,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/ };","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203514,"byte_end":203520,"line_start":188,"line_end":188,"column_start":5,"column_end":11}},{"value":"/ // This line is UB.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203525,"byte_end":203548,"line_start":189,"line_end":189,"column_start":5,"column_end":28}},{"value":"/ // println!(\"ptr deref: {}\", *ptr);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203553,"byte_end":203592,"line_start":190,"line_end":190,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203597,"byte_end":203604,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203609,"byte_end":203612,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ It is much easier to directly use the `proper_indptr` method of","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203617,"byte_end":203684,"line_start":193,"line_end":193,"column_start":5,"column_end":72}},{"value":"/ `CsMatBase` directly:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203689,"byte_end":203714,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203719,"byte_end":203722,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203727,"byte_end":203738,"line_start":196,"line_end":196,"column_start":5,"column_end":16}},{"value":"/ let mat: sprs::CsMat<f64> = sprs::CsMat::eye(5);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203743,"byte_end":203795,"line_start":197,"line_end":197,"column_start":5,"column_end":57}},{"value":"/ let mid = mat.view().middle_outer_views(1, 2);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203800,"byte_end":203850,"line_start":198,"line_end":198,"column_start":5,"column_end":55}},{"value":"/ let ptr = {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203855,"byte_end":203870,"line_start":199,"line_end":199,"column_start":5,"column_end":20}},{"value":"/     let indptr_proper = mid.proper_indptr();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203875,"byte_end":203923,"line_start":200,"line_end":200,"column_start":5,"column_end":53}},{"value":"/     println!(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203928,"byte_end":203945,"line_start":201,"line_end":201,"column_start":5,"column_end":22}},{"value":"/         \"ptr {:?} is valid as long as _indptr_proper_owned is in scope\",","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":203950,"byte_end":204026,"line_start":202,"line_end":202,"column_start":5,"column_end":81}},{"value":"/         indptr_proper.as_ptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204031,"byte_end":204065,"line_start":203,"line_end":203,"column_start":5,"column_end":39}},{"value":"/     );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204070,"byte_end":204080,"line_start":204,"line_end":204,"column_start":5,"column_end":15}},{"value":"/     indptr_proper.as_ptr()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204085,"byte_end":204115,"line_start":205,"line_end":205,"column_start":5,"column_end":35}},{"value":"/ };","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204120,"byte_end":204126,"line_start":206,"line_end":206,"column_start":5,"column_end":11}},{"value":"/ // This line is UB.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204131,"byte_end":204154,"line_start":207,"line_end":207,"column_start":5,"column_end":28}},{"value":"/ // println!(\"ptr deref: {}\", *ptr);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204159,"byte_end":204198,"line_start":208,"line_end":208,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204203,"byte_end":204210,"line_start":209,"line_end":209,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204803,"byte_end":204822,"line_start":227,"line_end":227,"column_start":12,"column_end":31},"name":"iter_outer_nnz_inds","qualname":"<IndPtrBase<Iptr, Storage>>::iter_outer_nnz_inds","value":"pub fn iter_outer_nnz_inds(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the nonzeros represented by this indptr, yielding the\n outer dimension for each nonzero\n","sig":null,"attributes":[{"value":"/ Iterate over the nonzeros represented by this indptr, yielding the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204680,"byte_end":204750,"line_start":225,"line_end":225,"column_start":5,"column_end":75}},{"value":"/ outer dimension for each nonzero","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":204755,"byte_end":204791,"line_start":226,"line_end":226,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":205605,"byte_end":205615,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"name":"iter_outer","qualname":"<IndPtrBase<Iptr, Storage>>::iter_outer","value":"pub fn iter_outer(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over outer dimensions, yielding start and end indices for each\n outer dimension.\n","sig":null,"attributes":[{"value":"/ Iterate over outer dimensions, yielding start and end indices for each","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":205494,"byte_end":205568,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ outer dimension.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":205573,"byte_end":205593,"line_start":250,"line_end":250,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206233,"byte_end":206246,"line_start":270,"line_end":270,"column_start":12,"column_end":25},"name":"iter_outer_sz","qualname":"<IndPtrBase<Iptr, Storage>>::iter_outer_sz","value":"pub fn iter_outer_sz(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over outer dimensions, yielding start and end indices for each\n outer dimension.","sig":null,"attributes":[{"value":"/ Iterate over outer dimensions, yielding start and end indices for each","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206033,"byte_end":206107,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ outer dimension.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206112,"byte_end":206132,"line_start":267,"line_end":267,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206137,"byte_end":206140,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Returns a range of usize to ensure iteration of indices and data is easy","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206145,"byte_end":206221,"line_start":269,"line_end":269,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206709,"byte_end":206714,"line_start":282,"line_end":282,"column_start":12,"column_end":17},"name":"index","qualname":"<IndPtrBase<Iptr, Storage>>::index","value":"pub fn index(&Self, usize) -> Iptr","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the indptr at index i. This method is intended for\n low-level usage only, `outer_inds` should be preferred most of the time\n","sig":null,"attributes":[{"value":"/ Return the value of the indptr at index i. This method is intended for","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206543,"byte_end":206617,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/ low-level usage only, `outer_inds` should be preferred most of the time","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206622,"byte_end":206697,"line_start":281,"line_end":281,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206970,"byte_end":206980,"line_start":292,"line_end":292,"column_start":12,"column_end":22},"name":"outer_inds","qualname":"<IndPtrBase<Iptr, Storage>>::outer_inds","value":"pub fn outer_inds(&Self, usize) -> Range<Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Get the start and end indices for the requested outer dimension","sig":null,"attributes":[{"value":"/ Get the start and end indices for the requested outer dimension","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206822,"byte_end":206889,"line_start":287,"line_end":287,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206894,"byte_end":206897,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206902,"byte_end":206914,"line_start":289,"line_end":289,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206919,"byte_end":206922,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ If `i >= self.outer_dims()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":206927,"byte_end":206958,"line_start":291,"line_end":291,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207411,"byte_end":207424,"line_start":305,"line_end":305,"column_start":12,"column_end":25},"name":"outer_inds_sz","qualname":"<IndPtrBase<Iptr, Storage>>::outer_inds_sz","value":"pub fn outer_inds_sz(&Self, usize) -> Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the start and end indices for the requested outer dimension","sig":null,"attributes":[{"value":"/ Get the start and end indices for the requested outer dimension","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207174,"byte_end":207241,"line_start":298,"line_end":298,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207246,"byte_end":207249,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ Returns a range of usize to ensure iteration of indices and data is easy","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207254,"byte_end":207330,"line_start":300,"line_end":300,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207335,"byte_end":207338,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207343,"byte_end":207355,"line_start":302,"line_end":302,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207360,"byte_end":207363,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If `i >= self.outer_dims()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207368,"byte_end":207399,"line_start":304,"line_end":304,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207722,"byte_end":207734,"line_start":315,"line_end":315,"column_start":12,"column_end":24},"name":"nnz_in_outer","qualname":"<IndPtrBase<Iptr, Storage>>::nnz_in_outer","value":"pub fn nnz_in_outer(&Self, usize) -> Iptr","parent":null,"children":[],"decl_id":null,"docs":" Get the number of nonzeros in the requested outer dimension","sig":null,"attributes":[{"value":"/ Get the number of nonzeros in the requested outer dimension","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207578,"byte_end":207641,"line_start":310,"line_end":310,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207646,"byte_end":207649,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207654,"byte_end":207666,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207671,"byte_end":207674,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ If `i >= self.outer_dims()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207679,"byte_end":207710,"line_start":314,"line_end":314,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208040,"byte_end":208055,"line_start":327,"line_end":327,"column_start":12,"column_end":27},"name":"nnz_in_outer_sz","qualname":"<IndPtrBase<Iptr, Storage>>::nnz_in_outer_sz","value":"pub fn nnz_in_outer_sz(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of nonzeros in the requested outer dimension","sig":null,"attributes":[{"value":"/ Get the number of nonzeros in the requested outer dimension","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207864,"byte_end":207927,"line_start":320,"line_end":320,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207932,"byte_end":207935,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Returns a usize","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207940,"byte_end":207959,"line_start":322,"line_end":322,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207964,"byte_end":207967,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207972,"byte_end":207984,"line_start":324,"line_end":324,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207989,"byte_end":207992,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ If `i >= self.outer_dims()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":207997,"byte_end":208028,"line_start":326,"line_end":326,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208327,"byte_end":208343,"line_start":336,"line_end":336,"column_start":12,"column_end":28},"name":"outer_inds_slice","qualname":"<IndPtrBase<Iptr, Storage>>::outer_inds_slice","value":"pub fn outer_inds_slice(&Self, usize, usize) -> Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the start and end indices for the requested outer dimension slice","sig":null,"attributes":[{"value":"/ Get the start and end indices for the requested outer dimension slice","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208142,"byte_end":208215,"line_start":331,"line_end":331,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208220,"byte_end":208223,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208228,"byte_end":208240,"line_start":333,"line_end":333,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208245,"byte_end":208248,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ If `start >= self.outer_dims() || end > self.outer_dims()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208253,"byte_end":208315,"line_start":335,"line_end":335,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208653,"byte_end":208656,"line_start":343,"line_end":343,"column_start":12,"column_end":15},"name":"nnz","qualname":"<IndPtrBase<Iptr, Storage>>::nnz","value":"pub fn nnz(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of nonzero elements described by this indptr\n","sig":null,"attributes":[{"value":"/ The number of nonzero elements described by this indptr","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":208582,"byte_end":208641,"line_start":342,"line_end":342,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":209133,"byte_end":209138,"line_start":356,"line_end":356,"column_start":12,"column_end":17},"name":"nnz_i","qualname":"<IndPtrBase<Iptr, Storage>>::nnz_i","value":"pub fn nnz_i(&Self) -> Iptr","parent":null,"children":[],"decl_id":null,"docs":" The number of nonzero elements described by this indptr, using the\n actual storage type\n","sig":null,"attributes":[{"value":"/ The number of nonzero elements described by this indptr, using the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":209023,"byte_end":209093,"line_start":354,"line_end":354,"column_start":5,"column_end":75}},{"value":"/ actual storage type","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":209098,"byte_end":209121,"line_start":355,"line_end":355,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":1442},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216872,"byte_end":216881,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Kronecker","qualname":"::sparse::kronecker::Kronecker","value":"Kronecker<B = Self>","parent":null,"children":[{"krate":0,"index":1444},{"krate":0,"index":1445}],"decl_id":null,"docs":" Trait for types that are valid to compute a Kronecker product.\n This includes all classic scalar types, but can be extended to matrices\n as well, which will enable computing the kronecker product of sparse\n by block matrices.\n","sig":null,"attributes":[{"value":"/ Trait for types that are valid to compute a Kronecker product.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216623,"byte_end":216689,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ This includes all classic scalar types, but can be extended to matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216690,"byte_end":216765,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ as well, which will enable computing the kronecker product of sparse","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216766,"byte_end":216838,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ by block matrices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216839,"byte_end":216861,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1444},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216903,"byte_end":216909,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Output","qualname":"::sparse::kronecker::Kronecker::Output","value":"type Output;","parent":{"krate":0,"index":1442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":216918,"byte_end":216922,"line_start":11,"line_end":11,"column_start":8,"column_end":12},"name":"kron","qualname":"::sparse::kronecker::Kronecker::kron","value":"pub fn kron(&Self, &B) -> <Self as Kronecker<B>>::Output","parent":{"krate":0,"index":1442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1447},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217876,"byte_end":217893,"line_start":50,"line_end":50,"column_start":8,"column_end":25},"name":"kronecker_product","qualname":"::sparse::kronecker::kronecker_product","value":"pub fn kronecker_product<Nin, Nout, I,\n                         Iptr>(CsMatViewI<, Nin, I, Iptr>,\n                               CsMatViewI<, Nin, I, Iptr>)\n-> CsMatI<Nout, I, Iptr> where Nin: Clone + Default + Kronecker<Output =\nNout>, Nout: Clone + Default, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Compute the Kronecker product between two matrices","sig":null,"attributes":[{"value":"/ Compute the Kronecker product between two matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217567,"byte_end":217621,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217622,"byte_end":217625,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The storage order of the product will be based on the first matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217626,"byte_end":217697,"line_start":42,"line_end":42,"column_start":1,"column_end":72}},{"value":"/ This method will perform a clone if the two matrices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217698,"byte_end":217754,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"/ have different storage order","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217755,"byte_end":217787,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217788,"byte_end":217791,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217792,"byte_end":217804,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217805,"byte_end":217808,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ * if indices are out of bounds for its type","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217809,"byte_end":217856,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"must_use","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/kronecker.rs","byte_start":217857,"byte_end":217868,"line_start":49,"line_end":49,"column_start":1,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":1455},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linalg","qualname":"::sparse::linalg","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":1494},{"krate":0,"index":1604},{"krate":0,"index":1686},{"krate":0,"index":1689}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1466},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"etree","qualname":"::sparse::linalg::etree","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1474},{"krate":0,"index":3729},{"krate":0,"index":3732},{"krate":0,"index":3735},{"krate":0,"index":1475},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1486},{"krate":0,"index":1492}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1474},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222093,"byte_end":222099,"line_start":5,"line_end":5,"column_start":10,"column_end":16},"name":"Parent","qualname":"::sparse::linalg::etree::Parent","value":"Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3729},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222284,"byte_end":222291,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Parents","qualname":"::sparse::linalg::etree::Parents","value":"Parents {  }","parent":null,"children":[{"krate":0,"index":3731}],"decl_id":null,"docs":" Store an etree as the parent information of each node.\n This reflects the fact that etrees can in fact have multiple roots.\n","sig":null,"attributes":[{"value":"/ Store an etree as the parent information of each node.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222118,"byte_end":222176,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"/ This reflects the fact that etrees can in fact have multiple roots.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222177,"byte_end":222248,"line_start":8,"line_end":8,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":1475},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222364,"byte_end":222375,"line_start":17,"line_end":17,"column_start":10,"column_end":21},"name":"ParentsView","qualname":"::sparse::linalg::etree::ParentsView","value":"Parents<&'a [Parent]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1477},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222414,"byte_end":222428,"line_start":18,"line_end":18,"column_start":10,"column_end":24},"name":"ParentsViewMut","qualname":"::sparse::linalg::etree::ParentsViewMut","value":"Parents<&'a mut [Parent]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1479},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222471,"byte_end":222483,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"name":"ParentsOwned","qualname":"::sparse::linalg::etree::ParentsOwned","value":"Parents<Vec<Parent>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222705,"byte_end":222715,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"get_parent","qualname":"<Parents<S>>::get_parent","value":"pub fn get_parent(&Self, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the parent of a node. Returns None if the node is a root.","sig":null,"attributes":[{"value":"/ Get the parent of a node. Returns None if the node is a root.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222560,"byte_end":222625,"line_start":22,"line_end":22,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222630,"byte_end":222633,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222638,"byte_end":222650,"line_start":24,"line_end":24,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222655,"byte_end":222658,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ * if node is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222663,"byte_end":222693,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222907,"byte_end":222914,"line_start":36,"line_end":36,"column_start":12,"column_end":19},"name":"is_root","qualname":"<Parents<S>>::is_root","value":"pub fn is_root(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a node is a root.","sig":null,"attributes":[{"value":"/ Test whether a node is a root.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222793,"byte_end":222827,"line_start":31,"line_end":31,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222832,"byte_end":222835,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222840,"byte_end":222852,"line_start":33,"line_end":33,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222857,"byte_end":222860,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ * if node is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222865,"byte_end":222895,"line_start":35,"line_end":35,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223042,"byte_end":223050,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"nb_nodes","qualname":"<Parents<S>>::nb_nodes","value":"pub fn nb_nodes(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of nodes in this tree.\n","sig":null,"attributes":[{"value":"/ The number of nodes in this tree.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222993,"byte_end":223030,"line_start":40,"line_end":40,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223148,"byte_end":223152,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"view","qualname":"<Parents<S>>::view","value":"pub fn view(&Self) -> ParentsView","parent":null,"children":[],"decl_id":null,"docs":" Get a view of this object\n","sig":null,"attributes":[{"value":"/ Get a view of this object","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223107,"byte_end":223136,"line_start":45,"line_end":45,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223458,"byte_end":223468,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"set_parent","qualname":"<Parents<S>>::set_parent","value":"pub fn set_parent(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the parent of a node.","sig":null,"attributes":[{"value":"/ Set the parent of a node.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223312,"byte_end":223341,"line_start":54,"line_end":54,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223346,"byte_end":223349,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223354,"byte_end":223366,"line_start":56,"line_end":56,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223371,"byte_end":223374,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ * if node is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223379,"byte_end":223409,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"/ * if parent is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223414,"byte_end":223446,"line_start":59,"line_end":59,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223738,"byte_end":223746,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"set_root","qualname":"<Parents<S>>::set_root","value":"pub fn set_root(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set a node as a root.","sig":null,"attributes":[{"value":"/ Set a node as a root.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223633,"byte_end":223658,"line_start":65,"line_end":65,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223663,"byte_end":223666,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223671,"byte_end":223683,"line_start":67,"line_end":67,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223688,"byte_end":223691,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ * if node is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223696,"byte_end":223726,"line_start":69,"line_end":69,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223990,"byte_end":223996,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"uproot","qualname":"<Parents<S>>::uproot","value":"pub fn uproot(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Give a parent to a root of the tree. No-op if the node was not a parent.","sig":null,"attributes":[{"value":"/ Give a parent to a root of the tree. No-op if the node was not a parent.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223819,"byte_end":223895,"line_start":74,"line_end":74,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223900,"byte_end":223903,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223908,"byte_end":223920,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223925,"byte_end":223928,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ if either node or parent is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223933,"byte_end":223978,"line_start":78,"line_end":78,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":224211,"byte_end":224219,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<Parents<S>>::view_mut","value":"pub fn view_mut(&mut Self) -> ParentsViewMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":224431,"byte_end":224434,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<Parents<Vec<Parent>>>::new","value":"pub fn new(usize) -> ParentsOwned","parent":null,"children":[],"decl_id":null,"docs":" Create a new tree with all nodes set as root\n","sig":null,"attributes":[{"value":"/ Create a new tree with all nodes set as root","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":224371,"byte_end":224419,"line_start":94,"line_end":94,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1494},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ordering","qualname":"::sparse::linalg::ordering","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1514},{"krate":0,"index":1557},{"krate":0,"index":1592},{"krate":0,"index":1600}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1510},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":224759,"byte_end":224767,"line_start":7,"line_end":7,"column_start":12,"column_end":20},"name":"Ordering","qualname":"::sparse::linalg::ordering::Ordering","value":"Ordering { perm, connected_parts }","parent":null,"children":[{"krate":0,"index":1512},{"krate":0,"index":1513}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1512},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":224814,"byte_end":224818,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"name":"perm","qualname":"::sparse::linalg::ordering::Ordering::perm","value":"sparse::permutation::Permutation<I, std::vec::Vec<I>>","parent":{"krate":0,"index":1510},"children":[],"decl_id":null,"docs":" The computed permutation\n","sig":null,"attributes":[{"value":"/ The computed permutation","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":224777,"byte_end":224805,"line_start":8,"line_end":8,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1513},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":224914,"byte_end":224929,"line_start":11,"line_end":11,"column_start":9,"column_end":24},"name":"connected_parts","qualname":"::sparse::linalg::ordering::Ordering::connected_parts","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":1510},"children":[],"decl_id":null,"docs":" Indices inside the permutation delimiting connected components\n","sig":null,"attributes":[{"value":"/ Indices inside the permutation delimiting connected components","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":224839,"byte_end":224905,"line_start":10,"line_end":10,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1514},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":224954,"byte_end":224959,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"start","qualname":"::sparse::linalg::ordering::start","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":3738},{"krate":0,"index":3740},{"krate":0,"index":1544},{"krate":0,"index":1551}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1521},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225546,"byte_end":225554,"line_start":26,"line_end":26,"column_start":15,"column_end":23},"name":"Strategy","qualname":"::sparse::linalg::ordering::start::Strategy","value":"Strategy<N, I, Iptr>","parent":null,"children":[{"krate":0,"index":1525}],"decl_id":null,"docs":" This trait abstracts over possible strategies to choose a starting\n vertex for the Cutihll-McKee algorithm. Common strategies are provided.","sig":null,"attributes":[{"value":"/ This trait abstracts over possible strategies to choose a starting","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225036,"byte_end":225106,"line_start":18,"line_end":18,"column_start":5,"column_end":75}},{"value":"/ vertex for the Cutihll-McKee algorithm. Common strategies are provided.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225111,"byte_end":225186,"line_start":19,"line_end":19,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225191,"byte_end":225194,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ You can implement this trait yourself to enable custom strategies,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225199,"byte_end":225269,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ e.g. for predetermined starting vertices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225274,"byte_end":225319,"line_start":22,"line_end":22,"column_start":5,"column_end":50}},{"value":"/ If you do that, please let us now by filing an issue in the repo,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225324,"byte_end":225393,"line_start":23,"line_end":23,"column_start":5,"column_end":74}},{"value":"/ since we would like to know which strategies are common in the wild,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225398,"byte_end":225470,"line_start":24,"line_end":24,"column_start":5,"column_end":77}},{"value":"/ so we can consider implementing them in the library.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225475,"byte_end":225531,"line_start":25,"line_end":25,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225774,"byte_end":225791,"line_start":34,"line_end":34,"column_start":12,"column_end":29},"name":"find_start_vertex","qualname":"::sparse::linalg::ordering::start::Strategy::find_start_vertex","value":"pub fn find_start_vertex(&mut Self, &[bool], &[usize],\n                         &CsMatViewI<, N, I, Iptr>) -> usize","parent":{"krate":0,"index":1521},"children":[],"decl_id":null,"docs":" **Contract:** This function must always be called with at least one\n unvisited vertex left.\n","sig":null,"attributes":[{"value":"/ **Contract:** This function must always be called with at least one","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225656,"byte_end":225727,"line_start":32,"line_end":32,"column_start":9,"column_end":80}},{"value":"/ unvisited vertex left.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225736,"byte_end":225762,"line_start":33,"line_end":33,"column_start":9,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1526},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226038,"byte_end":226042,"line_start":43,"line_end":43,"column_start":16,"column_end":20},"name":"Next","qualname":"::sparse::linalg::ordering::start::Next","value":"","parent":null,"children":[],"decl_id":null,"docs":" This strategy chooses some next available vertex as starting vertex.\n","sig":null,"attributes":[{"value":"/ This strategy chooses some next available vertex as starting vertex.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":225950,"byte_end":226022,"line_start":42,"line_end":42,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1534},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226731,"byte_end":226744,"line_start":68,"line_end":68,"column_start":16,"column_end":29},"name":"MinimumDegree","qualname":"::sparse::linalg::ordering::start::MinimumDegree","value":"","parent":null,"children":[],"decl_id":null,"docs":" This strategy chooses a vertex of minimum degree as starting vertex.\n","sig":null,"attributes":[{"value":"/ This strategy chooses a vertex of minimum degree as starting vertex.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226643,"byte_end":226715,"line_start":67,"line_end":67,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":3738},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227652,"byte_end":227668,"line_start":98,"line_end":98,"column_start":16,"column_end":32},"name":"PseudoPeripheral","qualname":"::sparse::linalg::ordering::start::PseudoPeripheral","value":"","parent":null,"children":[],"decl_id":null,"docs":" This strategy employs an pseudoperipheral vertex finder as described by\n George and Liu.  It is the most expensive strategy to compute, but\n typically results in the narrowest bandwidth.\n","sig":null,"attributes":[{"value":"/ This strategy employs an pseudoperipheral vertex finder as described by","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227409,"byte_end":227484,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ George and Liu.  It is the most expensive strategy to compute, but","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227489,"byte_end":227559,"line_start":95,"line_end":95,"column_start":5,"column_end":75}},{"value":"/ typically results in the narrowest bandwidth.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227564,"byte_end":227613,"line_start":96,"line_end":96,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227734,"byte_end":227737,"line_start":102,"line_end":102,"column_start":16,"column_end":19},"name":"new","qualname":"<PseudoPeripheral>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227709,"byte_end":227718,"line_start":101,"line_end":101,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1557},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234509,"byte_end":234514,"line_start":269,"line_end":269,"column_start":9,"column_end":14},"name":"order","qualname":"::sparse::linalg::ordering::order","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1561},{"krate":0,"index":1564},{"krate":0,"index":1567},{"krate":0,"index":3742},{"krate":0,"index":3746},{"krate":0,"index":1573},{"krate":0,"index":1576},{"krate":0,"index":3749},{"krate":0,"index":3755},{"krate":0,"index":1582},{"krate":0,"index":1585}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1567},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235179,"byte_end":235195,"line_start":285,"line_end":285,"column_start":15,"column_end":31},"name":"DirectedOrdering","qualname":"::sparse::linalg::ordering::order::DirectedOrdering","value":"DirectedOrdering<I: SpIndex>","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572}],"decl_id":null,"docs":" This trait is very deeply integrated with the inner workings of the\n Cuthill-McKee algorithm implemented here.  It is conceptually only an\n enum, specifying if the Cuthill-McKee ordering should be built in\n reverse order.","sig":null,"attributes":[{"value":"/ This trait is very deeply integrated with the inner workings of the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234630,"byte_end":234701,"line_start":275,"line_end":275,"column_start":5,"column_end":76}},{"value":"/ Cuthill-McKee algorithm implemented here.  It is conceptually only an","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234706,"byte_end":234779,"line_start":276,"line_end":276,"column_start":5,"column_end":78}},{"value":"/ enum, specifying if the Cuthill-McKee ordering should be built in","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234784,"byte_end":234853,"line_start":277,"line_end":277,"column_start":5,"column_end":74}},{"value":"/ reverse order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234858,"byte_end":234876,"line_start":278,"line_end":278,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234881,"byte_end":234884,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ No method on this trait should ever be called by the consumer.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":234889,"byte_end":234955,"line_start":280,"line_end":280,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235522,"byte_end":235529,"line_start":291,"line_end":291,"column_start":12,"column_end":19},"name":"prepare","qualname":"::sparse::linalg::ordering::order::DirectedOrdering::prepare","value":"pub fn prepare(&mut Self, usize)","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Prepares this directed ordering for working with the specified\n number of vertices.\n","sig":null,"attributes":[{"value":"/ Prepares this directed ordering for working with the specified","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235218,"byte_end":235284,"line_start":286,"line_end":286,"column_start":9,"column_end":75}},{"value":"/ number of vertices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235293,"byte_end":235316,"line_start":287,"line_end":287,"column_start":9,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235653,"byte_end":235670,"line_start":294,"line_end":294,"column_start":12,"column_end":29},"name":"add_transposition","qualname":"::sparse::linalg::ordering::order::DirectedOrdering::add_transposition","value":"pub fn add_transposition(&mut Self, usize)","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Adds a new `vertex_index` as computed in the algorithms main loop.\n","sig":null,"attributes":[{"value":"/ Adds a new `vertex_index` as computed in the algorithms main loop.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235571,"byte_end":235641,"line_start":293,"line_end":293,"column_start":9,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235793,"byte_end":235816,"line_start":297,"line_end":297,"column_start":12,"column_end":35},"name":"add_component_delimeter","qualname":"::sparse::linalg::ordering::order::DirectedOrdering::add_component_delimeter","value":"pub fn add_component_delimeter(&mut Self, usize)","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Adds an index indicating the start of a new connected component.\n","sig":null,"attributes":[{"value":"/ Adds an index indicating the start of a new connected component.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235713,"byte_end":235781,"line_start":296,"line_end":296,"column_start":9,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236039,"byte_end":236052,"line_start":302,"line_end":302,"column_start":12,"column_end":25},"name":"into_ordering","qualname":"::sparse::linalg::ordering::order::DirectedOrdering::into_ordering","value":"pub fn into_ordering(Self) -> Ordering<I>","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Transforms this directed ordering into an ordering to return from\n the algorithm.\n","sig":null,"attributes":[{"value":"/ Transforms this directed ordering into an ordering to return from","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235852,"byte_end":235921,"line_start":299,"line_end":299,"column_start":9,"column_end":78}},{"value":"/ the algorithm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":235930,"byte_end":235948,"line_start":300,"line_end":300,"column_start":9,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":3742},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236199,"byte_end":236206,"line_start":307,"line_end":307,"column_start":16,"column_end":23},"name":"Forward","qualname":"::sparse::linalg::ordering::order::Forward","value":"Forward {  }","parent":null,"children":[{"krate":0,"index":3744},{"krate":0,"index":3745}],"decl_id":null,"docs":" Indicates the Cuthill-McKee ordering should be built in forward order.\n","sig":null,"attributes":[{"value":"/ Indicates the Cuthill-McKee ordering should be built in forward order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236086,"byte_end":236160,"line_start":305,"line_end":305,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236536,"byte_end":236539,"line_start":317,"line_end":317,"column_start":16,"column_end":19},"name":"new","qualname":"<Forward<I>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of this conceptual enum variant.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of this conceptual enum variant.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236443,"byte_end":236502,"line_start":315,"line_end":315,"column_start":9,"column_end":68}},{"value":"inline","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236511,"byte_end":236520,"line_start":316,"line_end":316,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":3749},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":237541,"byte_end":237549,"line_start":351,"line_end":351,"column_start":16,"column_end":24},"name":"Reversed","qualname":"::sparse::linalg::ordering::order::Reversed","value":"Reversed {  }","parent":null,"children":[{"krate":0,"index":3751},{"krate":0,"index":3752},{"krate":0,"index":3753},{"krate":0,"index":3754}],"decl_id":null,"docs":" Indicates the Cuthill-McKee ordering should be built in reverse order.\n","sig":null,"attributes":[{"value":"/ Indicates the Cuthill-McKee ordering should be built in reverse order.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":237428,"byte_end":237502,"line_start":349,"line_end":349,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238562,"byte_end":238565,"line_start":373,"line_end":373,"column_start":16,"column_end":19},"name":"new","qualname":"<Reversed<I>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of this conceptual enum variant.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of this conceptual enum variant.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238139,"byte_end":238198,"line_start":366,"line_end":366,"column_start":9,"column_end":68}},{"value":"inline","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238537,"byte_end":238546,"line_start":372,"line_end":372,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1592},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240733,"byte_end":240753,"line_start":438,"line_end":438,"column_start":8,"column_end":28},"name":"cuthill_mckee_custom","qualname":"::sparse::linalg::ordering::cuthill_mckee_custom","value":"pub fn cuthill_mckee_custom<N, I, Iptr, S, D>(CsMatViewI<, N, I, Iptr>, S, D)\n-> Ordering<I> where N: PartialEq, I: SpIndex, Iptr: SpIndex,\nS: start::Strategy<N, I, Iptr>, D: order::DirectedOrdering<I>","parent":null,"children":[],"decl_id":null,"docs":" A customized Cuthill-McKee algorithm.","sig":null,"attributes":[{"value":"/ A customized Cuthill-McKee algorithm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":239999,"byte_end":240040,"line_start":420,"line_end":420,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240041,"byte_end":240044,"line_start":421,"line_end":421,"column_start":1,"column_end":4}},{"value":"/ Runs a customized Cuthill-McKee algorithm on the given matrix, returning a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240045,"byte_end":240123,"line_start":422,"line_end":422,"column_start":1,"column_end":79}},{"value":"/ permutation reducing its bandwidth.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240124,"byte_end":240163,"line_start":423,"line_end":423,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240164,"byte_end":240167,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ The strategy employed to find starting vertices is critical for the quallity","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240168,"byte_end":240248,"line_start":425,"line_end":425,"column_start":1,"column_end":81}},{"value":"/ of the reordering computed.  This library implements several common","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240249,"byte_end":240320,"line_start":426,"line_end":426,"column_start":1,"column_end":72}},{"value":"/ strategies, like `PseudoPeripheral` and `MinimumDegree`, but also allows","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240321,"byte_end":240397,"line_start":427,"line_end":427,"column_start":1,"column_end":77}},{"value":"/ users to implement custom strategies if needed.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240398,"byte_end":240449,"line_start":428,"line_end":428,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240450,"byte_end":240453,"line_start":429,"line_end":429,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240454,"byte_end":240469,"line_start":430,"line_end":430,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240470,"byte_end":240473,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ - `mat` - The matrix to compute a permutation for.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240474,"byte_end":240528,"line_start":432,"line_end":432,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240529,"byte_end":240532,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ - `starting_strategy` - The strategy to use for choosing a starting vertex.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240533,"byte_end":240612,"line_start":434,"line_end":434,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240613,"byte_end":240616,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ - `directed_ordering` - The order of the computed ordering, should either be","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240617,"byte_end":240697,"line_start":436,"line_end":436,"column_start":1,"column_end":81}},{"value":"/ `Forward` or `Reverse`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":240698,"byte_end":240725,"line_start":437,"line_end":437,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1600},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244679,"byte_end":244700,"line_start":544,"line_end":544,"column_start":8,"column_end":29},"name":"reverse_cuthill_mckee","qualname":"::sparse::linalg::ordering::reverse_cuthill_mckee","value":"pub fn reverse_cuthill_mckee<N, I, Iptr>(CsMatViewI<, N, I, Iptr>)\n-> Ordering<I> where N: PartialEq, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" The reverse Cuthill-McKee algorithm.","sig":null,"attributes":[{"value":"/ The reverse Cuthill-McKee algorithm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244048,"byte_end":244088,"line_start":526,"line_end":526,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244089,"byte_end":244092,"line_start":527,"line_end":527,"column_start":1,"column_end":4}},{"value":"/ Runs the reverse Cuthill-McKee algorithm on the given matrix, returning a","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244093,"byte_end":244170,"line_start":528,"line_end":528,"column_start":1,"column_end":78}},{"value":"/ permutation reducing its bandwidth.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244171,"byte_end":244210,"line_start":529,"line_end":529,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244211,"byte_end":244214,"line_start":530,"line_end":530,"column_start":1,"column_end":4}},{"value":"/ This version of the algorithm chooses pseudoperipheral vertices as starting","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244215,"byte_end":244294,"line_start":531,"line_end":531,"column_start":1,"column_end":80}},{"value":"/ vertices, and builds a reversed ordering. This is the most common","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244295,"byte_end":244364,"line_start":532,"line_end":532,"column_start":1,"column_end":70}},{"value":"/ configuration of the algorithm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244365,"byte_end":244400,"line_start":533,"line_end":533,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244401,"byte_end":244404,"line_start":534,"line_end":534,"column_start":1,"column_end":4}},{"value":"/ This library also exposes a costomizable version of the algorithm,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244405,"byte_end":244475,"line_start":535,"line_end":535,"column_start":1,"column_end":71}},{"value":"/ [`cuthill_mckee_custom`](cuthill_mckee_custom).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244476,"byte_end":244527,"line_start":536,"line_end":536,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244528,"byte_end":244531,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ Implemented as:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244532,"byte_end":244551,"line_start":538,"line_end":538,"column_start":1,"column_end":20}},{"value":"/ ```text","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244552,"byte_end":244563,"line_start":539,"line_end":539,"column_start":1,"column_end":12}},{"value":"/ cuthill_mckee_custom(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244564,"byte_end":244589,"line_start":540,"line_end":540,"column_start":1,"column_end":26}},{"value":"/     mat, start::PseudoPeripheral::new(), order::Reversed::new()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244590,"byte_end":244657,"line_start":541,"line_end":541,"column_start":1,"column_end":68}},{"value":"/ )","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244658,"byte_end":244663,"line_start":542,"line_end":542,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":244664,"byte_end":244671,"line_start":543,"line_end":543,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1604},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trisolve","qualname":"::sparse::linalg::trisolve","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1616},{"krate":0,"index":1619},{"krate":0,"index":1622},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1632},{"krate":0,"index":1635},{"krate":0,"index":1638},{"krate":0,"index":1641},{"krate":0,"index":1646},{"krate":0,"index":1652},{"krate":0,"index":1659},{"krate":0,"index":1665},{"krate":0,"index":1672},{"krate":0,"index":1679}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1646},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249374,"byte_end":249394,"line_start":34,"line_end":34,"column_start":8,"column_end":28},"name":"lsolve_csr_dense_rhs","qualname":"::sparse::linalg::trisolve::lsolve_csr_dense_rhs","value":"pub fn lsolve_csr_dense_rhs<N, I, Iptr, V>(CsMatViewI<, N, I, Iptr>, V)\n-> Result<(), LinalgError> where N: Clone + Num + std::ops::SubAssign,\nfor<'r> &'r N: std::ops::Mul<&'r N, Output = N>, V: DenseVectorMut<Scalar =\nN>, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Solve a sparse lower triangular matrix system, with a csr matrix\n and a dense vector as inputs","sig":null,"attributes":[{"value":"/ Solve a sparse lower triangular matrix system, with a csr matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249072,"byte_end":249140,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ and a dense vector as inputs","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249141,"byte_end":249173,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249174,"byte_end":249177,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The solve results are written into the provided values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249178,"byte_end":249237,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249238,"byte_end":249241,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This solve does not assume the input matrix to actually be","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249242,"byte_end":249304,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/ triangular, instead it ignores the upper triangular part.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":249305,"byte_end":249366,"line_start":33,"line_end":33,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1652},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":251316,"byte_end":251336,"line_start":91,"line_end":91,"column_start":8,"column_end":28},"name":"lsolve_csc_dense_rhs","qualname":"::sparse::linalg::trisolve::lsolve_csc_dense_rhs","value":"pub fn lsolve_csc_dense_rhs<N, I, Iptr, V>(CsMatViewI<, N, I, Iptr>, V)\n-> Result<(), LinalgError> where N: Clone + Num + std::ops::SubAssign,\nfor<'r> &'r N: std::ops::Mul<&'r N, Output = N>,\nfor<'r> &'r N: std::ops::Div<&'r N, Output = N>, V: DenseVectorMut<Scalar =\nN>, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Solve a sparse lower triangular matrix system, with a csc matrix\n and a dense vector as inputs","sig":null,"attributes":[{"value":"/ Solve a sparse lower triangular matrix system, with a csc matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":250814,"byte_end":250882,"line_start":81,"line_end":81,"column_start":1,"column_end":69}},{"value":"/ and a dense vector as inputs","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":250883,"byte_end":250915,"line_start":82,"line_end":82,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":250916,"byte_end":250919,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The solve results are written into the provided values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":250920,"byte_end":250979,"line_start":84,"line_end":84,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":250980,"byte_end":250983,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This method does not require the matrix to actually be lower triangular,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":250984,"byte_end":251060,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/ but is most efficient if the first element of each column","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":251061,"byte_end":251122,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ is the diagonal element (thus actual sorted lower triangular matrices work","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":251123,"byte_end":251201,"line_start":88,"line_end":88,"column_start":1,"column_end":79}},{"value":"/ best). Otherwise, logarithmic search for the diagonal element","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":251202,"byte_end":251267,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ has to be performed for each column.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":251268,"byte_end":251308,"line_start":90,"line_end":90,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1665},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253871,"byte_end":253891,"line_start":169,"line_end":169,"column_start":8,"column_end":28},"name":"usolve_csc_dense_rhs","qualname":"::sparse::linalg::trisolve::usolve_csc_dense_rhs","value":"pub fn usolve_csc_dense_rhs<N, I, Iptr, V>(CsMatViewI<, N, I, Iptr>, V)\n-> Result<(), LinalgError> where N: Clone + Num + std::ops::SubAssign,\nfor<'r> &'r N: std::ops::Mul<&'r N, Output = N>,\nfor<'r> &'r N: std::ops::Div<&'r N, Output = N>, V: DenseVectorMut<Scalar =\nN>, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Solve a sparse upper triangular matrix system, with a csc matrix\n and a dense vector as inputs","sig":null,"attributes":[{"value":"/ Solve a sparse upper triangular matrix system, with a csc matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253370,"byte_end":253438,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/ and a dense vector as inputs","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253439,"byte_end":253471,"line_start":160,"line_end":160,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253472,"byte_end":253475,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The solve results are written into the provided values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253476,"byte_end":253535,"line_start":162,"line_end":162,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253536,"byte_end":253539,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ This method does not require the matrix to actually be lower triangular,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253540,"byte_end":253616,"line_start":164,"line_end":164,"column_start":1,"column_end":77}},{"value":"/ but is most efficient if the last element of each column","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253617,"byte_end":253677,"line_start":165,"line_end":165,"column_start":1,"column_end":61}},{"value":"/ is the diagonal element (thus actual sorted lower triangular matrices work","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253678,"byte_end":253756,"line_start":166,"line_end":166,"column_start":1,"column_end":79}},{"value":"/ best). Otherwise, logarithmic search for the diagonal element","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253757,"byte_end":253822,"line_start":167,"line_end":167,"column_start":1,"column_end":66}},{"value":"/ has to be performed for each column.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":253823,"byte_end":253863,"line_start":168,"line_end":168,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1672},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255923,"byte_end":255943,"line_start":229,"line_end":229,"column_start":8,"column_end":28},"name":"usolve_csr_dense_rhs","qualname":"::sparse::linalg::trisolve::usolve_csr_dense_rhs","value":"pub fn usolve_csr_dense_rhs<N, I, Iptr, V>(CsMatViewI<, N, I, Iptr>, V)\n-> Result<(), LinalgError> where N: Clone + Num + std::ops::SubAssign,\nfor<'r> &'r N: std::ops::Mul<&'r N, Output = N>,\nfor<'r> &'r N: std::ops::Div<&'r N, Output = N>, V: DenseVectorMut +\nDenseVector<Scalar = N>, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Solve a sparse lower triangular matrix system, with a csr matrix\n and a dense vector as inputs","sig":null,"attributes":[{"value":"/ Solve a sparse lower triangular matrix system, with a csr matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255621,"byte_end":255689,"line_start":222,"line_end":222,"column_start":1,"column_end":69}},{"value":"/ and a dense vector as inputs","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255690,"byte_end":255722,"line_start":223,"line_end":223,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255723,"byte_end":255726,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ The solve results are written into the provided values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255727,"byte_end":255786,"line_start":225,"line_end":225,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255787,"byte_end":255790,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ This solve does not assume the input matrix to actually be","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255791,"byte_end":255853,"line_start":227,"line_end":227,"column_start":1,"column_end":63}},{"value":"/ triangular, instead it ignores the upper triangular part.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":255854,"byte_end":255915,"line_start":228,"line_end":228,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1679},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258402,"byte_end":258423,"line_start":298,"line_end":298,"column_start":8,"column_end":29},"name":"lsolve_csc_sparse_rhs","qualname":"::sparse::linalg::trisolve::lsolve_csc_sparse_rhs","value":"pub fn lsolve_csc_sparse_rhs<N, I, Iptr,\n                             V>(CsMatViewI<, N, I, Iptr>, CsVecViewI<, N, I>,\n                                &mut DStack<StackVal<usize>>, V, &mut [bool])\n-> Result<(), LinalgError> where N: Clone + Num + std::ops::SubAssign,\nfor<'r> &'r N: std::ops::Mul<&'r N, Output = N>,\nfor<'r> &'r N: std::ops::Div<&'r N, Output = N>, V: DenseVectorMut +\nDenseVector<Scalar = N>, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Sparse triangular CSC / sparse vector solve","sig":null,"attributes":[{"value":"/ Sparse triangular CSC / sparse vector solve","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257478,"byte_end":257525,"line_start":276,"line_end":276,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257526,"byte_end":257529,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ `lower_tri_mat` is a sparse lower triangular matrix of shape (n, n)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257530,"byte_end":257601,"line_start":278,"line_end":278,"column_start":1,"column_end":72}},{"value":"/ `rhs` is a sparse vector of size n","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257602,"byte_end":257640,"line_start":279,"line_end":279,"column_start":1,"column_end":39}},{"value":"/ `dstack` is a double stack with capacity 2*n","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257641,"byte_end":257689,"line_start":280,"line_end":280,"column_start":1,"column_end":49}},{"value":"/ `x_workspace` is a workspace vector with length equal to the number of","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257690,"byte_end":257764,"line_start":281,"line_end":281,"column_start":1,"column_end":75}},{"value":"/ rows of `lower_tri_mat`. Its input values can be anything.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257765,"byte_end":257827,"line_start":282,"line_end":282,"column_start":1,"column_end":63}},{"value":"/ visited is a workspace vector of same size as `upper_tri_mat.indptr()`,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257828,"byte_end":257903,"line_start":283,"line_end":283,"column_start":1,"column_end":76}},{"value":"/ and should be all false.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257904,"byte_end":257932,"line_start":284,"line_end":284,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257933,"byte_end":257936,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ On succesful execution, dstack will hold the non-zero pattern in its","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":257937,"byte_end":258009,"line_start":286,"line_end":286,"column_start":1,"column_end":73}},{"value":"/ right stack, and `x_workspace` will contain the solve values at the indices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258010,"byte_end":258089,"line_start":287,"line_end":287,"column_start":1,"column_end":80}},{"value":"/ contained in right stack. The non-zero pattern indices are not guaranteed","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258090,"byte_end":258167,"line_start":288,"line_end":288,"column_start":1,"column_end":78}},{"value":"/ to be sorted (they are sorted for each connected component of the matrix's","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258168,"byte_end":258246,"line_start":289,"line_end":289,"column_start":1,"column_end":79}},{"value":"/ graph).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258247,"byte_end":258258,"line_start":290,"line_end":290,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258259,"byte_end":258262,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258263,"byte_end":258275,"line_start":292,"line_end":292,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258276,"byte_end":258279,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ * if dstack.capacity() is too small","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258280,"byte_end":258319,"line_start":294,"line_end":294,"column_start":1,"column_end":40}},{"value":"/ * if dstack is not empty","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258320,"byte_end":258348,"line_start":295,"line_end":295,"column_start":1,"column_end":29}},{"value":"/ * if `w_workspace` is not of length n","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258349,"byte_end":258390,"line_start":296,"line_end":296,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/trisolve.rs","byte_start":258391,"byte_end":258394,"line_start":297,"line_end":297,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1689},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":221557,"byte_end":221567,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"diag_solve","qualname":"::sparse::linalg::diag_solve","value":"pub fn diag_solve<'a, N, V1, V2>(V1, V2) where N: 'a + Clone + Num +\nstd::ops::DivAssign, for<'r> N: std::ops::DivAssign<&'r N>,\nV1: DenseVector<Scalar = N>, V2: DenseVectorMut + DenseVector<Scalar = N>","parent":null,"children":[],"decl_id":null,"docs":" Diagonal solve\n","sig":null,"attributes":[{"value":"/ Diagonal solve","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":221531,"byte_end":221549,"line_start":14,"line_end":14,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3774},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266226,"byte_end":266237,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"Permutation","qualname":"::sparse::permutation::Permutation","value":"Permutation {  }","parent":null,"children":[{"krate":0,"index":3777},{"krate":0,"index":3778}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1730},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266367,"byte_end":266376,"line_start":33,"line_end":33,"column_start":10,"column_end":19},"name":"PermOwned","qualname":"::sparse::permutation::PermOwned","value":"Permutation<usize, Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1731},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266420,"byte_end":266430,"line_start":34,"line_end":34,"column_start":10,"column_end":20},"name":"PermOwnedI","qualname":"::sparse::permutation::PermOwnedI","value":"Permutation<I, Vec<I>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1733},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266470,"byte_end":266478,"line_start":36,"line_end":36,"column_start":10,"column_end":18},"name":"PermView","qualname":"::sparse::permutation::PermView","value":"Permutation<usize, &'a [usize]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1735},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266527,"byte_end":266536,"line_start":37,"line_end":37,"column_start":10,"column_end":19},"name":"PermViewI","qualname":"::sparse::permutation::PermViewI","value":"Permutation<I, &'a [I]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1738},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266579,"byte_end":266592,"line_start":39,"line_end":39,"column_start":8,"column_end":21},"name":"perm_is_valid","qualname":"::sparse::permutation::perm_is_valid","value":"pub fn perm_is_valid<I: SpIndex>(&[I]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266909,"byte_end":266912,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<PermOwnedI<I>>::new","value":"pub fn new(Vec<I>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":267401,"byte_end":267409,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<Permutation<I, &'a [I]>>::reborrow","value":"pub fn reborrow(&Self) -> PermViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":267898,"byte_end":267910,"line_start":89,"line_end":89,"column_start":12,"column_end":24},"name":"reborrow_inv","qualname":"<Permutation<I, &'a [I]>>::reborrow_inv","value":"pub fn reborrow_inv(&Self) -> PermViewI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":268502,"byte_end":268510,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"identity","qualname":"<Permutation<I, IndStorage>>::identity","value":"pub fn identity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1753},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":268624,"byte_end":268627,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"inv","qualname":"<Permutation<I, IndStorage>>::inv","value":"pub fn inv(&Self) -> PermViewI<, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":269120,"byte_end":269123,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"dim","qualname":"<Permutation<I, IndStorage>>::dim","value":"pub fn dim(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":269232,"byte_end":269243,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Permutation<I, IndStorage>>::is_identity","value":"pub fn is_identity(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether the permutation is the identity.\n","sig":null,"attributes":[{"value":"/ Check whether the permutation is the identity.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":269170,"byte_end":269220,"line_start":143,"line_end":143,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1757},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":269509,"byte_end":269513,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"view","qualname":"<Permutation<I, IndStorage>>::view","value":"pub fn view(&Self) -> PermViewI<, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":270006,"byte_end":270017,"line_start":173,"line_end":173,"column_start":12,"column_end":23},"name":"owned_clone","qualname":"<Permutation<I, IndStorage>>::owned_clone","value":"pub fn owned_clone(&Self) -> PermOwnedI<I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":270555,"byte_end":270557,"line_start":192,"line_end":192,"column_start":12,"column_end":14},"name":"at","qualname":"<Permutation<I, IndStorage>>::at","value":"pub fn at(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":270787,"byte_end":270793,"line_start":200,"line_end":200,"column_start":12,"column_end":18},"name":"at_inv","qualname":"<Permutation<I, IndStorage>>::at_inv","value":"pub fn at_inv(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":271108,"byte_end":271111,"line_start":211,"line_end":211,"column_start":12,"column_end":15},"name":"vec","qualname":"<Permutation<I, IndStorage>>::vec","value":"pub fn vec(&Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Get a vector representing this permutation\n","sig":null,"attributes":[{"value":"/ Get a vector representing this permutation","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":271050,"byte_end":271096,"line_start":210,"line_end":210,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":271380,"byte_end":271387,"line_start":219,"line_end":219,"column_start":12,"column_end":19},"name":"inv_vec","qualname":"<Permutation<I, IndStorage>>::inv_vec","value":"pub fn inv_vec(&Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Get a vector representing the inverse of this permutation\n","sig":null,"attributes":[{"value":"/ Get a vector representing the inverse of this permutation","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":271307,"byte_end":271368,"line_start":218,"line_end":218,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":271624,"byte_end":271641,"line_start":228,"line_end":228,"column_start":12,"column_end":29},"name":"to_other_idx_type","qualname":"<Permutation<I, IndStorage>>::to_other_idx_type","value":"pub fn to_other_idx_type<I2>(&Self) -> PermOwnedI<I2> where I2: SpIndex","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1780},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":273615,"byte_end":273633,"line_start":296,"line_end":296,"column_start":8,"column_end":26},"name":"transform_mat_papt","qualname":"::sparse::permutation::transform_mat_papt","value":"pub fn transform_mat_papt<N, I,\n                          Iptr>(CsMatViewI<, N, I, Iptr>, PermViewI<, I>)\n-> CsMatI<N, I, Iptr> where N: Clone + ::std::fmt::Debug, I: SpIndex,\nIptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Compute the square matrix resulting from the product P * A * P^T\n","sig":null,"attributes":[{"value":"/ Compute the square matrix resulting from the product P * A * P^T","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":273539,"byte_end":273607,"line_start":295,"line_end":295,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":1785},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prod","qualname":"::sparse::prod","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1790},{"krate":0,"index":1793},{"krate":0,"index":1796},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1823},{"krate":0,"index":1829},{"krate":0,"index":1837},{"krate":0,"index":1845},{"krate":0,"index":1853},{"krate":0,"index":1861},{"krate":0,"index":1867},{"krate":0,"index":1874},{"krate":0,"index":1881},{"krate":0,"index":1888}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1816},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":277694,"byte_end":277720,"line_start":13,"line_end":13,"column_start":8,"column_end":34},"name":"csvec_dot_by_binary_search","qualname":"::sparse::prod::csvec_dot_by_binary_search","value":"pub fn csvec_dot_by_binary_search<N, I, A,\n                                  B>(CsVecViewI<, A, I>, CsVecViewI<, B, I>)\n-> N where I: SpIndex, N: crate::MulAcc<A, B> + num_traits::Zero","parent":null,"children":[],"decl_id":null,"docs":" Compute the dot product of two sparse vectors, using binary search to find matching indices.","sig":null,"attributes":[{"value":"/ Compute the dot product of two sparse vectors, using binary search to find matching indices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":277494,"byte_end":277590,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":277591,"byte_end":277594,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Runs in O(MlogN) time, where M and N are the number of non-zero entries in each vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":277595,"byte_end":277686,"line_start":12,"line_end":12,"column_start":1,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":1829},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":279430,"byte_end":279449,"line_start":73,"line_end":73,"column_start":8,"column_end":27},"name":"mul_acc_mat_vec_csc","qualname":"::sparse::prod::mul_acc_mat_vec_csc","value":"pub fn mul_acc_mat_vec_csc<N, I, Iptr, V, VRes, A,\n                           B>(CsMatViewI<, A, I, Iptr>, V, VRes) where\nN: crate::MulAcc<A, B>, I: SpIndex, Iptr: SpIndex, V: DenseVector<Scalar = B>,\nVRes: DenseVectorMut<Scalar = N>","parent":null,"children":[],"decl_id":null,"docs":" Multiply a sparse CSC matrix with a dense vector and accumulate the result\n into another dense vector\n","sig":null,"attributes":[{"value":"/ Multiply a sparse CSC matrix with a dense vector and accumulate the result","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":279314,"byte_end":279392,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ into another dense vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":279393,"byte_end":279422,"line_start":72,"line_end":72,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1837},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":280310,"byte_end":280329,"line_start":103,"line_end":103,"column_start":8,"column_end":27},"name":"mul_acc_mat_vec_csr","qualname":"::sparse::prod::mul_acc_mat_vec_csr","value":"pub fn mul_acc_mat_vec_csr<N, A, B, I, Iptr, V,\n                           VRes>(CsMatViewI<, A, I, Iptr>, V, VRes) where\nN: crate::MulAcc<A, B>, I: SpIndex, Iptr: SpIndex, V: DenseVector<Scalar = B>,\nVRes: DenseVectorMut<Scalar = N>","parent":null,"children":[],"decl_id":null,"docs":" Multiply a sparse CSR matrix with a dense vector and accumulate the result\n into another dense vector\n","sig":null,"attributes":[{"value":"/ Multiply a sparse CSR matrix with a dense vector and accumulate the result","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":280194,"byte_end":280272,"line_start":101,"line_end":101,"column_start":1,"column_end":79}},{"value":"/ into another dense vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":280273,"byte_end":280302,"line_start":102,"line_end":102,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1845},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":281104,"byte_end":281117,"line_start":131,"line_end":131,"column_start":8,"column_end":21},"name":"workspace_csr","qualname":"::sparse::prod::workspace_csr","value":"pub fn workspace_csr<N, A, B, I, Iptr, Mat1, Mat2>(&Mat1, &Mat2) -> Vec<N>\nwhere N: Clone + Num, I: SpIndex, Iptr: SpIndex, Mat1: SpMatView<A, I, Iptr>,\nMat2: SpMatView<B, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Allocate the appropriate workspace for a CSR-CSR product\n","sig":null,"attributes":[{"value":"/ Allocate the appropriate workspace for a CSR-CSR product","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":281036,"byte_end":281096,"line_start":130,"line_end":130,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1853},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":281449,"byte_end":281462,"line_start":147,"line_end":147,"column_start":8,"column_end":21},"name":"workspace_csc","qualname":"::sparse::prod::workspace_csc","value":"pub fn workspace_csc<N, A, B, I, Iptr, Mat1, Mat2>(&Mat1, &Mat2) -> Vec<N>\nwhere N: Clone + Num, I: SpIndex, Iptr: SpIndex, Mat1: SpMatView<A, I, Iptr>,\nMat2: SpMatView<B, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Allocate the appropriate workspace for a CSC-CSC product\n","sig":null,"attributes":[{"value":"/ Allocate the appropriate workspace for a CSC-CSC product","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":281381,"byte_end":281441,"line_start":146,"line_end":146,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1861},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":281763,"byte_end":281776,"line_start":163,"line_end":163,"column_start":8,"column_end":21},"name":"csr_mul_csvec","qualname":"::sparse::prod::csr_mul_csvec","value":"pub fn csr_mul_csvec<N, A, B, I,\n                     Iptr>(CsMatViewI<, A, I, Iptr>, CsVecViewI<, B, I>)\n-> CsVecI<N, I> where N: crate::MulAcc<A, B> + num_traits::Zero + PartialEq +\nClone, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" CSR-vector multiplication\n","sig":null,"attributes":[{"value":"/ CSR-vector multiplication","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":281726,"byte_end":281755,"line_start":162,"line_end":162,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1867},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":282529,"byte_end":282552,"line_start":192,"line_end":192,"column_start":8,"column_end":31},"name":"csr_mulacc_dense_rowmaj","qualname":"::sparse::prod::csr_mulacc_dense_rowmaj","value":"pub fn csr_mulacc_dense_rowmaj<'a, N, A, B, I,\n                               Iptr>(CsMatViewI<, A, I, Iptr>,\n                                     ArrayView<, B, Ix2>, ArrayViewMut) where\nN: 'a + crate::MulAcc<A, B>, I: 'a + SpIndex, Iptr: 'a + SpIndex","parent":null,"children":[],"decl_id":null,"docs":" CSR-dense rowmaj multiplication","sig":null,"attributes":[{"value":"/ CSR-dense rowmaj multiplication","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":282424,"byte_end":282459,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":282460,"byte_end":282463,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ Performs better if rhs has a decent number of colums.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":282464,"byte_end":282521,"line_start":191,"line_end":191,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":1874},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":283602,"byte_end":283625,"line_start":230,"line_end":230,"column_start":8,"column_end":31},"name":"csc_mulacc_dense_rowmaj","qualname":"::sparse::prod::csc_mulacc_dense_rowmaj","value":"pub fn csc_mulacc_dense_rowmaj<'a, N, A, B, I,\n                               Iptr>(CsMatViewI<, A, I, Iptr>,\n                                     ArrayView<, B, Ix2>, ArrayViewMut) where\nN: 'a + crate::MulAcc<A, B>, I: 'a + SpIndex, Iptr: 'a + SpIndex","parent":null,"children":[],"decl_id":null,"docs":" CSC-dense rowmaj multiplication","sig":null,"attributes":[{"value":"/ CSC-dense rowmaj multiplication","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":283497,"byte_end":283532,"line_start":227,"line_end":227,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":283533,"byte_end":283536,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ Performs better if rhs has a decent number of colums.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":283537,"byte_end":283594,"line_start":229,"line_end":229,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":1881},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":284547,"byte_end":284570,"line_start":265,"line_end":265,"column_start":8,"column_end":31},"name":"csc_mulacc_dense_colmaj","qualname":"::sparse::prod::csc_mulacc_dense_colmaj","value":"pub fn csc_mulacc_dense_colmaj<'a, N, A, B, I,\n                               Iptr>(CsMatViewI<, A, I, Iptr>,\n                                     ArrayView<, B, Ix2>, ArrayViewMut) where\nN: 'a + crate::MulAcc<A, B>, I: 'a + SpIndex, Iptr: 'a + SpIndex","parent":null,"children":[],"decl_id":null,"docs":" CSC-dense colmaj multiplication","sig":null,"attributes":[{"value":"/ CSC-dense colmaj multiplication","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":284456,"byte_end":284491,"line_start":262,"line_end":262,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":284492,"byte_end":284495,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ Performs better if rhs has few columns.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":284496,"byte_end":284539,"line_start":264,"line_end":264,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":1888},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":285525,"byte_end":285548,"line_start":301,"line_end":301,"column_start":8,"column_end":31},"name":"csr_mulacc_dense_colmaj","qualname":"::sparse::prod::csr_mulacc_dense_colmaj","value":"pub fn csr_mulacc_dense_colmaj<'a, N, A, B, I,\n                               Iptr>(CsMatViewI<, A, I, Iptr>,\n                                     ArrayView<, B, Ix2>, ArrayViewMut) where\nN: 'a + crate::MulAcc<A, B>, I: 'a + SpIndex, Iptr: 'a + SpIndex","parent":null,"children":[],"decl_id":null,"docs":" CSR-dense colmaj multiplication","sig":null,"attributes":[{"value":"/ CSR-dense colmaj multiplication","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":285434,"byte_end":285469,"line_start":298,"line_end":298,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":285470,"byte_end":285473,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ Performs better if rhs has few columns.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/prod.rs","byte_start":285474,"byte_end":285517,"line_start":300,"line_end":300,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299374,"byte_end":299385,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"slice_outer","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::slice_outer","value":"pub fn slice_outer<S: Range>(&Self, S) -> CsMatViewI<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Slice the outer dimension of the matrix according to the specified\n range.\n","sig":null,"attributes":[{"value":"/ Slice the outer dimension of the matrix according to the specified","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299277,"byte_end":299347,"line_start":15,"line_end":15,"column_start":5,"column_end":75}},{"value":"/ range.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299352,"byte_end":299362,"line_start":16,"line_end":16,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1935},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299843,"byte_end":299858,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"slice_outer_mut","qualname":"<CsMatBase<N, I, IptrStorage, IStorage, DStorage, Iptr>>::slice_outer_mut","value":"pub fn slice_outer_mut<S: Range>(&mut Self, S) -> CsMatViewMutI<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" Slice the outer dimension of the matrix according to the specified\n range.\n","sig":null,"attributes":[{"value":"/ Slice the outer dimension of the matrix according to the specified","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299746,"byte_end":299816,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ range.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299821,"byte_end":299831,"line_start":30,"line_end":30,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":300860,"byte_end":300875,"line_start":63,"line_end":63,"column_start":12,"column_end":27},"name":"slice_outer_rbr","qualname":"<crate::CsMatViewI>::slice_outer_rbr","value":"pub fn slice_outer_rbr<S>(&Self, S) -> crate::CsMatViewI where S: Range","parent":null,"children":[],"decl_id":null,"docs":" Slice the outer dimension of the matrix according to the specified\n range.\n","sig":null,"attributes":[{"value":"/ Slice the outer dimension of the matrix according to the specified","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":300763,"byte_end":300833,"line_start":61,"line_end":61,"column_start":5,"column_end":75}},{"value":"/ range.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":300838,"byte_end":300848,"line_start":62,"line_end":62,"column_start":5,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":1946},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"smmp","qualname":"::sparse::smmp","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":3787},{"krate":0,"index":3795},{"krate":0,"index":3796},{"krate":0,"index":3798},{"krate":0,"index":3800},{"krate":0,"index":3801},{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3807},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1971},{"krate":0,"index":1984}],"decl_id":null,"docs":" Implementation of the paper\n Bank and Douglas, 2001, Sparse Matrix Multiplication Package (SMPP)\n","sig":null,"attributes":[{"value":"/ Implementation of the paper","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302272,"byte_end":302303,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/ Bank and Douglas, 2001, Sparse Matrix Multiplication Package (SMPP)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302304,"byte_end":302375,"line_start":2,"line_end":2,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3788},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303378,"byte_end":303387,"line_start":29,"line_end":29,"column_start":5,"column_end":14},"name":"Automatic","qualname":"::sparse::smmp::ThreadingStrategy::Automatic","value":"ThreadingStrategy::Automatic","parent":{"krate":0,"index":3787},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3790},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303393,"byte_end":303410,"line_start":30,"line_end":30,"column_start":5,"column_end":22},"name":"AutomaticPhysical","qualname":"::sparse::smmp::ThreadingStrategy::AutomaticPhysical","value":"ThreadingStrategy::AutomaticPhysical","parent":{"krate":0,"index":3787},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3792},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303416,"byte_end":303421,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::sparse::smmp::ThreadingStrategy::Fixed","value":"ThreadingStrategy::Fixed(usize)","parent":{"krate":0,"index":3787},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3787},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303354,"byte_end":303371,"line_start":28,"line_end":28,"column_start":10,"column_end":27},"name":"ThreadingStrategy","qualname":"::sparse::smmp::ThreadingStrategy","value":"pub enum ThreadingStrategy { Automatic, AutomaticPhysical, Fixed(usize), }","parent":null,"children":[{"krate":0,"index":3788},{"krate":0,"index":3790},{"krate":0,"index":3792}],"decl_id":null,"docs":" Control the strategy used to parallelize the matrix product workload.","sig":null,"attributes":[{"value":"/ Control the strategy used to parallelize the matrix product workload.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302596,"byte_end":302669,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302670,"byte_end":302673,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `Automatic` strategy will try to pick a good number of threads based","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302674,"byte_end":302750,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ on the number of cores and an estimation of the nnz of the product","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302751,"byte_end":302821,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ matrix. This strategy is used by default.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302822,"byte_end":302867,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302868,"byte_end":302871,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `AutomaticPhysical` strategy will try to pick a good number of threads","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302872,"byte_end":302950,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ based on the number of physical cores and an estimation of the nnz of the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":302951,"byte_end":303028,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ product matrix. This strategy is a fallback for machines where virtual","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303029,"byte_end":303103,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ cores do not provide a performance advantage.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303104,"byte_end":303153,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303154,"byte_end":303157,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The `Fixed` strategy leaves the control to the user. It is a programming","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303158,"byte_end":303234,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ error to request 0 threads.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303235,"byte_end":303266,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"cfg(feature = \"multi_thread\")","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303312,"byte_end":303344,"line_start":27,"line_end":27,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1958},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303755,"byte_end":303784,"line_start":45,"line_end":45,"column_start":8,"column_end":37},"name":"set_thread_threading_strategy","qualname":"::sparse::smmp::set_thread_threading_strategy","value":"pub fn set_thread_threading_strategy(ThreadingStrategy)","parent":null,"children":[],"decl_id":null,"docs":" Set the threading strategy for matrix products in this thread.","sig":null,"attributes":[{"value":"/ Set the threading strategy for matrix products in this thread.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303584,"byte_end":303650,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303651,"byte_end":303654,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303655,"byte_end":303667,"line_start":41,"line_end":41,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303668,"byte_end":303671,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ If a number of 0 threads is requested.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303672,"byte_end":303714,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"cfg(feature = \"multi_thread\")","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303715,"byte_end":303747,"line_start":44,"line_end":44,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1960},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304034,"byte_end":304059,"line_start":55,"line_end":55,"column_start":8,"column_end":33},"name":"thread_threading_strategy","qualname":"::sparse::smmp::thread_threading_strategy","value":"pub fn thread_threading_strategy() -> ThreadingStrategy","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"multi_thread\")","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":303994,"byte_end":304026,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1962},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304968,"byte_end":304976,"line_start":80,"line_end":80,"column_start":8,"column_end":16},"name":"symbolic","qualname":"::sparse::smmp::symbolic","value":"pub fn symbolic<Iptr: SpIndex,\n                I: SpIndex>(CsStructureViewI<, I, Iptr>,\n                            CsStructureViewI<, I, Iptr>, &mut [Iptr],\n                            &mut Vec<I>, &mut [bool])","parent":null,"children":[],"decl_id":null,"docs":" Compute the symbolic structure of the matrix product C = A * B, with\n A, B and C stored in the CSR matrix format.","sig":null,"attributes":[{"value":"/ Compute the symbolic structure of the matrix product C = A * B, with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304130,"byte_end":304202,"line_start":59,"line_end":59,"column_start":1,"column_end":73}},{"value":"/ A, B and C stored in the CSR matrix format.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304203,"byte_end":304250,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304251,"byte_end":304254,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This algorithm has a complexity of O(n * k * log(k)), where k is the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304255,"byte_end":304327,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/ average number of nonzeros in the rows of the result.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304328,"byte_end":304385,"line_start":63,"line_end":63,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304386,"byte_end":304389,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304390,"byte_end":304402,"line_start":65,"line_end":65,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304403,"byte_end":304406,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ `index.len()` should be equal to the maximum dimension among the input","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304407,"byte_end":304481,"line_start":67,"line_end":67,"column_start":1,"column_end":75}},{"value":"/ matrices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304482,"byte_end":304495,"line_start":68,"line_end":68,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304496,"byte_end":304499,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The matrices should be in proper CSR structure, and their dimensions","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304500,"byte_end":304572,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"/ should be compatible. Failures to do so may result in out of bounds errors","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304573,"byte_end":304651,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ (though some cases might go unnoticed).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304652,"byte_end":304695,"line_start":72,"line_end":72,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304696,"byte_end":304699,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Minimizing allocations","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304700,"byte_end":304728,"line_start":74,"line_end":74,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304729,"byte_end":304732,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ This function will reserve","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304733,"byte_end":304763,"line_start":76,"line_end":76,"column_start":1,"column_end":31}},{"value":"/ `a_indptr.last().unwrap() + b_indptr.last.unwrap()` in `c_indices`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304764,"byte_end":304835,"line_start":77,"line_end":77,"column_start":1,"column_end":72}},{"value":"/ Therefore, to prevent this function from allocating, it is required","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304836,"byte_end":304907,"line_start":78,"line_end":78,"column_start":1,"column_end":72}},{"value":"/ to have reserved at least this amount of memory.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":304908,"byte_end":304960,"line_start":79,"line_end":79,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":1965},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307599,"byte_end":307606,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"numeric","qualname":"::sparse::smmp::numeric","value":"pub fn numeric<Iptr: SpIndex, I: SpIndex, A, B, N: crate::MulAcc<A, B> +\n               num_traits::Zero>(CsMatViewI<, A, I, Iptr>,\n                                 CsMatViewI<, B, I, Iptr>,\n                                 CsMatViewMutI<, N, I, Iptr>, &mut [N])","parent":null,"children":[],"decl_id":null,"docs":" Numeric part of the matrix product C = A * B with A, B and C stored in the\n CSR matrix format.","sig":null,"attributes":[{"value":"/ Numeric part of the matrix product C = A * B with A, B and C stored in the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":306780,"byte_end":306858,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ CSR matrix format.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":306859,"byte_end":306881,"line_start":133,"line_end":133,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":306882,"byte_end":306885,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This function is low-level, and supports execution on chunks of the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":306886,"byte_end":306957,"line_start":135,"line_end":135,"column_start":1,"column_end":72}},{"value":"/ rows of C and A. To use the chunks, split the indptrs of A and C and split","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":306958,"byte_end":307036,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ `c_indices` and `c_data` to only contain the elements referenced in","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307037,"byte_end":307108,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/ `c_indptr`. This function will take care of using the correct offset","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307109,"byte_end":307181,"line_start":138,"line_end":138,"column_start":1,"column_end":73}},{"value":"/ inside the sliced indices and data.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307182,"byte_end":307221,"line_start":139,"line_end":139,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307222,"byte_end":307225,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307226,"byte_end":307238,"line_start":141,"line_end":141,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307239,"byte_end":307242,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ `tmp.len()` should be equal to the maximum dimension of the inputs.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307243,"byte_end":307314,"line_start":143,"line_end":143,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307315,"byte_end":307318,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The matrices should be in proper CSR structure, and their dimensions","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307319,"byte_end":307391,"line_start":145,"line_end":145,"column_start":1,"column_end":73}},{"value":"/ should be compatible. Failures to do so may result in out of bounds errors","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307392,"byte_end":307470,"line_start":146,"line_end":146,"column_start":1,"column_end":79}},{"value":"/ (though some cases might go unnoticed).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307471,"byte_end":307514,"line_start":147,"line_end":147,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307515,"byte_end":307518,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The parts for the C matrix should come from the `symbolic` function.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":307519,"byte_end":307591,"line_start":149,"line_end":149,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":1971},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":308830,"byte_end":308841,"line_start":195,"line_end":195,"column_start":8,"column_end":19},"name":"mul_csr_csr","qualname":"::sparse::smmp::mul_csr_csr","value":"pub fn mul_csr_csr<N, A, B, I,\n                   Iptr>(CsMatViewI<, A, I, Iptr>, CsMatViewI<, B, I, Iptr>)\n-> CsMatI<N, I, Iptr> where N: crate::MulAcc<A, B> + num_traits::Zero +\nClone + Send + Sync, A: Send + Sync, B: Send + Sync, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Compute a sparse matrix product using the SMMP routines","sig":null,"attributes":[{"value":"/ Compute a sparse matrix product using the SMMP routines","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":308705,"byte_end":308764,"line_start":190,"line_end":190,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":308765,"byte_end":308768,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":308769,"byte_end":308781,"line_start":192,"line_end":192,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":308782,"byte_end":308785,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ - if `lhs.cols() != rhs.rows()`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":308786,"byte_end":308822,"line_start":194,"line_end":194,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1984},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":311144,"byte_end":311170,"line_start":253,"line_end":253,"column_start":8,"column_end":34},"name":"mul_csr_csr_with_workspace","qualname":"::sparse::smmp::mul_csr_csr_with_workspace","value":"pub fn mul_csr_csr_with_workspace<N, A, B, I,\n                                  Iptr>(CsMatViewI<, A, I, Iptr>,\n                                        CsMatViewI<, B, I, Iptr>,\n                                        &mut [Box<[bool]>], &mut [Box<[N]>])\n-> CsMatI<N, I, Iptr> where N: crate::MulAcc<A, B> + num_traits::Zero +\nClone + Send + Sync, A: Send + Sync, B: Send + Sync, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Compute a sparse matrix product using the SMMP routines, using temporary\n storage that was already allocated","sig":null,"attributes":[{"value":"/ Compute a sparse matrix product using the SMMP routines, using temporary","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310300,"byte_end":310376,"line_start":236,"line_end":236,"column_start":1,"column_end":77}},{"value":"/ storage that was already allocated","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310377,"byte_end":310415,"line_start":237,"line_end":237,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310416,"byte_end":310419,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ `seens` and `tmps` are temporary storage vectors used to accumulate non","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310420,"byte_end":310495,"line_start":239,"line_end":239,"column_start":1,"column_end":76}},{"value":"/ zero locations and values. Their values need not be specified on input.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310496,"byte_end":310571,"line_start":240,"line_end":240,"column_start":1,"column_end":76}},{"value":"/ They will be zero on output. They are slices of boxed slices, where the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310572,"byte_end":310647,"line_start":241,"line_end":241,"column_start":1,"column_end":76}},{"value":"/ outer slice is there to give mutliple workspaces for multi-threading.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310648,"byte_end":310721,"line_start":242,"line_end":242,"column_start":1,"column_end":74}},{"value":"/ Therefore, `seens.len()` controls the number of threads used for symbolic","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310722,"byte_end":310799,"line_start":243,"line_end":243,"column_start":1,"column_end":78}},{"value":"/ computation, and `tmps.len()` the number of threads for numeric computation.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310800,"byte_end":310880,"line_start":244,"line_end":244,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310881,"byte_end":310884,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310885,"byte_end":310897,"line_start":246,"line_end":246,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310898,"byte_end":310901,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ - if `lhs.cols() != rhs.rows()`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310902,"byte_end":310938,"line_start":248,"line_end":248,"column_start":1,"column_end":37}},{"value":"/ - if `seens.len() == 0`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310939,"byte_end":310966,"line_start":249,"line_end":249,"column_start":1,"column_end":28}},{"value":"/ - if `tmps.len() == 0`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310967,"byte_end":310993,"line_start":250,"line_end":250,"column_start":1,"column_end":27}},{"value":"/ - if `seens[i].len() != lhs.cols().max(lhs.rows()).max(rhs.cols())`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":310994,"byte_end":311065,"line_start":251,"line_end":251,"column_start":1,"column_end":72}},{"value":"/ - if `tmps[i].len() != lhs.cols().max(lhs.rows()).max(rhs.cols())`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/smmp.rs","byte_start":311066,"byte_end":311136,"line_start":252,"line_end":252,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1992},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/special_mats.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"special_mats","qualname":"::sparse::special_mats","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/special_mats.rs","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2005}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2005},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/special_mats.rs","byte_start":321218,"byte_end":321242,"line_start":9,"line_end":9,"column_start":8,"column_end":32},"name":"tri_mesh_graph_laplacian","qualname":"::sparse::special_mats::tri_mesh_graph_laplacian","value":"pub fn tri_mesh_graph_laplacian<I>(usize, ArrayView2<, I>) -> CsMatI<f64, I>\nwhere I: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Compute the graph laplacian of a triangle mesh\n","sig":null,"attributes":[{"value":"/ Compute the graph laplacian of a triangle mesh","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/special_mats.rs","byte_start":321160,"byte_end":321210,"line_start":8,"line_end":8,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":2017},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/symmetric.rs","byte_start":324478,"byte_end":324490,"line_start":7,"line_end":7,"column_start":8,"column_end":20},"name":"is_symmetric","qualname":"::sparse::symmetric::is_symmetric","value":"pub fn is_symmetric<N, I, Iptr, IpStorage, IStorage,\n                    DStorage>(&CsMatBase<N, I, IpStorage, IStorage, DStorage,\n                                         Iptr>) -> bool where N: PartialEq,\nI: SpIndex, Iptr: SpIndex, IpStorage: Deref<Target = [Iptr]>,\nIStorage: Deref<Target = [I]>, DStorage: Deref<Target = [N]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2049},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/to_dense.rs","byte_start":326376,"byte_end":326391,"line_start":11,"line_end":11,"column_start":8,"column_end":23},"name":"assign_to_dense","qualname":"::sparse::to_dense::assign_to_dense","value":"pub fn assign_to_dense<N, I,\n                       Iptr>(ArrayViewMut<, N, Ix2>, CsMatViewI<, N, I, Iptr>)\nwhere N: Clone, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Assign a sparse matrix into a dense matrix","sig":null,"attributes":[{"value":"/ Assign a sparse matrix into a dense matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/to_dense.rs","byte_start":326183,"byte_end":326229,"line_start":7,"line_end":7,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/to_dense.rs","byte_start":326230,"byte_end":326233,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The dense matrix will not be zeroed prior to assignment,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/to_dense.rs","byte_start":326234,"byte_end":326294,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ so existing values not corresponding to non-zeroes will be preserved.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/to_dense.rs","byte_start":326295,"byte_end":326368,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3814},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":329715,"byte_end":329727,"line_start":19,"line_end":19,"column_start":12,"column_end":24},"name":"TripletIndex","qualname":"::sparse::triplet::TripletIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indexing type into a Triplet\n","sig":null,"attributes":[{"value":"/ Indexing type into a Triplet","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":329626,"byte_end":329658,"line_start":17,"line_end":17,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":3816},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":329728,"byte_end":329737,"line_start":19,"line_end":19,"column_start":25,"column_end":34},"name":"0","qualname":"::sparse::triplet::TripletIndex::0","value":"usize","parent":{"krate":0,"index":3814},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331173,"byte_end":331176,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<TriMatI<N, I>>::new","value":"pub fn new((usize, usize)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new triplet matrix of shape `(nb_rows, nb_cols)`\n","sig":null,"attributes":[{"value":"/ Create a new triplet matrix of shape `(nb_rows, nb_cols)`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331100,"byte_end":331161,"line_start":87,"line_end":87,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331535,"byte_end":331548,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<TriMatI<N, I>>::with_capacity","value":"pub fn with_capacity((usize, usize), usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new triplet matrix of shape `(nb_rows, nb_cols)`, and\n pre-allocate `cap` elements on the backing storage\n","sig":null,"attributes":[{"value":"/ Create a new triplet matrix of shape `(nb_rows, nb_cols)`, and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331398,"byte_end":331464,"line_start":98,"line_end":98,"column_start":5,"column_end":71}},{"value":"/ pre-allocate `cap` elements on the backing storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331469,"byte_end":331523,"line_start":99,"line_end":99,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":332082,"byte_end":332095,"line_start":117,"line_end":117,"column_start":12,"column_end":25},"name":"from_triplets","qualname":"<TriMatI<N, I>>::from_triplets","value":"pub fn from_triplets((usize, usize), Vec<I>, Vec<I>, Vec<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a triplet matrix from its raw components. All arrays should\n have the same length.","sig":null,"attributes":[{"value":"/ Create a triplet matrix from its raw components. All arrays should","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331821,"byte_end":331891,"line_start":110,"line_end":110,"column_start":5,"column_end":75}},{"value":"/ have the same length.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331896,"byte_end":331921,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331926,"byte_end":331929,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331934,"byte_end":331946,"line_start":113,"line_end":113,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331951,"byte_end":331954,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ - if the arrays don't have the same length","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331959,"byte_end":332005,"line_start":115,"line_end":115,"column_start":5,"column_end":51}},{"value":"/ - if either the row or column indices are out of bounds.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":332010,"byte_end":332070,"line_start":116,"line_end":116,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333111,"byte_end":333122,"line_start":156,"line_end":156,"column_start":12,"column_end":23},"name":"add_triplet","qualname":"<TriMatI<N, I>>::add_triplet","value":"pub fn add_triplet(&mut Self, usize, usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Append a non-zero triplet to this matrix.\n","sig":null,"attributes":[{"value":"/ Append a non-zero triplet to this matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333054,"byte_end":333099,"line_start":155,"line_end":155,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333422,"byte_end":333429,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"reserve","qualname":"<TriMatI<N, I>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve `cap` additional non-zeros\n","sig":null,"attributes":[{"value":"/ Reserve `cap` additional non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333372,"byte_end":333410,"line_start":164,"line_end":164,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333617,"byte_end":333630,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<TriMatI<N, I>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve exactly `cap` non-zeros\n","sig":null,"attributes":[{"value":"/ Reserve exactly `cap` non-zeros","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333570,"byte_end":333605,"line_start":171,"line_end":171,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334052,"byte_end":334056,"line_start":186,"line_end":186,"column_start":12,"column_end":16},"name":"rows","qualname":"<TriMatBase<IStorage, DStorage>>::rows","value":"pub fn rows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of rows of the matrix\n","sig":null,"attributes":[{"value":"/ The number of rows of the matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334004,"byte_end":334040,"line_start":185,"line_end":185,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334152,"byte_end":334156,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"cols","qualname":"<TriMatBase<IStorage, DStorage>>::cols","value":"pub fn cols(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of cols of the matrix\n","sig":null,"attributes":[{"value":"/ The number of cols of the matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334104,"byte_end":334140,"line_start":190,"line_end":190,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334270,"byte_end":334275,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"shape","qualname":"<TriMatBase<IStorage, DStorage>>::shape","value":"pub fn shape(&Self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The shape of the matrix, as a `(rows, cols)` tuple\n","sig":null,"attributes":[{"value":"/ The shape of the matrix, as a `(rows, cols)` tuple","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334204,"byte_end":334258,"line_start":195,"line_end":195,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334391,"byte_end":334394,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"nnz","qualname":"<TriMatBase<IStorage, DStorage>>::nnz","value":"pub fn nnz(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of non-zero entries\n","sig":null,"attributes":[{"value":"/ The number of non-zero entries","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334345,"byte_end":334379,"line_start":200,"line_end":200,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334488,"byte_end":334496,"line_start":206,"line_end":206,"column_start":12,"column_end":20},"name":"row_inds","qualname":"<TriMatBase<IStorage, DStorage>>::row_inds","value":"pub fn row_inds(&Self) -> &[I]","parent":null,"children":[],"decl_id":null,"docs":" The non-zero row indices\n","sig":null,"attributes":[{"value":"/ The non-zero row indices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334448,"byte_end":334476,"line_start":205,"line_end":205,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334595,"byte_end":334603,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"col_inds","qualname":"<TriMatBase<IStorage, DStorage>>::col_inds","value":"pub fn col_inds(&Self) -> &[I]","parent":null,"children":[],"decl_id":null,"docs":" The non-zero column indices\n","sig":null,"attributes":[{"value":"/ The non-zero column indices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334552,"byte_end":334583,"line_start":210,"line_end":210,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334694,"byte_end":334698,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"data","qualname":"<TriMatBase<IStorage, DStorage>>::data","value":"pub fn data(&Self) -> &[N]","parent":null,"children":[],"decl_id":null,"docs":" The non-zero values\n","sig":null,"attributes":[{"value":"/ The non-zero values","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334659,"byte_end":334682,"line_start":215,"line_end":215,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334832,"byte_end":334846,"line_start":221,"line_end":221,"column_start":12,"column_end":26},"name":"find_locations","qualname":"<TriMatBase<IStorage, DStorage>>::find_locations","value":"pub fn find_locations(&Self, usize, usize) -> Vec<TripletIndex>","parent":null,"children":[],"decl_id":null,"docs":" Find all non-zero entries at the location given by `row` and `col`\n","sig":null,"attributes":[{"value":"/ Find all non-zero entries at the location given by `row` and `col`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":334750,"byte_end":334820,"line_start":220,"line_end":220,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":335342,"byte_end":335356,"line_start":237,"line_end":237,"column_start":12,"column_end":26},"name":"transpose_view","qualname":"<TriMatBase<IStorage, DStorage>>::transpose_view","value":"pub fn transpose_view(&Self) -> TriMatViewI<, N, I>","parent":null,"children":[],"decl_id":null,"docs":" Get a transposed view of this matrix\n","sig":null,"attributes":[{"value":"/ Get a transposed view of this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":335290,"byte_end":335330,"line_start":236,"line_end":236,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":335682,"byte_end":335694,"line_start":248,"line_end":248,"column_start":12,"column_end":24},"name":"triplet_iter","qualname":"<TriMatBase<IStorage, DStorage>>::triplet_iter","value":"pub fn triplet_iter(&Self) -> TriMatIter<Iter<, I>, Iter<, I>, Iter<, N>>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over non-zero elements stored by this matrix\n","sig":null,"attributes":[{"value":"/ Get an iterator over non-zero elements stored by this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":335606,"byte_end":335670,"line_start":247,"line_end":247,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336058,"byte_end":336064,"line_start":260,"line_end":260,"column_start":12,"column_end":18},"name":"to_csc","qualname":"<TriMatBase<IStorage, DStorage>>::to_csc","value":"pub fn to_csc<Iptr: SpIndex>(&Self) -> CsMatI<N, I, Iptr> where N: Clone + Num","parent":null,"children":[],"decl_id":null,"docs":" Create a CSC matrix from this triplet matrix\n","sig":null,"attributes":[{"value":"/ Create a CSC matrix from this triplet matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":335998,"byte_end":336046,"line_start":259,"line_end":259,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336259,"byte_end":336265,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"to_csr","qualname":"<TriMatBase<IStorage, DStorage>>::to_csr","value":"pub fn to_csr<Iptr: SpIndex>(&Self) -> CsMatI<N, I, Iptr> where N: Clone + Num","parent":null,"children":[],"decl_id":null,"docs":" Create a CSR matrix from this triplet matrix\n","sig":null,"attributes":[{"value":"/ Create a CSR matrix from this triplet matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336199,"byte_end":336247,"line_start":267,"line_end":267,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336407,"byte_end":336411,"line_start":275,"line_end":275,"column_start":12,"column_end":16},"name":"view","qualname":"<TriMatBase<IStorage, DStorage>>::view","value":"pub fn view(&Self) -> TriMatViewI<, N, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336851,"byte_end":336867,"line_start":290,"line_end":290,"column_start":12,"column_end":28},"name":"triplet_iter_rbr","qualname":"<TriMatBase<&'a [I], &'a [N]>>::triplet_iter_rbr","value":"pub fn triplet_iter_rbr(&Self) -> TriMatIter<Iter, Iter, Iter>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over non-zero elements stored by this matrix","sig":null,"attributes":[{"value":"/ Get an iterator over non-zero elements stored by this matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336718,"byte_end":336782,"line_start":287,"line_end":287,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336787,"byte_end":336790,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Reborrowing version of `triplet_iter()`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336795,"byte_end":336839,"line_start":289,"line_end":289,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":337495,"byte_end":337506,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"set_triplet","qualname":"<TriMatBase<IStorage, DStorage>>::set_triplet","value":"pub fn set_triplet(&mut Self, TripletIndex, usize, usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Replace a non-zero value at the given index.\n Indices can be obtained using [`find_locations`](Self::find_locations).\n","sig":null,"attributes":[{"value":"/ Replace a non-zero value at the given index.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":337355,"byte_end":337403,"line_start":309,"line_end":309,"column_start":5,"column_end":53}},{"value":"/ Indices can be obtained using [`find_locations`](Self::find_locations).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":337408,"byte_end":337483,"line_start":310,"line_end":310,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":337810,"byte_end":337818,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<TriMatBase<IStorage, DStorage>>::view_mut","value":"pub fn view_mut(&mut Self) -> TriMatViewMutI<, N, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349336,"byte_end":349339,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<TriMatIter<RI, CI, DI>>::new","value":"pub fn new((usize, usize), usize, RI, CI, DI) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TriMatIter` from iterators\n","sig":null,"attributes":[{"value":"/ Create a new `TriMatIter` from iterators","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349280,"byte_end":349324,"line_start":40,"line_end":40,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349687,"byte_end":349691,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"rows","qualname":"<TriMatIter<RI, CI, DI>>::rows","value":"pub fn rows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of rows of the matrix\n","sig":null,"attributes":[{"value":"/ The number of rows of the matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349639,"byte_end":349675,"line_start":58,"line_end":58,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349787,"byte_end":349791,"line_start":64,"line_end":64,"column_start":12,"column_end":16},"name":"cols","qualname":"<TriMatIter<RI, CI, DI>>::cols","value":"pub fn cols(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of cols of the matrix\n","sig":null,"attributes":[{"value":"/ The number of cols of the matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349739,"byte_end":349775,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349905,"byte_end":349910,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"shape","qualname":"<TriMatIter<RI, CI, DI>>::shape","value":"pub fn shape(&Self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The shape of the matrix, as a `(rows, cols)` tuple\n","sig":null,"attributes":[{"value":"/ The shape of the matrix, as a `(rows, cols)` tuple","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349839,"byte_end":349893,"line_start":68,"line_end":68,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350026,"byte_end":350029,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"nnz","qualname":"<TriMatIter<RI, CI, DI>>::nnz","value":"pub fn nnz(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of non-zero entries\n","sig":null,"attributes":[{"value":"/ The number of non-zero entries","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349980,"byte_end":350014,"line_start":73,"line_end":73,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350083,"byte_end":350096,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"into_row_inds","qualname":"<TriMatIter<RI, CI, DI>>::into_row_inds","value":"pub fn into_row_inds(Self) -> RI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350151,"byte_end":350164,"line_start":82,"line_end":82,"column_start":12,"column_end":25},"name":"into_col_inds","qualname":"<TriMatIter<RI, CI, DI>>::into_col_inds","value":"pub fn into_col_inds(Self) -> CI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350219,"byte_end":350228,"line_start":86,"line_end":86,"column_start":12,"column_end":21},"name":"into_data","qualname":"<TriMatIter<RI, CI, DI>>::into_data","value":"pub fn into_data(Self) -> DI","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350279,"byte_end":350293,"line_start":90,"line_end":90,"column_start":12,"column_end":26},"name":"transpose_into","qualname":"<TriMatIter<RI, CI, DI>>::transpose_into","value":"pub fn transpose_into(Self) -> TriMatIter<CI, RI, DI>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350839,"byte_end":350847,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"into_csc","qualname":"<TriMatIter<RI, CI, DI>>::into_csc","value":"pub fn into_csc<Iptr: SpIndex>(Self) -> CsMatI<N, I, Iptr> where N: Num","parent":null,"children":[],"decl_id":null,"docs":" Consume `TriMatIter` and produce a CSC matrix\n","sig":null,"attributes":[{"value":"/ Consume `TriMatIter` and produce a CSC matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350778,"byte_end":350827,"line_start":110,"line_end":110,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":351040,"byte_end":351048,"line_start":119,"line_end":119,"column_start":12,"column_end":20},"name":"into_csr","qualname":"<TriMatIter<RI, CI, DI>>::into_csr","value":"pub fn into_csr<Iptr: SpIndex>(Self) -> CsMatI<N, I, Iptr> where N: Num","parent":null,"children":[],"decl_id":null,"docs":" Consume `TriMatIter` and produce a CSR matrix\n","sig":null,"attributes":[{"value":"/ Consume `TriMatIter` and produce a CSR matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350979,"byte_end":351028,"line_start":118,"line_end":118,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2203},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":351269,"byte_end":351276,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"into_cs","qualname":"<TriMatIter<RI, CI, DI>>::into_cs","value":"pub fn into_cs<Iptr: SpIndex>(Self, crate::CompressedStorage)\n-> CsMatI<N, I, Iptr> where N: Num","parent":null,"children":[],"decl_id":null,"docs":" Consume `TriMatIter` and produce a `CsMat` matrix with the chosen storage\n","sig":null,"attributes":[{"value":"/ Consume `TriMatIter` and produce a `CsMat` matrix with the chosen storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":351180,"byte_end":351257,"line_start":126,"line_end":126,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":3831},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355798,"byte_end":355806,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"NnzIndex","qualname":"::sparse::vec::NnzIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hold the index of a non-zero element in the compressed storage","sig":null,"attributes":[{"value":"/ Hold the index of a non-zero element in the compressed storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355627,"byte_end":355693,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355694,"byte_end":355697,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ An `NnzIndex` can be used to later access the non-zero element in constant","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355698,"byte_end":355776,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ time.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355777,"byte_end":355786,"line_start":48,"line_end":48,"column_start":1,"column_end":10}}]},{"kind":"Field","id":{"krate":0,"index":3833},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355807,"byte_end":355816,"line_start":49,"line_end":49,"column_start":21,"column_end":30},"name":"0","qualname":"::sparse::vec::NnzIndex::0","value":"usize","parent":{"krate":0,"index":3831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2340},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355923,"byte_end":355929,"line_start":53,"line_end":53,"column_start":11,"column_end":17},"name":"VecDim","qualname":"::sparse::vec::VecDim","value":"VecDim<N>","parent":null,"children":[{"krate":0,"index":2342}],"decl_id":null,"docs":" A trait to represent types which can be interpreted as vectors\n of a given dimension.\n","sig":null,"attributes":[{"value":"/ A trait to represent types which can be interpreted as vectors","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355820,"byte_end":355886,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/ of a given dimension.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355887,"byte_end":355912,"line_start":52,"line_end":52,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355978,"byte_end":355981,"line_start":55,"line_end":55,"column_start":8,"column_end":11},"name":"dim","qualname":"::sparse::vec::VecDim::dim","value":"pub fn dim(&Self) -> usize","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":" The dimension of the vector\n","sig":null,"attributes":[{"value":"/ The dimension of the vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":355939,"byte_end":355970,"line_start":54,"line_end":54,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2353},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356372,"byte_end":356386,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"VectorIterator","qualname":"::sparse::vec::VectorIterator","value":"VectorIterator {  }","parent":null,"children":[{"krate":0,"index":2357}],"decl_id":null,"docs":" An iterator over the non-zero elements of a sparse vector\n","sig":null,"attributes":[{"value":"/ An iterator over the non-zero elements of a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356299,"byte_end":356360,"line_start":75,"line_end":75,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2358},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356466,"byte_end":356484,"line_start":80,"line_end":80,"column_start":12,"column_end":30},"name":"VectorIteratorPerm","qualname":"::sparse::vec::VectorIteratorPerm","value":"VectorIteratorPerm {  }","parent":null,"children":[{"krate":0,"index":2362},{"krate":0,"index":2363}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2364},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356662,"byte_end":356679,"line_start":86,"line_end":86,"column_start":12,"column_end":29},"name":"VectorIteratorMut","qualname":"::sparse::vec::VectorIteratorMut","value":"VectorIteratorMut {  }","parent":null,"children":[{"krate":0,"index":2368}],"decl_id":null,"docs":" An iterator over the mutable non-zero elements of a sparse vector\n","sig":null,"attributes":[{"value":"/ An iterator over the mutable non-zero elements of a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356581,"byte_end":356650,"line_start":85,"line_end":85,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":2392},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358011,"byte_end":358026,"line_start":135,"line_end":135,"column_start":11,"column_end":26},"name":"SparseIterTools","qualname":"::sparse::vec::SparseIterTools","value":"SparseIterTools: Iterator","parent":null,"children":[{"krate":0,"index":2393},{"krate":0,"index":2398}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358953,"byte_end":358963,"line_start":155,"line_end":155,"column_start":8,"column_end":18},"name":"nnz_or_zip","qualname":"::sparse::vec::SparseIterTools::nnz_or_zip","value":"pub fn nnz_or_zip<'a, I, N1, N2>(Self, I) -> NnzOrZip where\nSelf: Iterator<Item = (usize, &'a N1)> + Sized, I: IntoIterator<Item =\n(usize, &'a N2)>","parent":{"krate":0,"index":2392},"children":[],"decl_id":null,"docs":" Iterate over non-zero elements of either of two vectors.\n This is useful for implementing eg addition of vectors.","sig":null,"attributes":[{"value":"/ Iterate over non-zero elements of either of two vectors.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358043,"byte_end":358103,"line_start":136,"line_end":136,"column_start":5,"column_end":65}},{"value":"/ This is useful for implementing eg addition of vectors.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358108,"byte_end":358167,"line_start":137,"line_end":137,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358172,"byte_end":358175,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358180,"byte_end":358193,"line_start":139,"line_end":139,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358198,"byte_end":358201,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358206,"byte_end":358217,"line_start":141,"line_end":141,"column_start":5,"column_end":16}},{"value":"/ use sprs::CsVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358222,"byte_end":358242,"line_start":142,"line_end":142,"column_start":5,"column_end":25}},{"value":"/ use sprs::vec::NnzEither;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358247,"byte_end":358276,"line_start":143,"line_end":143,"column_start":5,"column_end":34}},{"value":"/ use sprs::vec::SparseIterTools;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358281,"byte_end":358316,"line_start":144,"line_end":144,"column_start":5,"column_end":40}},{"value":"/ let v0 = CsVec::new(5, vec![0, 2, 4], vec![1., 2., 3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358321,"byte_end":358381,"line_start":145,"line_end":145,"column_start":5,"column_end":65}},{"value":"/ let v1 = CsVec::new(5, vec![1, 2, 3], vec![-1., -2., -3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358386,"byte_end":358449,"line_start":146,"line_end":146,"column_start":5,"column_end":68}},{"value":"/ let mut nnz_or_iter = v0.iter().nnz_or_zip(v1.iter());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358454,"byte_end":358512,"line_start":147,"line_end":147,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(nnz_or_iter.next(), Some(NnzEither::Left((0, &1.))));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358517,"byte_end":358585,"line_start":148,"line_end":148,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(nnz_or_iter.next(), Some(NnzEither::Right((1, &-1.))));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358590,"byte_end":358660,"line_start":149,"line_end":149,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(nnz_or_iter.next(), Some(NnzEither::Both((2, &2., &-2.))));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358665,"byte_end":358739,"line_start":150,"line_end":150,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(nnz_or_iter.next(), Some(NnzEither::Right((3, &-3.))));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358744,"byte_end":358814,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(nnz_or_iter.next(), Some(NnzEither::Left((4, &3.))));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358819,"byte_end":358887,"line_start":152,"line_end":152,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(nnz_or_iter.next(), None);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358892,"byte_end":358933,"line_start":153,"line_end":153,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358938,"byte_end":358945,"line_start":154,"line_end":154,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359901,"byte_end":359908,"line_start":185,"line_end":185,"column_start":8,"column_end":15},"name":"nnz_zip","qualname":"::sparse::vec::SparseIterTools::nnz_zip","value":"pub fn nnz_zip<'a, I, N1, N2>(Self, I)\n-> FilterMap<NnzOrZip, fn(: NnzEither) -> Option<(usize, &'a N1, &'a N2)>>\nwhere Self: Iterator<Item = (usize, &'a N1)> + Sized, I: IntoIterator<Item =\n(usize, &'a N2)>","parent":{"krate":0,"index":2392},"children":[],"decl_id":null,"docs":" Iterate over the matching non-zero elements of both vectors\n Useful for vector dot product.","sig":null,"attributes":[{"value":"/ Iterate over the matching non-zero elements of both vectors","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359337,"byte_end":359400,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ Useful for vector dot product.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359405,"byte_end":359439,"line_start":171,"line_end":171,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359444,"byte_end":359447,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359452,"byte_end":359465,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359470,"byte_end":359473,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359478,"byte_end":359489,"line_start":175,"line_end":175,"column_start":5,"column_end":16}},{"value":"/ use sprs::CsVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359494,"byte_end":359514,"line_start":176,"line_end":176,"column_start":5,"column_end":25}},{"value":"/ use sprs::vec::SparseIterTools;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359519,"byte_end":359554,"line_start":177,"line_end":177,"column_start":5,"column_end":40}},{"value":"/ let v0 = CsVec::new(5, vec![0, 2, 4], vec![1., 2., 3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359559,"byte_end":359619,"line_start":178,"line_end":178,"column_start":5,"column_end":65}},{"value":"/ let v1 = CsVec::new(5, vec![1, 2, 3], vec![-1., -2., -3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359624,"byte_end":359687,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"/ let mut nnz_zip = v0.iter().nnz_zip(v1.iter());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359692,"byte_end":359743,"line_start":180,"line_end":180,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(nnz_zip.next(), Some((2, &2., &-2.)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359748,"byte_end":359801,"line_start":181,"line_end":181,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(nnz_zip.next(), None);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359806,"byte_end":359843,"line_start":182,"line_end":182,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359848,"byte_end":359855,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":359860,"byte_end":359893,"line_start":184,"line_end":184,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":2409},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360649,"byte_end":360666,"line_start":210,"line_end":210,"column_start":11,"column_end":28},"name":"IntoSparseVecIter","qualname":"::sparse::vec::IntoSparseVecIter","value":"IntoSparseVecIter<'a, N: 'a>","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416}],"decl_id":null,"docs":" Trait for types that can be iterated as sparse vectors\n","sig":null,"attributes":[{"value":"/ Trait for types that can be iterated as sparse vectors","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360580,"byte_end":360638,"line_start":209,"line_end":209,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":2412},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360689,"byte_end":360697,"line_start":211,"line_end":211,"column_start":10,"column_end":18},"name":"IterType","qualname":"::sparse::vec::IntoSparseVecIter::IterType","value":"type IterType;","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2413},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360888,"byte_end":360908,"line_start":216,"line_end":216,"column_start":8,"column_end":28},"name":"into_sparse_vec_iter","qualname":"::sparse::vec::IntoSparseVecIter::into_sparse_vec_iter","value":"pub fn into_sparse_vec_iter(Self) -> <Self as IntoSparseVecIter>::IterType\nwhere <Self as IntoSparseVecIter>::IterType: Iterator<Item = (usize, &'a N)>","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Transform self into an iterator that yields (usize, &N) tuples\n where the usize is the index of the value in the sparse vector.\n The indices should be sorted.\n","sig":null,"attributes":[{"value":"/ Transform self into an iterator that yields (usize, &N) tuples","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360704,"byte_end":360770,"line_start":213,"line_end":213,"column_start":5,"column_end":71}},{"value":"/ where the usize is the index of the value in the sparse vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360775,"byte_end":360842,"line_start":214,"line_end":214,"column_start":5,"column_end":72}},{"value":"/ The indices should be sorted.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360847,"byte_end":360880,"line_start":215,"line_end":215,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2414},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361131,"byte_end":361134,"line_start":224,"line_end":224,"column_start":8,"column_end":11},"name":"dim","qualname":"::sparse::vec::IntoSparseVecIter::dim","value":"pub fn dim(&Self) -> usize","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" The dimension of the vector\n","sig":null,"attributes":[{"value":"/ The dimension of the vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361092,"byte_end":361123,"line_start":223,"line_end":223,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2415},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361224,"byte_end":361232,"line_start":227,"line_end":227,"column_start":8,"column_end":16},"name":"is_dense","qualname":"::sparse::vec::IntoSparseVecIter::is_dense","value":"pub fn is_dense(&Self) -> bool","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Indicator to check whether the vector is actually dense\n","sig":null,"attributes":[{"value":"/ Indicator to check whether the vector is actually dense","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361157,"byte_end":361216,"line_start":226,"line_end":226,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2416},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361470,"byte_end":361475,"line_start":238,"line_end":238,"column_start":8,"column_end":13},"name":"index","qualname":"::sparse::vec::IntoSparseVecIter::index","value":"pub fn index(Self, usize) -> &'a N where Self: Sized","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Random access to an element in the vector.","sig":null,"attributes":[{"value":"/ Random access to an element in the vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361275,"byte_end":361321,"line_start":231,"line_end":231,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361326,"byte_end":361329,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361334,"byte_end":361346,"line_start":233,"line_end":233,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361351,"byte_end":361354,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ - if the vector is not dense","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361359,"byte_end":361391,"line_start":235,"line_end":235,"column_start":5,"column_end":37}},{"value":"/ - if the index is out of bounds","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361396,"byte_end":361431,"line_start":236,"line_end":236,"column_start":5,"column_end":40}},{"value":"allow(unused_variables)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361436,"byte_end":361462,"line_start":237,"line_end":237,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2445},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":363774,"byte_end":363782,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"NnzOrZip","qualname":"::sparse::vec::NnzOrZip","value":"NnzOrZip {  }","parent":null,"children":[{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453}],"decl_id":null,"docs":" An iterator over the non zeros of either of two vector iterators, ordered,\n such that the sum of the vectors may be computed\n","sig":null,"attributes":[{"value":"/ An iterator over the non zeros of either of two vector iterators, ordered,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":363631,"byte_end":363709,"line_start":324,"line_end":324,"column_start":1,"column_end":79}},{"value":"/ such that the sum of the vectors may be computed","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":363710,"byte_end":363762,"line_start":325,"line_end":325,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3850},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":364081,"byte_end":364085,"line_start":338,"line_end":338,"column_start":5,"column_end":9},"name":"Both","qualname":"::sparse::vec::NnzEither::Both","value":"NnzEither::Both((usize, &'a N1, &'a N2))","parent":{"krate":0,"index":3846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3853},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":364116,"byte_end":364120,"line_start":339,"line_end":339,"column_start":5,"column_end":9},"name":"Left","qualname":"::sparse::vec::NnzEither::Left","value":"NnzEither::Left((usize, &'a N1))","parent":{"krate":0,"index":3846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3856},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":364143,"byte_end":364148,"line_start":340,"line_end":340,"column_start":5,"column_end":10},"name":"Right","qualname":"::sparse::vec::NnzEither::Right","value":"NnzEither::Right((usize, &'a N2))","parent":{"krate":0,"index":3846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3846},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":364045,"byte_end":364054,"line_start":337,"line_end":337,"column_start":10,"column_end":19},"name":"NnzEither","qualname":"::sparse::vec::NnzEither","value":"pub enum NnzEither<'a, N1: 'a, N2: 'a> {\n    Both((usize, &'a N1, &'a N2)),\n    Left((usize, &'a N1)),\n    Right((usize, &'a N2)),\n}","parent":null,"children":[{"krate":0,"index":3850},{"krate":0,"index":3853},{"krate":0,"index":3856}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2482},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367178,"byte_end":367181,"line_start":428,"line_end":428,"column_start":12,"column_end":15},"name":"new","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::new","value":"pub fn new(usize, IStorage, DStorage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a sparse vector","sig":null,"attributes":[{"value":"/ Create a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366511,"byte_end":366537,"line_start":410,"line_end":410,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366542,"byte_end":366545,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366550,"byte_end":366562,"line_start":412,"line_end":412,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366567,"byte_end":366570,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ - if `indices` and `data` lengths differ","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366575,"byte_end":366619,"line_start":414,"line_end":414,"column_start":5,"column_end":49}},{"value":"/ - if the vector contains out of bounds indices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366624,"byte_end":366674,"line_start":415,"line_end":415,"column_start":5,"column_end":55}},{"value":"/ - if indices are out of order","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366679,"byte_end":366712,"line_start":416,"line_end":416,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366717,"byte_end":366720,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366725,"byte_end":366739,"line_start":418,"line_end":418,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366744,"byte_end":366755,"line_start":419,"line_end":419,"column_start":5,"column_end":16}},{"value":"/ # use sprs::*;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366760,"byte_end":366778,"line_start":420,"line_end":420,"column_start":5,"column_end":23}},{"value":"/ // Creating a sparse owned vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366783,"byte_end":366820,"line_start":421,"line_end":421,"column_start":5,"column_end":42}},{"value":"/ let owned = CsVec::new(10, vec![0, 4], vec![-4, 2]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366825,"byte_end":366881,"line_start":422,"line_end":422,"column_start":5,"column_end":61}},{"value":"/ // Creating a sparse borrowing vector with `I = u16`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366886,"byte_end":366942,"line_start":423,"line_end":423,"column_start":5,"column_end":61}},{"value":"/ let borrow = CsVecViewI::new(10, &[0_u16, 4], &[-4, 2]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366947,"byte_end":367007,"line_start":424,"line_end":424,"column_start":5,"column_end":65}},{"value":"/ // Creating a general sparse vector with different storage types","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367012,"byte_end":367080,"line_start":425,"line_end":425,"column_start":5,"column_end":73}},{"value":"/ let mixed = CsVecBase::new(10, &[0_u64, 4] as &[_], vec![-4, 2]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367085,"byte_end":367154,"line_start":426,"line_end":426,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367159,"byte_end":367166,"line_start":427,"line_end":427,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367505,"byte_end":367512,"line_start":438,"line_end":438,"column_start":12,"column_end":19},"name":"try_new","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::try_new","value":"pub fn try_new(usize, IStorage, DStorage)\n-> Result<Self, (IStorage, DStorage, StructureError)>","parent":null,"children":[],"decl_id":null,"docs":" Try create a sparse vector from the given buffers","sig":null,"attributes":[{"value":"/ Try create a sparse vector from the given buffers","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367346,"byte_end":367399,"line_start":434,"line_end":434,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367404,"byte_end":367407,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Will return the buffers along with the error if","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367412,"byte_end":367463,"line_start":436,"line_end":436,"column_start":5,"column_end":56}},{"value":"/ conversion is illegal","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":367468,"byte_end":367493,"line_start":437,"line_end":437,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369755,"byte_end":369767,"line_start":513,"line_end":513,"column_start":19,"column_end":31},"name":"new_uncheked","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::new_uncheked","value":"pub unsafe fn new_uncheked(usize, IStorage, DStorage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `CsVec` without checking the structure","sig":null,"attributes":[{"value":"/ Create a `CsVec` without checking the structure","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369381,"byte_end":369432,"line_start":505,"line_end":505,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369437,"byte_end":369440,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369445,"byte_end":369457,"line_start":507,"line_end":507,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369462,"byte_end":369465,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ This is unsafe because algorithms are free to assume","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369470,"byte_end":369526,"line_start":509,"line_end":509,"column_start":5,"column_end":61}},{"value":"/ that properties guaranteed by [`check_structure`](CsVecBase::check_structure) are enforced.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369531,"byte_end":369626,"line_start":510,"line_end":510,"column_start":5,"column_end":100}},{"value":"/ For instance, non out-of-bounds indices can be relied upon to","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369631,"byte_end":369696,"line_start":511,"line_end":511,"column_start":5,"column_end":70}},{"value":"/ perform unchecked slice access.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369701,"byte_end":369736,"line_start":512,"line_end":512,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370226,"byte_end":370243,"line_start":534,"line_end":534,"column_start":12,"column_end":29},"name":"new_from_unsorted","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::new_from_unsorted","value":"pub fn new_from_unsorted(usize, IStorage, DStorage)\n-> Result<Self, (IStorage, DStorage, StructureError)> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Creates a sparse vector","sig":null,"attributes":[{"value":"/ Creates a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370131,"byte_end":370158,"line_start":531,"line_end":531,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370163,"byte_end":370166,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ Will sort indices and data if necessary","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370171,"byte_end":370214,"line_start":533,"line_end":533,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371062,"byte_end":371067,"line_start":561,"line_end":561,"column_start":12,"column_end":17},"name":"empty","qualname":"<CsVecI<N, I>>::empty","value":"pub fn empty(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `CsVec`, which can be used for incremental construction\n","sig":null,"attributes":[{"value":"/ Create an empty `CsVec`, which can be used for incremental construction","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370975,"byte_end":371050,"line_start":560,"line_end":560,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371597,"byte_end":371603,"line_start":575,"line_end":575,"column_start":12,"column_end":18},"name":"append","qualname":"<CsVecI<N, I>>::append","value":"pub fn append(&mut Self, usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Append an element to the sparse vector. Used for incremental\n building of the `CsVec`. The append should preserve the structure\n of the vector, ie the newly added index should be strictly greater\n than the last element of indices.","sig":null,"attributes":[{"value":"/ Append an element to the sparse vector. Used for incremental","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371148,"byte_end":371212,"line_start":565,"line_end":565,"column_start":5,"column_end":69}},{"value":"/ building of the `CsVec`. The append should preserve the structure","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371217,"byte_end":371286,"line_start":566,"line_end":566,"column_start":5,"column_end":74}},{"value":"/ of the vector, ie the newly added index should be strictly greater","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371291,"byte_end":371361,"line_start":567,"line_end":567,"column_start":5,"column_end":75}},{"value":"/ than the last element of indices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371366,"byte_end":371403,"line_start":568,"line_end":568,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371408,"byte_end":371411,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371416,"byte_end":371428,"line_start":570,"line_end":570,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371433,"byte_end":371436,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ - Panics if `ind` is lower or equal to the last","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371441,"byte_end":371492,"line_start":572,"line_end":572,"column_start":5,"column_end":56}},{"value":"/   element of `self.indices()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371497,"byte_end":371530,"line_start":573,"line_end":573,"column_start":5,"column_end":38}},{"value":"/ - Panics if `ind` is greater than `self.dim()`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371535,"byte_end":371585,"line_start":574,"line_end":574,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372033,"byte_end":372040,"line_start":588,"line_end":588,"column_start":12,"column_end":19},"name":"reserve","qualname":"<CsVecI<N, I>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve `size` additional non-zero values.\n","sig":null,"attributes":[{"value":"/ Reserve `size` additional non-zero values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":371975,"byte_end":372021,"line_start":587,"line_end":587,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2499},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372208,"byte_end":372221,"line_start":594,"line_end":594,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<CsVecI<N, I>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve exactly `exact_size` non-zero values.\n","sig":null,"attributes":[{"value":"/ Reserve exactly `exact_size` non-zero values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372147,"byte_end":372196,"line_start":593,"line_end":593,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372402,"byte_end":372407,"line_start":600,"line_end":600,"column_start":12,"column_end":17},"name":"clear","qualname":"<CsVecI<N, I>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the underlying storage\n","sig":null,"attributes":[{"value":"/ Clear the underlying storage","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372358,"byte_end":372390,"line_start":599,"line_end":599,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372733,"byte_end":372737,"line_start":614,"line_end":614,"column_start":12,"column_end":16},"name":"view","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::view","value":"pub fn view(&Self) -> CsVecViewI<, N, I>","parent":null,"children":[],"decl_id":null,"docs":" Get a view of this vector.\n","sig":null,"attributes":[{"value":"/ Get a view of this vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372691,"byte_end":372721,"line_start":613,"line_end":613,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372907,"byte_end":372915,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"to_dense","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::to_dense","value":"pub fn to_dense(&Self) -> Array<N, Ix1> where N: Clone + Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert the sparse vector to a dense one\n","sig":null,"attributes":[{"value":"/ Convert the sparse vector to a dense one","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372851,"byte_end":372895,"line_start":618,"line_end":618,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373532,"byte_end":373536,"line_start":641,"line_end":641,"column_start":12,"column_end":16},"name":"iter","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::iter","value":"pub fn iter(&Self) -> VectorIterator<, N, I>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the non zero values.","sig":null,"attributes":[{"value":"/ Iterate over the non zero values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373113,"byte_end":373150,"line_start":628,"line_end":628,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373155,"byte_end":373158,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373163,"byte_end":373176,"line_start":630,"line_end":630,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373181,"byte_end":373184,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373189,"byte_end":373200,"line_start":632,"line_end":632,"column_start":5,"column_end":16}},{"value":"/ use sprs::CsVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373205,"byte_end":373225,"line_start":633,"line_end":633,"column_start":5,"column_end":25}},{"value":"/ let v = CsVec::new(5, vec![0, 2, 4], vec![1., 2., 3.]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373230,"byte_end":373289,"line_start":634,"line_end":634,"column_start":5,"column_end":64}},{"value":"/ let mut iter = v.iter();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373294,"byte_end":373322,"line_start":635,"line_end":635,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.next(), Some((0, &1.)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373327,"byte_end":373371,"line_start":636,"line_end":636,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some((2, &2.)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373376,"byte_end":373420,"line_start":637,"line_end":637,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some((4, &3.)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373425,"byte_end":373469,"line_start":638,"line_end":638,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373474,"byte_end":373508,"line_start":639,"line_end":639,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373513,"byte_end":373520,"line_start":640,"line_end":640,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373748,"byte_end":373757,"line_start":649,"line_end":649,"column_start":12,"column_end":21},"name":"iter_perm","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::iter_perm","value":"pub fn iter_perm<'a, 'perm:'a>(&'a Self, PermViewI) -> VectorIteratorPerm\nwhere N: 'a","parent":null,"children":[],"decl_id":null,"docs":" Permuted iteration. Not finished\n","sig":null,"attributes":[{"value":"/ Permuted iteration. Not finished","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":373681,"byte_end":373717,"line_start":647,"line_end":647,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374068,"byte_end":374075,"line_start":663,"line_end":663,"column_start":12,"column_end":19},"name":"indices","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::indices","value":"pub fn indices(&Self) -> &[I]","parent":null,"children":[],"decl_id":null,"docs":" The underlying indices.\n","sig":null,"attributes":[{"value":"/ The underlying indices.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374029,"byte_end":374056,"line_start":662,"line_end":662,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374173,"byte_end":374177,"line_start":668,"line_end":668,"column_start":12,"column_end":16},"name":"data","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::data","value":"pub fn data(&Self) -> &[N]","parent":null,"children":[],"decl_id":null,"docs":" The underlying non zero values.\n","sig":null,"attributes":[{"value":"/ The underlying non zero values.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374126,"byte_end":374161,"line_start":667,"line_end":667,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374303,"byte_end":374319,"line_start":673,"line_end":673,"column_start":12,"column_end":28},"name":"into_raw_storage","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::into_raw_storage","value":"pub fn into_raw_storage(Self) -> (IStorage, DStorage)","parent":null,"children":[],"decl_id":null,"docs":" Destruct the vector object and recycle its storage containers.\n","sig":null,"attributes":[{"value":"/ Destruct the vector object and recycle its storage containers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374225,"byte_end":374291,"line_start":672,"line_end":672,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374479,"byte_end":374482,"line_start":679,"line_end":679,"column_start":12,"column_end":15},"name":"dim","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::dim","value":"pub fn dim(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The dimension of this vector.\n","sig":null,"attributes":[{"value":"/ The dimension of this vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374434,"byte_end":374467,"line_start":678,"line_end":678,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374579,"byte_end":374582,"line_start":684,"line_end":684,"column_start":12,"column_end":15},"name":"nnz","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::nnz","value":"pub fn nnz(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The non zero count of this vector.\n","sig":null,"attributes":[{"value":"/ The non zero count of this vector.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374529,"byte_end":374567,"line_start":683,"line_end":683,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374764,"byte_end":374779,"line_start":691,"line_end":691,"column_start":12,"column_end":27},"name":"check_structure","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::check_structure","value":"pub fn check_structure(&Self) -> Result<(), StructureError>","parent":null,"children":[],"decl_id":null,"docs":" Check the sparse structure, namely that:\n - indices are sorted\n - all indices are less than dims()\n","sig":null,"attributes":[{"value":"/ Check the sparse structure, namely that:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374636,"byte_end":374680,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ - indices are sorted","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374685,"byte_end":374709,"line_start":689,"line_end":689,"column_start":5,"column_end":29}},{"value":"/ - all indices are less than dims()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":374714,"byte_end":374752,"line_start":690,"line_end":690,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375549,"byte_end":375557,"line_start":718,"line_end":718,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::to_owned","value":"pub fn to_owned(&Self) -> CsVecI<N, I> where N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new vector equal to this one.\n","sig":null,"attributes":[{"value":"/ Allocate a new vector equal to this one.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375493,"byte_end":375537,"line_start":717,"line_end":717,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375890,"byte_end":375904,"line_start":730,"line_end":730,"column_start":12,"column_end":26},"name":"to_other_types","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::to_other_types","value":"pub fn to_other_types<I2>(&Self) -> CsVecI<N, I2> where N: Clone, I2: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Clone the vector with another integer type for its indices","sig":null,"attributes":[{"value":"/ Clone the vector with another integer type for its indices","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375707,"byte_end":375769,"line_start":725,"line_end":725,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375774,"byte_end":375777,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375782,"byte_end":375794,"line_start":727,"line_end":727,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375799,"byte_end":375802,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ If the indices cannot be represented by the requested integer type.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":375807,"byte_end":375878,"line_start":729,"line_end":729,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":376321,"byte_end":376329,"line_start":745,"line_end":745,"column_start":12,"column_end":20},"name":"row_view","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::row_view","value":"pub fn row_view<Iptr: SpIndex>(&Self) -> CsMatVecView_<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" View this vector as a matrix with only one row.\n","sig":null,"attributes":[{"value":"/ View this vector as a matrix with only one row.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":376258,"byte_end":376309,"line_start":744,"line_end":744,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":376974,"byte_end":376982,"line_start":765,"line_end":765,"column_start":12,"column_end":20},"name":"col_view","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::col_view","value":"pub fn col_view<Iptr: SpIndex>(&Self) -> CsMatVecView_<, N, I, Iptr>","parent":null,"children":[],"decl_id":null,"docs":" View this vector as a matrix with only one column.\n","sig":null,"attributes":[{"value":"/ View this vector as a matrix with only one column.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":376908,"byte_end":376962,"line_start":764,"line_end":764,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377635,"byte_end":377638,"line_start":785,"line_end":785,"column_start":12,"column_end":15},"name":"get","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::get","value":"pub fn get<'a>(&'a Self, usize) -> Option<&'a N> where I: 'a","parent":null,"children":[],"decl_id":null,"docs":" Access element at given index, with logarithmic complexity\n","sig":null,"attributes":[{"value":"/ Access element at given index, with logarithmic complexity","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377561,"byte_end":377623,"line_start":784,"line_end":784,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378097,"byte_end":378106,"line_start":798,"line_end":798,"column_start":12,"column_end":21},"name":"nnz_index","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::nnz_index","value":"pub fn nnz_index(&Self, usize) -> Option<NnzIndex>","parent":null,"children":[],"decl_id":null,"docs":" Find the non-zero index of the requested dimension index,\n returning None if no non-zero is present at the requested location.","sig":null,"attributes":[{"value":"/ Find the non-zero index of the requested dimension index,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377761,"byte_end":377822,"line_start":792,"line_end":792,"column_start":5,"column_end":66}},{"value":"/ returning None if no non-zero is present at the requested location.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377827,"byte_end":377898,"line_start":793,"line_end":793,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377903,"byte_end":377906,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ Looking for the `NnzIndex` is done with logarithmic complexity, but","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377911,"byte_end":377982,"line_start":795,"line_end":795,"column_start":5,"column_end":76}},{"value":"/ once it is available, the `NnzIndex` enables retrieving the data with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":377987,"byte_end":378060,"line_start":796,"line_end":796,"column_start":5,"column_end":78}},{"value":"/ O(1) complexity.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378065,"byte_end":378085,"line_start":797,"line_end":797,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379082,"byte_end":379085,"line_start":826,"line_end":826,"column_start":12,"column_end":15},"name":"dot","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::dot","value":"pub fn dot<'b, T: IntoSparseVecIter>(&'b Self, T) -> N where N: 'b +\ncrate::MulAcc + num_traits::Zero, I: 'b,\n<T as IntoSparseVecIter>::IterType: Iterator<Item = (usize, &'b N)>, T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Sparse vector dot product. The right-hand-side can be any type\n that can be interpreted as a sparse vector (hence sparse vectors, std\n vectors and slices, and ndarray's dense vectors work).","sig":null,"attributes":[{"value":"/ Sparse vector dot product. The right-hand-side can be any type","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378302,"byte_end":378368,"line_start":805,"line_end":805,"column_start":5,"column_end":71}},{"value":"/ that can be interpreted as a sparse vector (hence sparse vectors, std","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378373,"byte_end":378446,"line_start":806,"line_end":806,"column_start":5,"column_end":78}},{"value":"/ vectors and slices, and ndarray's dense vectors work).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378451,"byte_end":378509,"line_start":807,"line_end":807,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378514,"byte_end":378517,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ However, even if dense vectors work, it is more performant to use","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378522,"byte_end":378591,"line_start":809,"line_end":809,"column_start":5,"column_end":74}},{"value":"/ the [`dot_dense`](struct.CsVecBase.html#method.dot_dense).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378596,"byte_end":378658,"line_start":810,"line_end":810,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378663,"byte_end":378666,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378671,"byte_end":378683,"line_start":812,"line_end":812,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378688,"byte_end":378691,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ If the dimension of the vectors do not match.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378696,"byte_end":378745,"line_start":814,"line_end":814,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378750,"byte_end":378753,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378758,"byte_end":378771,"line_start":816,"line_end":816,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378776,"byte_end":378779,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378784,"byte_end":378795,"line_start":818,"line_end":818,"column_start":5,"column_end":16}},{"value":"/ use sprs::CsVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378800,"byte_end":378820,"line_start":819,"line_end":819,"column_start":5,"column_end":25}},{"value":"/ let v1 = CsVec::new(8, vec![1, 2, 4, 6], vec![1.; 4]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378825,"byte_end":378883,"line_start":820,"line_end":820,"column_start":5,"column_end":63}},{"value":"/ let v2 = CsVec::new(8, vec![1, 3, 5, 7], vec![2.; 4]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378888,"byte_end":378946,"line_start":821,"line_end":821,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(2., v1.dot(&v2));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378951,"byte_end":378983,"line_start":822,"line_end":822,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(4., v1.dot(&v1));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":378988,"byte_end":379020,"line_start":823,"line_end":823,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(16., v2.dot(&v2));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379025,"byte_end":379058,"line_start":824,"line_end":824,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379063,"byte_end":379070,"line_start":825,"line_end":825,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379726,"byte_end":379733,"line_start":843,"line_end":843,"column_start":12,"column_end":19},"name":"dot_acc","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::dot_acc","value":"pub fn dot_acc<'b, T: IntoSparseVecIter, M, Acc>(&'b Self, T) -> Acc where\nAcc: 'b + crate::MulAcc<N, M> + num_traits::Zero, M: 'b,\n<T as IntoSparseVecIter>::IterType: Iterator<Item = (usize, &'b M)>, T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Sparse vector dot product into accumulator.","sig":null,"attributes":[{"value":"/ Sparse vector dot product into accumulator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379413,"byte_end":379460,"line_start":837,"line_end":837,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379465,"byte_end":379468,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ The right-hand-side can be any type","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379473,"byte_end":379512,"line_start":839,"line_end":839,"column_start":5,"column_end":44}},{"value":"/ that can be interpreted as a sparse vector (hence sparse vectors, std","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379517,"byte_end":379590,"line_start":840,"line_end":840,"column_start":5,"column_end":78}},{"value":"/ vectors and slices, and ndarray's dense vectors work).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379595,"byte_end":379653,"line_start":841,"line_end":841,"column_start":5,"column_end":63}},{"value":"/ The output type can be any type supporting `MulAcc`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":379658,"byte_end":379714,"line_start":842,"line_end":842,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381576,"byte_end":381585,"line_start":893,"line_end":893,"column_start":12,"column_end":21},"name":"dot_dense","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::dot_dense","value":"pub fn dot_dense<V>(&Self, V) -> N where V: DenseVector<Scalar = N>, N: Sum,\nfor<'r> &'r N: Mul<&'r N, Output = N>","parent":null,"children":[],"decl_id":null,"docs":" Sparse-dense vector dot product. The right-hand-side can be any type\n that can be interpreted as a dense vector (hence std vectors and\n slices, and ndarray's dense vectors work).","sig":null,"attributes":[{"value":"/ Sparse-dense vector dot product. The right-hand-side can be any type","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381089,"byte_end":381161,"line_start":882,"line_end":882,"column_start":5,"column_end":77}},{"value":"/ that can be interpreted as a dense vector (hence std vectors and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381166,"byte_end":381234,"line_start":883,"line_end":883,"column_start":5,"column_end":73}},{"value":"/ slices, and ndarray's dense vectors work).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381239,"byte_end":381285,"line_start":884,"line_end":884,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381290,"byte_end":381293,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ Since the `dot` method can work with the same performance on","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381298,"byte_end":381362,"line_start":886,"line_end":886,"column_start":5,"column_end":69}},{"value":"/ dot vectors, the main interest of this method is to enforce at","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381367,"byte_end":381433,"line_start":887,"line_end":887,"column_start":5,"column_end":71}},{"value":"/ compile time that the rhs is dense.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381438,"byte_end":381477,"line_start":888,"line_end":888,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381482,"byte_end":381485,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381490,"byte_end":381502,"line_start":890,"line_end":890,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381507,"byte_end":381510,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ If the dimension of the vectors do not match.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381515,"byte_end":381564,"line_start":892,"line_end":892,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381931,"byte_end":381946,"line_start":906,"line_end":906,"column_start":12,"column_end":27},"name":"squared_l2_norm","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::squared_l2_norm","value":"pub fn squared_l2_norm(&Self) -> N where N: Sum, for<'r> &'r N: Mul<&'r N,\nOutput = N>","parent":null,"children":[],"decl_id":null,"docs":" Compute the squared L2-norm.\n","sig":null,"attributes":[{"value":"/ Compute the squared L2-norm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":381887,"byte_end":381919,"line_start":905,"line_end":905,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382131,"byte_end":382138,"line_start":915,"line_end":915,"column_start":12,"column_end":19},"name":"l2_norm","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::l2_norm","value":"pub fn l2_norm(&Self) -> N where N: Float + Sum, for<'r> &'r N: Mul<&'r N,\nOutput = N>","parent":null,"children":[],"decl_id":null,"docs":" Compute the L2-norm.\n","sig":null,"attributes":[{"value":"/ Compute the L2-norm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382095,"byte_end":382119,"line_start":914,"line_end":914,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382323,"byte_end":382330,"line_start":924,"line_end":924,"column_start":12,"column_end":19},"name":"l1_norm","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::l1_norm","value":"pub fn l1_norm(&Self) -> N where N: Signed + Sum","parent":null,"children":[],"decl_id":null,"docs":" Compute the L1-norm.\n","sig":null,"attributes":[{"value":"/ Compute the L1-norm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382287,"byte_end":382311,"line_start":923,"line_end":923,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382713,"byte_end":382717,"line_start":938,"line_end":938,"column_start":12,"column_end":16},"name":"norm","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::norm","value":"pub fn norm(&Self, N) -> N where N: Float + Sum","parent":null,"children":[],"decl_id":null,"docs":" Compute the vector norm for the given order p.","sig":null,"attributes":[{"value":"/ Compute the vector norm for the given order p.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382443,"byte_end":382493,"line_start":931,"line_end":931,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382498,"byte_end":382501,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ The norm for vector v is defined as:","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382506,"byte_end":382546,"line_start":933,"line_end":933,"column_start":5,"column_end":45}},{"value":"/ - If p = ∞: maxᵢ |vᵢ|","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382551,"byte_end":382582,"line_start":934,"line_end":934,"column_start":5,"column_end":30}},{"value":"/ - If p = -∞: minᵢ |vᵢ|","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382587,"byte_end":382619,"line_start":935,"line_end":935,"column_start":5,"column_end":31}},{"value":"/ - If p = 0: ∑ᵢ[vᵢ≠0]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382624,"byte_end":382656,"line_start":936,"line_end":936,"column_start":5,"column_end":29}},{"value":"/ - Otherwise: ᵖ√(∑ᵢ|vᵢ|ᵖ)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":382661,"byte_end":382701,"line_start":937,"line_end":937,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":383771,"byte_end":383778,"line_start":964,"line_end":964,"column_start":12,"column_end":19},"name":"scatter","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::scatter","value":"pub fn scatter<V: ?Sized>(&Self, &mut V) where N: Clone,\nV: DenseVectorMut<Scalar = N>","parent":null,"children":[],"decl_id":null,"docs":" Fill a dense vector with our values\n","sig":null,"attributes":[{"value":"/ Fill a dense vector with our values","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":383419,"byte_end":383458,"line_start":959,"line_end":959,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2556},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":384065,"byte_end":384071,"line_start":975,"line_end":975,"column_start":12,"column_end":18},"name":"to_set","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::to_set","value":"pub fn to_set(&Self) -> HashSet<(usize, N)> where N: Hash + Eq + Clone","parent":null,"children":[],"decl_id":null,"docs":" Transform this vector into a set of (index, value) tuples\n","sig":null,"attributes":[{"value":"/ Transform this vector into a set of (index, value) tuples","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":383992,"byte_end":384053,"line_start":974,"line_end":974,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":384433,"byte_end":384436,"line_start":988,"line_end":988,"column_start":12,"column_end":15},"name":"map","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::map","value":"pub fn map<F>(&Self, F) -> CsVecI<N, I> where F: FnMut(&N) -> N, N: Clone","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to each non-zero element, yielding a new matrix\n with the same sparsity structure.\n","sig":null,"attributes":[{"value":"/ Apply a function to each non-zero element, yielding a new matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":384311,"byte_end":384379,"line_start":986,"line_end":986,"column_start":5,"column_end":73}},{"value":"/ with the same sparsity structure.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":384384,"byte_end":384421,"line_start":987,"line_end":987,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385018,"byte_end":385026,"line_start":1012,"line_end":1012,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::view_mut","value":"pub fn view_mut(&mut Self) -> CsVecViewMutI<, N, I>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385279,"byte_end":385286,"line_start":1021,"line_end":1021,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::get_mut","value":"pub fn get_mut(&mut Self, usize) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Access element at given index, with logarithmic complexity\n","sig":null,"attributes":[{"value":"/ Access element at given index, with logarithmic complexity","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385205,"byte_end":385267,"line_start":1020,"line_end":1020,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2569},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385566,"byte_end":385577,"line_start":1030,"line_end":1030,"column_start":12,"column_end":23},"name":"map_inplace","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::map_inplace","value":"pub fn map_inplace<F>(&mut Self, F) where F: FnMut(&N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to each non-zero element, mutating it\n","sig":null,"attributes":[{"value":"/ Apply a function to each non-zero element, mutating it","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385496,"byte_end":385554,"line_start":1029,"line_end":1029,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385888,"byte_end":385896,"line_start":1042,"line_end":1042,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> VectorIteratorMut<, N, I>","parent":null,"children":[],"decl_id":null,"docs":" Mutable iteration over the non-zero values of a sparse vector","sig":null,"attributes":[{"value":"/ Mutable iteration over the non-zero values of a sparse vector","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385733,"byte_end":385798,"line_start":1039,"line_end":1039,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385803,"byte_end":385806,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ Only the values can be changed, the sparse structure is kept.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":385811,"byte_end":385876,"line_start":1041,"line_end":1041,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386156,"byte_end":386170,"line_start":1051,"line_end":1051,"column_start":12,"column_end":26},"name":"unit_normalize","qualname":"<CsVecBase<IStorage, DStorage, N, I>>::unit_normalize","value":"pub fn unit_normalize(&mut Self) where N: Float + Sum,\nfor<'r> &'r N: Mul<&'r N, Output = N>","parent":null,"children":[],"decl_id":null,"docs":" Divides the vector by its own L2-norm.","sig":null,"attributes":[{"value":"/ Divides the vector by its own L2-norm.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386055,"byte_end":386097,"line_start":1048,"line_end":1048,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386102,"byte_end":386105,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ Zero vector is left unchanged.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386110,"byte_end":386144,"line_start":1050,"line_end":1050,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386691,"byte_end":386698,"line_start":1069,"line_end":1069,"column_start":12,"column_end":19},"name":"get_rbr","qualname":"<CsVecViewI>::get_rbr","value":"pub fn get_rbr(&Self, usize) -> Option<&'a N>","parent":null,"children":[],"decl_id":null,"docs":" Access element at given index, with logarithmic complexity","sig":null,"attributes":[{"value":"/ Access element at given index, with logarithmic complexity","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386569,"byte_end":386631,"line_start":1066,"line_end":1066,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386636,"byte_end":386639,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Re-borrowing version of `at()`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386644,"byte_end":386679,"line_start":1068,"line_end":1068,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2766},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"visu","qualname":"::sparse::visu","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2770},{"krate":0,"index":2773},{"krate":0,"index":2776},{"krate":0,"index":2779},{"krate":0,"index":2783},{"krate":0,"index":2789},{"krate":0,"index":2796},{"krate":0,"index":2800}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2779},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":413884,"byte_end":413901,"line_start":8,"line_end":8,"column_start":8,"column_end":25},"name":"print_nnz_pattern","qualname":"::sparse::visu::print_nnz_pattern","value":"pub fn print_nnz_pattern<N, I, Iptr>(CsMatViewI<, N, I, Iptr>) where\nN: Clone + Default, I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2783},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":414070,"byte_end":414089,"line_start":17,"line_end":17,"column_start":12,"column_end":31},"name":"NnzPatternFormatter","qualname":"::sparse::visu::NnzPatternFormatter","value":"NnzPatternFormatter {  }","parent":null,"children":[{"krate":0,"index":2788}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2796},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415263,"byte_end":415284,"line_start":57,"line_end":57,"column_start":8,"column_end":29},"name":"nnz_pattern_formatter","qualname":"::sparse::visu::nnz_pattern_formatter","value":"pub fn nnz_pattern_formatter<N, I, Iptr>(CsMatViewI<, N, I, Iptr>)\n-> NnzPatternFormatter<, N, I, Iptr> where I: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2800},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415704,"byte_end":415713,"line_start":72,"line_end":72,"column_start":8,"column_end":17},"name":"nnz_image","qualname":"::sparse::visu::nnz_image","value":"pub fn nnz_image<N, I, Iptr>(CsMatViewI<, N, I, Iptr>) -> Array2<u8> where\nI: SpIndex, Iptr: SpIndex","parent":null,"children":[],"decl_id":null,"docs":" Create an array holding a black and white image representing the\n non-zero pattern of the sparse matrix.","sig":null,"attributes":[{"value":"/ Create an array holding a black and white image representing the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415446,"byte_end":415514,"line_start":67,"line_end":67,"column_start":1,"column_end":69}},{"value":"/ non-zero pattern of the sparse matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415515,"byte_end":415557,"line_start":68,"line_end":68,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415558,"byte_end":415561,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Since this is aimed at display, zeros will be mapped to 0xFF white pixels","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415562,"byte_end":415639,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ while non-zeros will be mapped to 0x00 black pixels.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":415640,"byte_end":415696,"line_start":71,"line_end":71,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2804},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stack","qualname":"::stack","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","parent":null,"children":[{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2808},{"krate":0,"index":3874},{"krate":0,"index":3879},{"krate":0,"index":3882},{"krate":0,"index":3885},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3900},{"krate":0,"index":3904},{"krate":0,"index":3906},{"krate":0,"index":3909},{"krate":0,"index":2811},{"krate":0,"index":2814},{"krate":0,"index":2831}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3874},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417585,"byte_end":417591,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"DStack","qualname":"::stack::DStack","value":"DStack {  }","parent":null,"children":[{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878}],"decl_id":null,"docs":" A double stack of fixed capacity, growing from the left to the right\n or conversely.","sig":null,"attributes":[{"value":"/ A double stack of fixed capacity, growing from the left to the right","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417325,"byte_end":417397,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ or conversely.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417398,"byte_end":417416,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417417,"byte_end":417420,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Used in sparse triangular / sparse vector solves, where it is guaranteed","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417421,"byte_end":417497,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ that the two parts of the stack cannot overlap.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417498,"byte_end":417549,"line_start":10,"line_end":10,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3887},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417745,"byte_end":417750,"line_start":20,"line_end":20,"column_start":5,"column_end":10},"name":"Enter","qualname":"::stack::StackVal::Enter","value":"StackVal::Enter(I)","parent":{"krate":0,"index":3885},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3890},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417759,"byte_end":417763,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Exit","qualname":"::stack::StackVal::Exit","value":"StackVal::Exit(I)","parent":{"krate":0,"index":3885},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3885},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417727,"byte_end":417735,"line_start":19,"line_end":19,"column_start":10,"column_end":18},"name":"StackVal","qualname":"::stack::StackVal","value":"pub enum StackVal<I> { Enter(I), Exit(I), }","parent":null,"children":[{"krate":0,"index":3887},{"krate":0,"index":3890}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2816},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418012,"byte_end":418025,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<DStack<I>>::with_capacity","value":"pub fn with_capacity(usize) -> Self where I: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new double stacked suited for containing at most n elements\n","sig":null,"attributes":[{"value":"/ Create a new double stacked suited for containing at most n elements","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417928,"byte_end":418000,"line_start":34,"line_end":34,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418277,"byte_end":418285,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"capacity","qualname":"<DStack<I>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Capacity of the dstack\n","sig":null,"attributes":[{"value":"/ Capacity of the dstack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418239,"byte_end":418265,"line_start":47,"line_end":47,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418393,"byte_end":418406,"line_start":53,"line_end":53,"column_start":12,"column_end":25},"name":"is_left_empty","qualname":"<DStack<I>>::is_left_empty","value":"pub fn is_left_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the left stack is empty\n","sig":null,"attributes":[{"value":"/ Test whether the left stack is empty","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418341,"byte_end":418381,"line_start":52,"line_end":52,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2819},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418521,"byte_end":418535,"line_start":58,"line_end":58,"column_start":12,"column_end":26},"name":"is_right_empty","qualname":"<DStack<I>>::is_right_empty","value":"pub fn is_right_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the right stack is empty\n","sig":null,"attributes":[{"value":"/ Test whether the right stack is empty","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418468,"byte_end":418509,"line_start":57,"line_end":57,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418653,"byte_end":418662,"line_start":63,"line_end":63,"column_start":12,"column_end":21},"name":"push_left","qualname":"<DStack<I>>::push_left","value":"pub fn push_left(&mut Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Push a value on the left stack\n","sig":null,"attributes":[{"value":"/ Push a value on the left stack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418607,"byte_end":418641,"line_start":62,"line_end":62,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418913,"byte_end":418923,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"push_right","qualname":"<DStack<I>>::push_right","value":"pub fn push_right(&mut Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Push a value on the right stack\n","sig":null,"attributes":[{"value":"/ Push a value on the right stack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":418866,"byte_end":418901,"line_start":70,"line_end":70,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":419191,"byte_end":419199,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"pop_left","qualname":"<DStack<I>>::pop_left","value":"pub fn pop_left(&mut Self) -> Option<I>","parent":null,"children":[],"decl_id":null,"docs":" Pop a value from the left stack\n","sig":null,"attributes":[{"value":"/ Pop a value from the left stack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":419144,"byte_end":419179,"line_start":79,"line_end":79,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":419644,"byte_end":419653,"line_start":96,"line_end":96,"column_start":12,"column_end":21},"name":"pop_right","qualname":"<DStack<I>>::pop_right","value":"pub fn pop_right(&mut Self) -> Option<I>","parent":null,"children":[],"decl_id":null,"docs":" Pop a value from the right stack\n","sig":null,"attributes":[{"value":"/ Pop a value from the right stack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":419596,"byte_end":419632,"line_start":95,"line_end":95,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":419968,"byte_end":419977,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"len_right","qualname":"<DStack<I>>::len_right","value":"pub fn len_right(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of right elements this double stack contains\n","sig":null,"attributes":[{"value":"/ Number of right elements this double stack contains","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":419901,"byte_end":419956,"line_start":106,"line_end":106,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420107,"byte_end":420118,"line_start":113,"line_end":113,"column_start":12,"column_end":23},"name":"clear_right","qualname":"<DStack<I>>::clear_right","value":"pub fn clear_right(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the right stack\n","sig":null,"attributes":[{"value":"/ Clear the right stack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420070,"byte_end":420095,"line_start":112,"line_end":112,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420224,"byte_end":420234,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"clear_left","qualname":"<DStack<I>>::clear_left","value":"pub fn clear_left(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the left stack\n","sig":null,"attributes":[{"value":"/ Clear the left stack","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420188,"byte_end":420212,"line_start":117,"line_end":117,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420359,"byte_end":420369,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"iter_right","qualname":"<DStack<I>>::iter_right","value":"pub fn iter_right(&Self) -> slice::Iter<, I>","parent":null,"children":[],"decl_id":null,"docs":" Iterates along the right stack without removing items\n","sig":null,"attributes":[{"value":"/ Iterates along the right stack without removing items","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420290,"byte_end":420347,"line_start":122,"line_end":122,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420525,"byte_end":420543,"line_start":128,"line_end":128,"column_start":12,"column_end":30},"name":"push_left_on_right","qualname":"<DStack<I>>::push_left_on_right","value":"pub fn push_left_on_right(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Push the values of the left stack onto the right stack.\n","sig":null,"attributes":[{"value":"/ Push the values of the left stack onto the right stack.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420454,"byte_end":420513,"line_start":127,"line_end":127,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420731,"byte_end":420749,"line_start":135,"line_end":135,"column_start":12,"column_end":30},"name":"push_right_on_left","qualname":"<DStack<I>>::push_right_on_left","value":"pub fn push_right_on_left(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Push the values of the right stack onto the left stack.\n","sig":null,"attributes":[{"value":"/ Push the values of the right stack onto the left stack.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420660,"byte_end":420719,"line_start":134,"line_end":134,"column_start":5,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":2831},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420921,"byte_end":420938,"line_start":143,"line_end":143,"column_start":8,"column_end":25},"name":"extract_stack_val","qualname":"::stack::extract_stack_val","value":"pub fn extract_stack_val<I>(&StackVal<I>) -> &I","parent":null,"children":[],"decl_id":null,"docs":" Enable extraction of stack val from iterators\n","sig":null,"attributes":[{"value":"/ Enable extraction of stack val from iterators","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":420864,"byte_end":420913,"line_start":142,"line_end":142,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":2833},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2373,"byte_end":2376,"line_start":89,"line_end":89,"column_start":10,"column_end":13},"name":"Ix1","qualname":"::Ix1","value":"ndarray::Ix1","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2834},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2402,"byte_end":2405,"line_start":90,"line_end":90,"column_start":10,"column_end":13},"name":"Ix2","qualname":"::Ix2","value":"ndarray::Ix2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3002},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3485,"byte_end":3488,"line_start":124,"line_end":124,"column_start":9,"column_end":12},"name":"vec","qualname":"::vec","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3007},{"krate":0,"index":3010},{"krate":0,"index":3013},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3020},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3026},{"krate":0,"index":3029},{"krate":0,"index":3032},{"krate":0,"index":3035},{"krate":0,"index":3038}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3054},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4014,"byte_end":4019,"line_start":140,"line_end":140,"column_start":10,"column_end":15},"name":"Shape","qualname":"::Shape","value":"(usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The shape of a matrix. This a 2-tuple with the first element indicating\n the number of rows, and the second element indicating the number of\n columns.\n","sig":null,"attributes":[{"value":"/ The shape of a matrix. This a 2-tuple with the first element indicating","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3844,"byte_end":3919,"line_start":137,"line_end":137,"column_start":1,"column_end":76}},{"value":"/ the number of rows, and the second element indicating the number of","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3920,"byte_end":3991,"line_start":138,"line_end":138,"column_start":1,"column_end":72}},{"value":"/ columns.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":3992,"byte_end":4004,"line_start":139,"line_end":139,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3913},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4216,"byte_end":4229,"line_start":145,"line_end":145,"column_start":5,"column_end":18},"name":"CheckSymmetry","qualname":"::SymmetryCheck::CheckSymmetry","value":"SymmetryCheck::CheckSymmetry","parent":{"krate":0,"index":3912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3915},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4235,"byte_end":4252,"line_start":146,"line_end":146,"column_start":5,"column_end":22},"name":"DontCheckSymmetry","qualname":"::SymmetryCheck::DontCheckSymmetry","value":"SymmetryCheck::DontCheckSymmetry","parent":{"krate":0,"index":3912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3912},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4196,"byte_end":4209,"line_start":144,"line_end":144,"column_start":10,"column_end":23},"name":"SymmetryCheck","qualname":"::SymmetryCheck","value":"pub enum SymmetryCheck { CheckSymmetry, DontCheckSymmetry, }","parent":null,"children":[{"krate":0,"index":3913},{"krate":0,"index":3915}],"decl_id":null,"docs":" Configuration enum to ask for symmetry checks in algorithms\n","sig":null,"attributes":[{"value":"/ Configuration enum to ask for symmetry checks in algorithms","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4078,"byte_end":4141,"line_start":142,"line_end":142,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3929},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4427,"byte_end":4436,"line_start":153,"line_end":153,"column_start":5,"column_end":14},"name":"CheckPerm","qualname":"::PermutationCheck::CheckPerm","value":"PermutationCheck::CheckPerm","parent":{"krate":0,"index":3928},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3931},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4442,"byte_end":4455,"line_start":154,"line_end":154,"column_start":5,"column_end":18},"name":"DontCheckPerm","qualname":"::PermutationCheck::DontCheckPerm","value":"PermutationCheck::DontCheckPerm","parent":{"krate":0,"index":3928},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3928},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4404,"byte_end":4420,"line_start":152,"line_end":152,"column_start":10,"column_end":26},"name":"PermutationCheck","qualname":"::PermutationCheck","value":"pub enum PermutationCheck { CheckPerm, DontCheckPerm, }","parent":null,"children":[{"krate":0,"index":3929},{"krate":0,"index":3931}],"decl_id":null,"docs":" Configuration enum to ask for permutation checks in algorithms\n","sig":null,"attributes":[{"value":"/ Configuration enum to ask for permutation checks in algorithms","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4283,"byte_end":4349,"line_start":150,"line_end":150,"column_start":1,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3945},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4657,"byte_end":4668,"line_start":162,"line_end":162,"column_start":5,"column_end":16},"name":"NoReduction","qualname":"::FillInReduction::NoReduction","value":"FillInReduction::NoReduction","parent":{"krate":0,"index":3944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3947},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4674,"byte_end":4693,"line_start":163,"line_end":163,"column_start":5,"column_end":24},"name":"ReverseCuthillMcKee","qualname":"::FillInReduction::ReverseCuthillMcKee","value":"FillInReduction::ReverseCuthillMcKee","parent":{"krate":0,"index":3944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3949},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4741,"byte_end":4756,"line_start":165,"line_end":165,"column_start":5,"column_end":20},"name":"CAMDSuiteSparse","qualname":"::FillInReduction::CAMDSuiteSparse","value":"FillInReduction::CAMDSuiteSparse","parent":{"krate":0,"index":3944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: upper_case_acronyms)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4699,"byte_end":4736,"line_start":164,"line_end":164,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":3944},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4635,"byte_end":4650,"line_start":161,"line_end":161,"column_start":10,"column_end":25},"name":"FillInReduction","qualname":"::FillInReduction","value":"pub enum FillInReduction {\n    NoReduction,\n    ReverseCuthillMcKee,\n    CAMDSuiteSparse,\n}","parent":null,"children":[{"krate":0,"index":3945},{"krate":0,"index":3947},{"krate":0,"index":3949}],"decl_id":null,"docs":" The different kinds of fill-in-reduction algorithms supported by sprs\n","sig":null,"attributes":[{"value":"/ The different kinds of fill-in-reduction algorithms supported by sprs","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4489,"byte_end":4562,"line_start":158,"line_end":158,"column_start":1,"column_end":74}},{"value":"non_exhaustive","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":4608,"byte_end":4625,"line_start":160,"line_end":160,"column_start":1,"column_end":18}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":6031,"byte_end":6037,"line_start":14,"line_end":14,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":6150,"byte_end":6156,"line_start":22,"line_end":22,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":8288,"byte_end":8291,"line_start":97,"line_end":97,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":9465,"byte_end":9474,"line_start":163,"line_end":163,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11757,"byte_end":11760,"line_start":269,"line_end":269,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12075,"byte_end":12084,"line_start":283,"line_end":283,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12679,"byte_end":12682,"line_start":311,"line_end":311,"column_start":24,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12851,"byte_end":12860,"line_start":315,"line_end":315,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13459,"byte_end":13473,"line_start":18,"line_end":18,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14274,"byte_end":14288,"line_start":44,"line_end":44,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14471,"byte_end":14485,"line_start":50,"line_end":50,"column_start":28,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":15008,"byte_end":15019,"line_start":73,"line_end":73,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":15967,"byte_end":15978,"line_start":101,"line_end":101,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16342,"byte_end":16351,"line_start":113,"line_end":113,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16458,"byte_end":16467,"line_start":119,"line_end":119,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16568,"byte_end":16577,"line_start":125,"line_end":125,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16852,"byte_end":16861,"line_start":134,"line_end":134,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21097,"byte_end":21104,"line_start":25,"line_end":25,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21415,"byte_end":21422,"line_start":36,"line_end":36,"column_start":16,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21452,"byte_end":21459,"line_start":38,"line_end":38,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21550,"byte_end":21557,"line_start":44,"line_end":44,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41727,"byte_end":41728,"line_start":21,"line_end":21,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44500,"byte_end":44505,"line_start":12,"line_end":12,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44666,"byte_end":44675,"line_start":22,"line_end":22,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44826,"byte_end":44833,"line_start":32,"line_end":32,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44985,"byte_end":44994,"line_start":42,"line_end":42,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":45129,"byte_end":45143,"line_start":52,"line_end":52,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":45314,"byte_end":45330,"line_start":62,"line_end":62,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84585,"byte_end":84594,"line_start":17,"line_end":17,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":85244,"byte_end":85253,"line_start":42,"line_end":42,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96545,"byte_end":96562,"line_start":48,"line_end":48,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97681,"byte_end":97687,"line_start":100,"line_end":100,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":98991,"byte_end":99000,"line_start":140,"line_end":140,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":104111,"byte_end":104120,"line_start":305,"line_end":305,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107267,"byte_end":107273,"line_start":405,"line_end":405,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116075,"byte_end":116085,"line_start":668,"line_end":668,"column_start":5,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117917,"byte_end":117926,"line_start":720,"line_end":720,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1045},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":138356,"byte_end":138365,"line_start":1315,"line_end":1315,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140092,"byte_end":140098,"line_start":1374,"line_end":1374,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141002,"byte_end":141011,"line_start":1410,"line_end":1410,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1123},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147215,"byte_end":147224,"line_start":1582,"line_end":1582,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":152390,"byte_end":152399,"line_start":1745,"line_end":1745,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":152895,"byte_end":152904,"line_start":1762,"line_end":1762,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":158932,"byte_end":158941,"line_start":1963,"line_end":1963,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":160810,"byte_end":160819,"line_start":2014,"line_end":2014,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":162580,"byte_end":162589,"line_start":2073,"line_end":2073,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":163058,"byte_end":163067,"line_start":2091,"line_end":2091,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":163448,"byte_end":163457,"line_start":2109,"line_end":2109,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":163830,"byte_end":163839,"line_start":2125,"line_end":2125,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":164201,"byte_end":164210,"line_start":2142,"line_end":2142,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":164560,"byte_end":164569,"line_start":2156,"line_end":2156,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":165762,"byte_end":165772,"line_start":2217,"line_end":2217,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":198663,"byte_end":198673,"line_start":32,"line_end":32,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1371},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":209744,"byte_end":209750,"line_start":374,"line_end":374,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":210998,"byte_end":211008,"line_start":407,"line_end":407,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1421},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":211855,"byte_end":211865,"line_start":432,"line_end":432,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222543,"byte_end":222550,"line_start":21,"line_end":21,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223295,"byte_end":223302,"line_start":53,"line_end":53,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":224344,"byte_end":224351,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226093,"byte_end":226097,"line_start":45,"line_end":45,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226795,"byte_end":226808,"line_start":70,"line_end":70,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227682,"byte_end":227698,"line_start":100,"line_end":100,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1545},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":232783,"byte_end":232799,"line_start":219,"line_end":219,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236422,"byte_end":236429,"line_start":314,"line_end":314,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236642,"byte_end":236649,"line_start":322,"line_end":322,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238117,"byte_end":238125,"line_start":365,"line_end":365,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238668,"byte_end":238676,"line_start":378,"line_end":378,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266882,"byte_end":266892,"line_start":51,"line_end":51,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":267364,"byte_end":267375,"line_start":69,"line_end":69,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1747},{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":268419,"byte_end":268430,"line_start":109,"line_end":109,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":273186,"byte_end":273197,"line_start":280,"line_end":280,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299099,"byte_end":299108,"line_start":9,"line_end":9,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299565,"byte_end":299574,"line_start":23,"line_end":23,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1935}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":300675,"byte_end":300685,"line_start":56,"line_end":56,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1943}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":330118,"byte_end":330129,"line_start":35,"line_end":35,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":330385,"byte_end":330395,"line_start":46,"line_end":46,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331080,"byte_end":331087,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333891,"byte_end":333901,"line_start":180,"line_end":180,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336683,"byte_end":336693,"line_start":286,"line_end":286,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":337236,"byte_end":337246,"line_start":304,"line_end":304,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":348524,"byte_end":348534,"line_start":10,"line_end":10,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349117,"byte_end":349127,"line_start":32,"line_end":32,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350583,"byte_end":350593,"line_start":102,"line_end":102,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2203}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356090,"byte_end":356099,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356204,"byte_end":356205,"line_start":66,"line_end":66,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2352}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356797,"byte_end":356811,"line_start":90,"line_end":90,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2376}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":357182,"byte_end":357200,"line_start":104,"line_end":104,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":357655,"byte_end":357672,"line_start":121,"line_end":121,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360481,"byte_end":360490,"line_start":205,"line_end":205,"column_start":39,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360551,"byte_end":360565,"line_start":207,"line_end":207,"column_start":54,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361667,"byte_end":361677,"line_start":246,"line_end":246,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":364446,"byte_end":364454,"line_start":353,"line_end":353,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366373,"byte_end":366382,"line_start":405,"line_end":405,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2482},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369987,"byte_end":369996,"line_start":526,"line_end":526,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2492}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370956,"byte_end":370962,"line_start":559,"line_end":559,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372557,"byte_end":372566,"line_start":607,"line_end":607,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2533},{"krate":0,"index":2539},{"krate":0,"index":2543},{"krate":0,"index":2546},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2558}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":384719,"byte_end":384728,"line_start":1000,"line_end":1000,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2571},{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386542,"byte_end":386552,"line_start":1065,"line_end":1065,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2579},{"krate":0,"index":2581}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":388683,"byte_end":388692,"line_start":1135,"line_end":1135,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2618},{"krate":0,"index":2619}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":389162,"byte_end":389171,"line_start":1154,"line_end":1154,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2631},{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":391130,"byte_end":391136,"line_start":1229,"line_end":1229,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2679},{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":391428,"byte_end":391437,"line_start":1245,"line_end":1245,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2686}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":391791,"byte_end":391800,"line_start":1260,"line_end":1260,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2693}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392135,"byte_end":392144,"line_start":1274,"line_end":1274,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2699},{"krate":0,"index":2700}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392368,"byte_end":392377,"line_start":1286,"line_end":1286,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2705}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392598,"byte_end":392607,"line_start":1296,"line_end":1296,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2710},{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392873,"byte_end":392882,"line_start":1309,"line_end":1309,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2716}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":393130,"byte_end":393136,"line_start":1320,"line_end":1320,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2721},{"krate":0,"index":2722}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":393569,"byte_end":393575,"line_start":1341,"line_end":1341,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2731}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":393812,"byte_end":393818,"line_start":1352,"line_end":1352,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2736}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394046,"byte_end":394052,"line_start":1363,"line_end":1363,"column_start":48,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394210,"byte_end":394216,"line_start":1371,"line_end":1371,"column_start":45,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394374,"byte_end":394380,"line_start":1379,"line_end":1379,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2748}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394749,"byte_end":394755,"line_start":1393,"line_end":1393,"column_start":49,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394929,"byte_end":394935,"line_start":1401,"line_end":1401,"column_start":43,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":395109,"byte_end":395115,"line_start":1409,"line_end":1409,"column_start":44,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":395296,"byte_end":395302,"line_start":1417,"line_end":1417,"column_start":51,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":414204,"byte_end":414223,"line_start":21,"line_end":21,"column_start":39,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417800,"byte_end":417808,"line_start":24,"line_end":24,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2813}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417892,"byte_end":417898,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2214,"byte_end":2227,"line_start":78,"line_end":78,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2255,"byte_end":2261,"line_start":80,"line_end":80,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":175}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2271,"byte_end":2279,"line_start":81,"line_end":81,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":193}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2289,"byte_end":2291,"line_start":82,"line_end":82,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":218}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2314,"byte_end":2323,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":310}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":61514,"byte_end":61519,"line_start":415,"line_end":415,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":558}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":61618,"byte_end":61624,"line_start":421,"line_end":421,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1455}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":221439,"byte_end":221444,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1466}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":221454,"byte_end":221462,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1494}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg.rs","byte_start":221472,"byte_end":221480,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1604}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":61655,"byte_end":61659,"line_start":423,"line_end":423,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1785}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":61686,"byte_end":61690,"line_start":425,"line_end":425,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1946}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":61700,"byte_end":61712,"line_start":426,"line_end":426,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1992}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse.rs","byte_start":61811,"byte_end":61815,"line_start":432,"line_end":432,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2766}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/lib.rs","byte_start":2356,"byte_end":2361,"line_start":87,"line_end":87,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2804}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":6031,"byte_end":6037,"line_start":14,"line_end":14,"column_start":19,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3057},"to":{"krate":2,"index":3054}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/array_backend.rs","byte_start":6150,"byte_end":6156,"line_start":22,"line_end":22,"column_start":22,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3057},"to":{"krate":2,"index":3067}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":6580,"byte_end":6586,"line_start":10,"line_end":10,"column_start":30,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":147},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":8288,"byte_end":8291,"line_start":97,"line_end":97,"column_start":39,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":6772},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":9465,"byte_end":9474,"line_start":163,"line_end":163,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":19,"index":4055},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11175,"byte_end":11186,"line_start":246,"line_end":246,"column_start":27,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":120}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":11757,"byte_end":11760,"line_start":269,"line_end":269,"column_start":42,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":6772},"to":{"krate":0,"index":120}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12075,"byte_end":12084,"line_start":283,"line_end":283,"column_start":31,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":19,"index":4055},"to":{"krate":0,"index":120}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12679,"byte_end":12682,"line_start":311,"line_end":311,"column_start":24,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":6772},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/dense_vector.rs","byte_start":12851,"byte_end":12860,"line_start":315,"line_end":315,"column_start":22,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":19,"index":4055},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":13459,"byte_end":13473,"line_start":18,"line_end":18,"column_start":6,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14274,"byte_end":14288,"line_start":44,"line_end":44,"column_start":28,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3069},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":14471,"byte_end":14485,"line_start":50,"line_end":50,"column_start":28,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3069},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":15008,"byte_end":15019,"line_start":73,"line_end":73,"column_start":28,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3127},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":15967,"byte_end":15978,"line_start":101,"line_end":101,"column_start":28,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3127},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16342,"byte_end":16351,"line_start":113,"line_end":113,"column_start":31,"column_end":40},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3148},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16458,"byte_end":16467,"line_start":119,"line_end":119,"column_start":28,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3148},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16568,"byte_end":16577,"line_start":125,"line_end":125,"column_start":28,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3148},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/errors.rs","byte_start":16852,"byte_end":16861,"line_start":134,"line_end":134,"column_start":28,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3148},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17510,"byte_end":17515,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":8805},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17518,"byte_end":17525,"line_start":19,"line_end":19,"column_start":13,"column_end":20},"kind":"SuperTrait","from":{"krate":21,"index":554},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17528,"byte_end":17537,"line_start":19,"line_end":19,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2930},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17546,"byte_end":17553,"line_start":19,"line_end":19,"column_start":41,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2810},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17556,"byte_end":17560,"line_start":19,"line_end":19,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2832},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/indexing.rs","byte_start":17563,"byte_end":17567,"line_start":19,"line_end":19,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":2844},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21097,"byte_end":21104,"line_start":25,"line_end":25,"column_start":23,"column_end":30},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3226},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21415,"byte_end":21422,"line_start":36,"line_end":36,"column_start":16,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3226},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21452,"byte_end":21459,"line_start":38,"line_end":38,"column_start":26,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3226},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/io.rs","byte_start":21550,"byte_end":21557,"line_start":44,"line_end":44,"column_start":20,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3226},"to":{"krate":2,"index":2487}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/mul_acc.rs","byte_start":41727,"byte_end":41728,"line_start":21,"line_end":21,"column_start":32,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":306},"to":{"krate":0,"index":301}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44500,"byte_end":44505,"line_start":12,"line_end":12,"column_start":26,"column_end":31},"kind":{"Impl":{"id":37}},"from":{"krate":2,"index":38304},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44666,"byte_end":44675,"line_start":22,"line_end":22,"column_start":26,"column_end":35},"kind":{"Impl":{"id":38}},"from":{"krate":2,"index":38329},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44826,"byte_end":44833,"line_start":32,"line_end":32,"column_start":26,"column_end":33},"kind":{"Impl":{"id":39}},"from":{"krate":2,"index":38350},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":44985,"byte_end":44994,"line_start":42,"line_end":42,"column_start":26,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":2,"index":38288},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":45129,"byte_end":45143,"line_start":52,"line_end":52,"column_start":26,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":2,"index":38373},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/range.rs","byte_start":45314,"byte_end":45330,"line_start":62,"line_end":62,"column_start":26,"column_end":42},"kind":{"Impl":{"id":42}},"from":{"krate":2,"index":38396},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":84585,"byte_end":84594,"line_start":17,"line_end":17,"column_start":9,"column_end":18},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3311},"to":{"krate":0,"index":746}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/compressed.rs","byte_start":85244,"byte_end":85253,"line_start":42,"line_end":42,"column_start":9,"column_end":18},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3387},"to":{"krate":0,"index":761}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":96545,"byte_end":96562,"line_start":48,"line_end":48,"column_start":6,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":97681,"byte_end":97687,"line_start":100,"line_end":100,"column_start":35,"column_end":41},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":943},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":98991,"byte_end":99000,"line_start":140,"line_end":140,"column_start":5,"column_end":14},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":104111,"byte_end":104120,"line_start":305,"line_end":305,"column_start":5,"column_end":14},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":107267,"byte_end":107273,"line_start":405,"line_end":405,"column_start":36,"column_end":42},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":116075,"byte_end":116085,"line_start":668,"line_end":668,"column_start":5,"column_end":15},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":117917,"byte_end":117926,"line_start":720,"line_end":720,"column_start":5,"column_end":14},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":138356,"byte_end":138365,"line_start":1315,"line_end":1315,"column_start":5,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":140092,"byte_end":140098,"line_start":1374,"line_end":1374,"column_start":18,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":141002,"byte_end":141011,"line_start":1410,"line_end":1410,"column_start":5,"column_end":14},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":147215,"byte_end":147224,"line_start":1582,"line_end":1582,"column_start":5,"column_end":14},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":152390,"byte_end":152399,"line_start":1745,"line_end":1745,"column_start":9,"column_end":18},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3311},"to":{"krate":2,"index":2938}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":152895,"byte_end":152904,"line_start":1762,"line_end":1762,"column_start":9,"column_end":18},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3311},"to":{"krate":2,"index":2942}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":158932,"byte_end":158941,"line_start":1963,"line_end":1963,"column_start":9,"column_end":18},"kind":{"Impl":{"id":58}},"from":{"krate":19,"index":4055},"to":{"krate":19,"index":4915}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":160810,"byte_end":160819,"line_start":2014,"line_end":2014,"column_start":9,"column_end":18},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3311},"to":{"krate":19,"index":4915}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":162580,"byte_end":162589,"line_start":2073,"line_end":2073,"column_start":9,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3311},"to":{"krate":19,"index":4915}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":163058,"byte_end":163067,"line_start":2091,"line_end":2091,"column_start":9,"column_end":18},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3311},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":163448,"byte_end":163457,"line_start":2109,"line_end":2109,"column_start":9,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3311},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":163830,"byte_end":163839,"line_start":2125,"line_end":2125,"column_start":9,"column_end":18},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3311},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":164201,"byte_end":164210,"line_start":2142,"line_end":2142,"column_start":9,"column_end":18},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3311},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":164560,"byte_end":164569,"line_start":2156,"line_end":2156,"column_start":45,"column_end":54},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3311},"to":{"krate":0,"index":531}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/csmat.rs","byte_start":165762,"byte_end":165772,"line_start":2217,"line_end":2217,"column_start":39,"column_end":49},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":368},"to":{"krate":2,"index":7070}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":198663,"byte_end":198673,"line_start":32,"line_end":32,"column_start":21,"column_end":31},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":209744,"byte_end":209750,"line_start":374,"line_end":374,"column_start":21,"column_end":27},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1363},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":210998,"byte_end":211008,"line_start":407,"line_end":407,"column_start":25,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/indptr.rs","byte_start":211855,"byte_end":211865,"line_start":432,"line_end":432,"column_start":9,"column_end":19},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3652},"to":{"krate":2,"index":2487}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":222543,"byte_end":222550,"line_start":21,"line_end":21,"column_start":35,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":223295,"byte_end":223302,"line_start":53,"line_end":53,"column_start":38,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/etree.rs","byte_start":224344,"byte_end":224351,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226093,"byte_end":226097,"line_start":45,"line_end":45,"column_start":47,"column_end":51},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1526},"to":{"krate":0,"index":1521}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":226795,"byte_end":226808,"line_start":70,"line_end":70,"column_start":47,"column_end":60},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1534},"to":{"krate":0,"index":1521}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":227682,"byte_end":227698,"line_start":100,"line_end":100,"column_start":10,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":232783,"byte_end":232799,"line_start":219,"line_end":219,"column_start":47,"column_end":63},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3738},"to":{"krate":0,"index":1521}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236422,"byte_end":236429,"line_start":314,"line_end":314,"column_start":22,"column_end":29},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":236642,"byte_end":236649,"line_start":322,"line_end":322,"column_start":46,"column_end":53},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3742},"to":{"krate":0,"index":1567}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238117,"byte_end":238125,"line_start":365,"line_end":365,"column_start":22,"column_end":30},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/linalg/ordering.rs","byte_start":238668,"byte_end":238676,"line_start":378,"line_end":378,"column_start":46,"column_end":54},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3749},"to":{"krate":0,"index":1567}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":266882,"byte_end":266892,"line_start":51,"line_end":51,"column_start":18,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":267364,"byte_end":267375,"line_start":69,"line_end":69,"column_start":22,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":268419,"byte_end":268430,"line_start":109,"line_end":109,"column_start":30,"column_end":41},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/permutation.rs","byte_start":273186,"byte_end":273197,"line_start":280,"line_end":280,"column_start":35,"column_end":46},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3774},"to":{"krate":2,"index":2909}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299099,"byte_end":299108,"line_start":9,"line_end":9,"column_start":5,"column_end":14},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":299565,"byte_end":299574,"line_start":23,"line_end":23,"column_start":5,"column_end":14},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/slicing.rs","byte_start":300675,"byte_end":300685,"line_start":56,"line_end":56,"column_start":29,"column_end":39},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":330118,"byte_end":330129,"line_start":35,"line_end":35,"column_start":33,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":426},"to":{"krate":2,"index":7070}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":330385,"byte_end":330395,"line_start":46,"line_end":46,"column_start":34,"column_end":44},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3442},"to":{"krate":0,"index":531}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":331080,"byte_end":331087,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":333891,"byte_end":333901,"line_start":180,"line_end":180,"column_start":41,"column_end":51},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":336683,"byte_end":336693,"line_start":286,"line_end":286,"column_start":25,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet.rs","byte_start":337236,"byte_end":337246,"line_start":304,"line_end":304,"column_start":41,"column_end":51},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":348524,"byte_end":348534,"line_start":10,"line_end":10,"column_start":41,"column_end":51},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3467},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":349117,"byte_end":349127,"line_start":32,"line_end":32,"column_start":28,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/triplet_iter.rs","byte_start":350583,"byte_end":350593,"line_start":102,"line_end":102,"column_start":28,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356090,"byte_end":356099,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3387},"to":{"krate":0,"index":2340}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356204,"byte_end":356205,"line_start":66,"line_end":66,"column_start":34,"column_end":35},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2351},"to":{"krate":0,"index":2340}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":356797,"byte_end":356811,"line_start":90,"line_end":90,"column_start":47,"column_end":61},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2353},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":357182,"byte_end":357200,"line_start":104,"line_end":104,"column_start":47,"column_end":65},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2358},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":357655,"byte_end":357672,"line_start":121,"line_end":121,"column_start":47,"column_end":64},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2364},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":358028,"byte_end":358036,"line_start":135,"line_end":135,"column_start":28,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":7233},"to":{"krate":0,"index":2392}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360481,"byte_end":360490,"line_start":205,"line_end":205,"column_start":39,"column_end":48},"kind":{"Impl":{"id":103}},"from":{"krate":2,"index":38877},"to":{"krate":0,"index":2392}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":360551,"byte_end":360565,"line_start":207,"line_end":207,"column_start":54,"column_end":68},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2353},"to":{"krate":0,"index":2392}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":361667,"byte_end":361677,"line_start":246,"line_end":246,"column_start":53,"column_end":63},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":407},"to":{"krate":0,"index":2409}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":364446,"byte_end":364454,"line_start":353,"line_end":353,"column_start":9,"column_end":17},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2445},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":366373,"byte_end":366382,"line_start":405,"line_end":405,"column_start":41,"column_end":50},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":369987,"byte_end":369996,"line_start":526,"line_end":526,"column_start":41,"column_end":50},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":370956,"byte_end":370962,"line_start":559,"line_end":559,"column_start":21,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":372557,"byte_end":372566,"line_start":607,"line_end":607,"column_start":32,"column_end":41},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":384719,"byte_end":384728,"line_start":1000,"line_end":1000,"column_start":36,"column_end":45},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":386542,"byte_end":386552,"line_start":1065,"line_end":1065,"column_start":34,"column_end":44},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":388683,"byte_end":388692,"line_start":1135,"line_end":1135,"column_start":9,"column_end":18},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":2899}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":389162,"byte_end":389171,"line_start":1154,"line_end":1154,"column_start":46,"column_end":55},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":2899}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":391130,"byte_end":391136,"line_start":1229,"line_end":1229,"column_start":20,"column_end":26},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":2926}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":391428,"byte_end":391437,"line_start":1245,"line_end":1245,"column_start":9,"column_end":18},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":2938}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":391791,"byte_end":391800,"line_start":1260,"line_end":1260,"column_start":9,"column_end":18},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":2942}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392135,"byte_end":392144,"line_start":1274,"line_end":1274,"column_start":34,"column_end":43},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392368,"byte_end":392377,"line_start":1286,"line_end":1286,"column_start":37,"column_end":46},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392598,"byte_end":392607,"line_start":1296,"line_end":1296,"column_start":37,"column_end":46},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":392873,"byte_end":392882,"line_start":1309,"line_end":1309,"column_start":40,"column_end":49},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":393130,"byte_end":393136,"line_start":1320,"line_end":1320,"column_start":21,"column_end":27},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":404},"to":{"krate":21,"index":497}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":393569,"byte_end":393575,"line_start":1341,"line_end":1341,"column_start":44,"column_end":50},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":194}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":393812,"byte_end":393818,"line_start":1352,"line_end":1352,"column_start":39,"column_end":45},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":503}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394046,"byte_end":394052,"line_start":1363,"line_end":1363,"column_start":48,"column_end":54},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":203}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394210,"byte_end":394216,"line_start":1371,"line_end":1371,"column_start":45,"column_end":51},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":211}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394374,"byte_end":394380,"line_start":1379,"line_end":1379,"column_start":46,"column_end":52},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":698}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394749,"byte_end":394755,"line_start":1393,"line_end":1393,"column_start":49,"column_end":55},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":198}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":394929,"byte_end":394935,"line_start":1401,"line_end":1401,"column_start":43,"column_end":49},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":208}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":395109,"byte_end":395115,"line_start":1409,"line_end":1409,"column_start":44,"column_end":50},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":216}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/vec.rs","byte_start":395296,"byte_end":395302,"line_start":1417,"line_end":1417,"column_start":51,"column_end":57},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":404},"to":{"krate":40,"index":219}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/sparse/visu.rs","byte_start":414204,"byte_end":414223,"line_start":21,"line_end":21,"column_start":39,"column_end":58},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417800,"byte_end":417808,"line_start":24,"line_end":24,"column_start":30,"column_end":38},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3885},"to":{"krate":2,"index":2810}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/sprs-0.11.0/src/stack.rs","byte_start":417892,"byte_end":417898,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3874},"to":{"krate":4294967295,"index":4294967295}}]}