{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4","program":"/home/viet1004/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ldpc","--edition=2018","/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=88fc3fdd1de03c66","-C","extra-filename=-88fc3fdd1de03c66","--out-dir","/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps","-L","dependency=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps","--extern","bigs=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libbigs-9d396fe26937f47c.rmeta","--extern","indexmap=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libindexmap-631e2fd770d46469.rmeta","--extern","itertools=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libitertools-ecf0ea490edb18fd.rmeta","--extern","pauli=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libpauli-005a741bb8eb2480.rmeta","--extern","rand=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/librand-8c0db71e543068bd.rmeta","--extern","serde=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libserde-5e0466a5ac1608e4.rmeta","--extern","serde_json=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libserde_json-0895eb5a0ecbdb48.rmeta","--extern","sparse_bin_mat=/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libsparse_bin_mat-fcdc95ee69a8a967.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/viet1004/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/viet1004/Documents/rust-project/LDPC/target/rls/debug/deps/libldpc-88fc3fdd1de03c66.rmeta"},"prelude":{"crate_id":{"name":"ldpc","disambiguator":[15792203131062782808,14713466847910379351]},"crate_root":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src","external_crates":[{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17255007459673538994,10308005785557406899]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1111923456158047016,16902919259693091653]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4206559302939301148,6164973543688958239]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5256837966271238037,14624209252821231605]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7550531950105187004,8150571798412653191]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15335445469838442753,9552689356239597613]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16502730494113453331,739642837530493346]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17056567370692029606,5237526203530126554]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14937216707889756020,8824175777475717960]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17577480307990758245,11665649631686256755]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10532265776820743552,12261914965731844528]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[15918998743166050901,5153345746580364318]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13847123446638245357,191099483651108540]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[8535951946701118478,247082403716274271]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8071155208203251459,9749237191716311885]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[10993643928529734294,4550819794165110057]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[3520407426629514955,6784388313453073637]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[947612539730288161,7851933247975044788]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":19,"id":{"name":"sparse_bin_mat","disambiguator":[2849238572142782650,11585374558481197211]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":20,"id":{"name":"is_sorted","disambiguator":[10783676067867099237,5828265237592850832]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":21,"id":{"name":"itertools","disambiguator":[15453165564885189177,15214918731916065742]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":22,"id":{"name":"either","disambiguator":[17324749041942919745,17631015617105789982]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":23,"id":{"name":"serde","disambiguator":[13109242471492608089,452597619827986489]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":24,"id":{"name":"serde_derive","disambiguator":[8635578226390175488,9019234005610694067]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":25,"id":{"name":"serde_json","disambiguator":[7271905730918139303,12632272216290900579]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":26,"id":{"name":"itoa","disambiguator":[1768660832640281218,13818066294710542729]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","num":27,"id":{"name":"ryu","disambiguator":[16262055849951961804,144775038649996040]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":28,"id":{"name":"itertools","disambiguator":[3120697074447509354,14485562666580428039]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":29,"id":{"name":"rand","disambiguator":[3235493059067788156,663510522545297367]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":30,"id":{"name":"rand_core","disambiguator":[16639219526003553847,7568293211599942284]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":31,"id":{"name":"getrandom","disambiguator":[8112019560025133051,16387225874179653621]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":32,"id":{"name":"cfg_if","disambiguator":[14479479994495409428,8356910125565977381]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":33,"id":{"name":"libc","disambiguator":[5895663687683051243,8327142491242069259]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":34,"id":{"name":"rand_chacha","disambiguator":[7268983528721802638,2188423889121572741]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","num":35,"id":{"name":"ppv_lite86","disambiguator":[8055425302582917647,12354383980052697485]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","num":36,"id":{"name":"bigs","disambiguator":[3620201982838465409,17895793086351962360]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","num":37,"id":{"name":"indexmap","disambiguator":[12278576817378274860,7583606473082036627]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","num":38,"id":{"name":"hashbrown","disambiguator":[2716237903113808319,4897606978161630421]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":39,"id":{"name":"pauli","disambiguator":[16247655212394808497,2585513007530508628]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":40,"id":{"name":"sprs","disambiguator":[15285541695228990678,12553925998392464462]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":41,"id":{"name":"num_traits","disambiguator":[11758907176880315391,16213556103891505502]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":42,"id":{"name":"num_complex","disambiguator":[7692247684801270035,6571990392729843509]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":43,"id":{"name":"ndarray","disambiguator":[12657185617759368927,9419672928521218665]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":44,"id":{"name":"rawpointer","disambiguator":[3799986900532594637,8288097924864637507]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":45,"id":{"name":"num_integer","disambiguator":[13674086256181150465,18138944901157845274]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":46,"id":{"name":"num_complex","disambiguator":[11067138844037193575,2017791548257536791]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":47,"id":{"name":"matrixmultiply","disambiguator":[11758799202881713347,4793832544119851213]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":48,"id":{"name":"rayon","disambiguator":[5271440316651910950,11836932132169411024]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":49,"id":{"name":"rayon_core","disambiguator":[5774679291067435048,2934900240586282169]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":50,"id":{"name":"crossbeam_channel","disambiguator":[8465700553016015246,9114169894263752434]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":51,"id":{"name":"crossbeam_utils","disambiguator":[14428130060524004346,17285594480345136009]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":52,"id":{"name":"lazy_static","disambiguator":[7443740534153032238,3826169474377493746]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":53,"id":{"name":"crossbeam_deque","disambiguator":[287171032585754357,14087725499859628601]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":54,"id":{"name":"crossbeam_epoch","disambiguator":[2969186238207198273,15785136064806407902]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":55,"id":{"name":"scopeguard","disambiguator":[7299377805955797458,7294591669980585985]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":56,"id":{"name":"memoffset","disambiguator":[6172854601445748818,16404203980590622838]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":57,"id":{"name":"num_cpus","disambiguator":[50032682568882379,13730995347470449892]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":58,"id":{"name":"smallvec","disambiguator":[12551364976179206675,737105964580816995]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":59,"id":{"name":"alga","disambiguator":[5430184361444617278,5770152281652302723]}},{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","num":60,"id":{"name":"approx","disambiguator":[14509074868442106239,2955486181328911951]}}],"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":0,"byte_end":578,"line_start":1,"line_end":17,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":19,"index":629},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":476,"byte_end":488,"line_start":13,"line_end":13,"column_start":26,"column_end":38},"alias_span":null,"name":"SparseBinMat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":435},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":490,"byte_end":504,"line_start":13,"line_end":13,"column_start":40,"column_end":54},"alias_span":null,"name":"SparseBinSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":434},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":506,"byte_end":518,"line_start":13,"line_end":13,"column_start":56,"column_end":68},"alias_span":null,"name":"SparseBinVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":452},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/mod.rs","byte_start":708,"byte_end":719,"line_start":2,"line_end":2,"column_start":15,"column_end":26},"alias_span":null,"name":"FlipDecoder","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":461},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","byte_start":638,"byte_end":642,"line_start":4,"line_end":4,"column_start":23,"column_end":27},"alias_span":null,"name":"Edge","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":479},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","byte_start":644,"byte_end":649,"line_start":4,"line_end":4,"column_start":29,"column_end":34},"alias_span":null,"name":"Edges","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":530},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","byte_start":651,"byte_end":661,"line_start":4,"line_end":4,"column_start":36,"column_end":46},"alias_span":null,"name":"LinearCode","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":488},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","byte_start":663,"byte_end":680,"line_start":4,"line_end":4,"column_start":48,"column_end":65},"alias_span":null,"name":"RandomRegularCode","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":599},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24547,"byte_end":24569,"line_start":14,"line_end":14,"column_start":35,"column_end":57},"alias_span":null,"name":"BinarySymmetricChannel","value":"","parent":{"krate":0,"index":195}},{"kind":"Use","ref_id":{"krate":0,"index":656},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24612,"byte_end":24629,"line_start":17,"line_end":17,"column_start":23,"column_end":40},"alias_span":null,"name":"DepolarizingNoise","value":"","parent":{"krate":0,"index":195}},{"kind":"Use","ref_id":{"krate":0,"index":735},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/mod.rs","byte_start":28554,"byte_end":28561,"line_start":2,"line_end":2,"column_start":15,"column_end":22},"alias_span":null,"name":"CssCode","value":"","parent":{"krate":0,"index":317}},{"kind":"Use","ref_id":{"krate":0,"index":807},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/mod.rs","byte_start":28563,"byte_end":28571,"line_start":2,"line_end":2,"column_start":24,"column_end":32},"alias_span":null,"name":"CssError","value":"","parent":{"krate":0,"index":317}},{"kind":"Use","ref_id":{"krate":0,"index":721},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/mod.rs","byte_start":28573,"byte_end":28584,"line_start":2,"line_end":2,"column_start":34,"column_end":45},"alias_span":null,"name":"CssSyndrome","value":"","parent":{"krate":0,"index":317}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":0,"byte_end":578,"line_start":1,"line_end":17,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":195},{"krate":0,"index":317}],"decl_id":null,"docs":" A toolbox for classical and quantum LDPC codes.","sig":null,"attributes":[{"value":"/ A toolbox for classical and quantum LDPC codes.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":0,"byte_end":51,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":52,"byte_end":55,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The crate is divided into three modules.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":56,"byte_end":100,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":101,"byte_end":104,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The [classical module](classical) contains a [linear code](classical::LinearCode)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":105,"byte_end":190,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"/ implementation and some decoders for it.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":191,"byte_end":235,"line_start":6,"line_end":6,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":236,"byte_end":239,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ For now, the [quantum module](quantum) contains only a [CSS code](quantum::CssCode)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":240,"byte_end":327,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/ implementation.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":328,"byte_end":347,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":348,"byte_end":351,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Finally, the [noise model module](noise_model) contains a generic trait for noise generation.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":352,"byte_end":449,"line_start":11,"line_end":11,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"classical","qualname":"::classical","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":49},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decoders","qualname":"::classical::decoders","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":46}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":452},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":965,"byte_end":976,"line_start":7,"line_end":7,"column_start":12,"column_end":23},"name":"FlipDecoder","qualname":"::classical::decoders::flip::FlipDecoder","value":"FlipDecoder {  }","parent":null,"children":[{"krate":0,"index":454}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":1046,"byte_end":1049,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<FlipDecoder<Code>>::new","value":"pub fn new(Code) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":1181,"byte_end":1187,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"decode","qualname":"<FlipDecoder<Code>>::decode","value":"pub fn decode<T>(&Self, &SparseBinVecBase<T>) -> SparseBinVec where\nT: std::ops::Deref<Target = [usize]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19261,"byte_end":19265,"line_start":5,"line_end":5,"column_start":12,"column_end":16},"name":"Edge","qualname":"::classical::linear_code::edges::Edge","value":"Edge { bit, check }","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":462},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19276,"byte_end":19279,"line_start":6,"line_end":6,"column_start":9,"column_end":12},"name":"bit","qualname":"::classical::linear_code::edges::Edge::bit","value":"usize","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":463},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19296,"byte_end":19301,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"check","qualname":"::classical::linear_code::edges::Edge::check","value":"usize","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19348,"byte_end":19353,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Edges","qualname":"::classical::linear_code::edges::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":481}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":488},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21188,"byte_end":21205,"line_start":12,"line_end":12,"column_start":12,"column_end":29},"name":"RandomRegularCode","qualname":"::classical::linear_code::random::RandomRegularCode","value":"RandomRegularCode {  }","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492}],"decl_id":null,"docs":" A random regular ldpc code sampler.","sig":null,"attributes":[{"value":"/ A random regular ldpc code sampler.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":20995,"byte_end":21034,"line_start":8,"line_end":8,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21035,"byte_end":21038,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`LinearCode::random_regular_code`](LinearCode::random_regular_code).","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21039,"byte_end":21116,"line_start":10,"line_end":10,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21407,"byte_end":21415,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"num_bits","qualname":"<RandomRegularCode>::num_bits","value":"pub fn num_bits(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Fixes the length of the code.","sig":null,"attributes":[{"value":"/ Fixes the length of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21332,"byte_end":21365,"line_start":20,"line_end":20,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21370,"byte_end":21373,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Default is 0.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21378,"byte_end":21395,"line_start":22,"line_end":22,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21602,"byte_end":21612,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"num_checks","qualname":"<RandomRegularCode>::num_checks","value":"pub fn num_checks(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Fixes the number of checks of the code.","sig":null,"attributes":[{"value":"/ Fixes the number of checks of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21517,"byte_end":21560,"line_start":28,"line_end":28,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21565,"byte_end":21568,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Default is 0.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21573,"byte_end":21590,"line_start":30,"line_end":30,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21827,"byte_end":21837,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"bit_degree","qualname":"<RandomRegularCode>::bit_degree","value":"pub fn bit_degree(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Fixes the number of checks connected to each bit of the code.","sig":null,"attributes":[{"value":"/ Fixes the number of checks connected to each bit of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21720,"byte_end":21785,"line_start":36,"line_end":36,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21790,"byte_end":21793,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Default is 0.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21798,"byte_end":21815,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22052,"byte_end":22064,"line_start":47,"line_end":47,"column_start":12,"column_end":24},"name":"check_degree","qualname":"<RandomRegularCode>::check_degree","value":"pub fn check_degree(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Fixes the number of bits connected to each check of the code.","sig":null,"attributes":[{"value":"/ Fixes the number of bits connected to each check of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21945,"byte_end":22010,"line_start":44,"line_end":44,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22015,"byte_end":22018,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Default is 0.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22023,"byte_end":22040,"line_start":46,"line_end":46,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22430,"byte_end":22441,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"sample_with","qualname":"<RandomRegularCode>::sample_with","value":"pub fn sample_with<R: Rng>(&Self, &mut R) -> Result<LinearCode, SamplingError>","parent":null,"children":[],"decl_id":null,"docs":" Samples a random code with the given random number generator\n or returns an error if the `n * b != m * c` where\n `n` is the number of bits, `b` the bit's degree, `m` the number of checks\n and `c` the check's degree.\n","sig":null,"attributes":[{"value":"/ Samples a random code with the given random number generator","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22178,"byte_end":22242,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"/ or returns an error if the `n * b != m * c` where","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22247,"byte_end":22300,"line_start":53,"line_end":53,"column_start":5,"column_end":58}},{"value":"/ `n` is the number of bits, `b` the bit's degree, `m` the number of checks","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22305,"byte_end":22382,"line_start":54,"line_end":54,"column_start":5,"column_end":82}},{"value":"/ and `c` the check's degree.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":22387,"byte_end":22418,"line_start":55,"line_end":55,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":23345,"byte_end":23358,"line_start":79,"line_end":79,"column_start":12,"column_end":25},"name":"SamplingError","qualname":"::classical::linear_code::random::SamplingError","value":"SamplingError {  }","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5720,"byte_end":5730,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"LinearCode","qualname":"::classical::linear_code::LinearCode","value":"LinearCode {  }","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"decl_id":null,"docs":" An implementation of linear codes optimized for LDPC codes.","sig":null,"attributes":[{"value":"/ An implementation of linear codes optimized for LDPC codes.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4243,"byte_end":4306,"line_start":13,"line_end":13,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4307,"byte_end":4310,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ A code can be define from either a parity check matrix `H`","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4311,"byte_end":4373,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/ or a generator matrix `G`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4374,"byte_end":4404,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ These matrices have the property that `H G^T = 0`.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4405,"byte_end":4459,"line_start":17,"line_end":17,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4460,"byte_end":4463,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4464,"byte_end":4477,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4478,"byte_end":4481,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is example shows 2 way to define the Hamming code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4482,"byte_end":4541,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4542,"byte_end":4545,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4546,"byte_end":4553,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4554,"byte_end":4592,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4593,"byte_end":4630,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4631,"byte_end":4679,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4680,"byte_end":4690,"line_start":27,"line_end":27,"column_start":1,"column_end":11}},{"value":"/     vec![vec![0, 1, 2, 4], vec![0, 1, 3, 5], vec![0, 2, 3, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4691,"byte_end":4757,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4758,"byte_end":4764,"line_start":29,"line_end":29,"column_start":1,"column_end":7}},{"value":"/ let generator_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4765,"byte_end":4810,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4811,"byte_end":4821,"line_start":31,"line_end":31,"column_start":1,"column_end":11}},{"value":"/     vec![vec![0, 4, 5, 6], vec![1, 4, 5], vec![2, 4, 6], vec![3, 5, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4822,"byte_end":4897,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4898,"byte_end":4904,"line_start":33,"line_end":33,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4905,"byte_end":4908,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let code_from_parity = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4909,"byte_end":4994,"line_start":35,"line_end":35,"column_start":1,"column_end":86}},{"value":"/ let code_from_generator = LinearCode::from_generator_matrix(generator_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":4995,"byte_end":5077,"line_start":36,"line_end":36,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5078,"byte_end":5081,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ assert!(code_from_parity.has_same_codespace(&code_from_generator));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5082,"byte_end":5153,"line_start":38,"line_end":38,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5154,"byte_end":5161,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5162,"byte_end":5165,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Comparison","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5166,"byte_end":5182,"line_start":41,"line_end":41,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5183,"byte_end":5186,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use the `==` if you want to know if 2 codes","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5187,"byte_end":5234,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"/ have exactly the same parity check matrix and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5235,"byte_end":5284,"line_start":44,"line_end":44,"column_start":1,"column_end":50}},{"value":"/ generator matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5285,"byte_end":5306,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/ However, since there is freedom in the choice of","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5307,"byte_end":5359,"line_start":46,"line_end":46,"column_start":1,"column_end":53}},{"value":"/ parity check matrix and generator matrix for the same code,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5360,"byte_end":5423,"line_start":47,"line_end":47,"column_start":1,"column_end":64}},{"value":"/ use [`has_the_same_codespace`](LinearCode::has_the_same_codespace) method","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5424,"byte_end":5501,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ if you want to know if 2 codes define the same codespace even","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5502,"byte_end":5567,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"/ if they may have different parity check matrix or generator matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5568,"byte_end":5639,"line_start":50,"line_end":50,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6407,"byte_end":6431,"line_start":75,"line_end":75,"column_start":12,"column_end":36},"name":"from_parity_check_matrix","qualname":"<LinearCode>::from_parity_check_matrix","value":"pub fn from_parity_check_matrix(SparseBinMat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new linear code from the given parity check matrix.","sig":null,"attributes":[{"value":"/ Creates a new linear code from the given parity check matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5868,"byte_end":5933,"line_start":59,"line_end":59,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5938,"byte_end":5941,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5946,"byte_end":5959,"line_start":61,"line_end":61,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5964,"byte_end":5967,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5972,"byte_end":5979,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5984,"byte_end":6022,"line_start":64,"line_end":64,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6027,"byte_end":6064,"line_start":65,"line_end":65,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6069,"byte_end":6072,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ // 3 bits repetition code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6077,"byte_end":6107,"line_start":67,"line_end":67,"column_start":5,"column_end":35}},{"value":"/ let matrix = SparseBinMat::new(3, vec![vec![0, 1], vec![1, 2]]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6112,"byte_end":6180,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"/ let code = LinearCode::from_parity_check_matrix(matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6185,"byte_end":6245,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6250,"byte_end":6253,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(code.len(), 3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6258,"byte_end":6288,"line_start":71,"line_end":71,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(code.dimension(), 1);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6293,"byte_end":6329,"line_start":72,"line_end":72,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(code.minimal_distance(), Some(3));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6334,"byte_end":6383,"line_start":73,"line_end":73,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6388,"byte_end":6395,"line_start":74,"line_end":74,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7257,"byte_end":7278,"line_start":101,"line_end":101,"column_start":12,"column_end":33},"name":"from_generator_matrix","qualname":"<LinearCode>::from_generator_matrix","value":"pub fn from_generator_matrix(SparseBinMat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new linear code from the given generator matrix.","sig":null,"attributes":[{"value":"/ Creates a new linear code from the given generator matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6733,"byte_end":6795,"line_start":85,"line_end":85,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6800,"byte_end":6803,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6808,"byte_end":6821,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6826,"byte_end":6829,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6834,"byte_end":6841,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6846,"byte_end":6884,"line_start":90,"line_end":90,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6889,"byte_end":6926,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6931,"byte_end":6934,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ // 3 bits repetition code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6939,"byte_end":6969,"line_start":93,"line_end":93,"column_start":5,"column_end":35}},{"value":"/ let matrix = SparseBinMat::new(3, vec![vec![0, 1, 2]]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":6974,"byte_end":7033,"line_start":94,"line_end":94,"column_start":5,"column_end":64}},{"value":"/ let code = LinearCode::from_generator_matrix(matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7038,"byte_end":7095,"line_start":95,"line_end":95,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7100,"byte_end":7103,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(code.len(), 3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7108,"byte_end":7138,"line_start":97,"line_end":97,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(code.dimension(), 1);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7143,"byte_end":7179,"line_start":98,"line_end":98,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(code.minimal_distance(), Some(3));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7184,"byte_end":7233,"line_start":99,"line_end":99,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7238,"byte_end":7245,"line_start":100,"line_end":100,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8013,"byte_end":8028,"line_start":124,"line_end":124,"column_start":12,"column_end":27},"name":"repetition_code","qualname":"<LinearCode>::repetition_code","value":"pub fn repetition_code(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a repetition code with the given length.","sig":null,"attributes":[{"value":"/ Returns a repetition code with the given length.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7577,"byte_end":7629,"line_start":111,"line_end":111,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7634,"byte_end":7637,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7642,"byte_end":7655,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7660,"byte_end":7663,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7668,"byte_end":7675,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7680,"byte_end":7718,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7723,"byte_end":7760,"line_start":117,"line_end":117,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7765,"byte_end":7768,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let matrix = SparseBinMat::new(3, vec![vec![0, 1], vec![1, 2]]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7773,"byte_end":7841,"line_start":119,"line_end":119,"column_start":5,"column_end":73}},{"value":"/ let code = LinearCode::from_parity_check_matrix(matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7846,"byte_end":7906,"line_start":120,"line_end":120,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7911,"byte_end":7914,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ assert!(code.has_same_codespace(&LinearCode::repetition_code(3)));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7919,"byte_end":7989,"line_start":122,"line_end":122,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":7994,"byte_end":8001,"line_start":123,"line_end":123,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8714,"byte_end":8726,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"hamming_code","qualname":"<LinearCode>::hamming_code","value":"pub fn hamming_code() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the Hamming code.","sig":null,"attributes":[{"value":"/ Returns the Hamming code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8240,"byte_end":8269,"line_start":130,"line_end":130,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8274,"byte_end":8277,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8282,"byte_end":8295,"line_start":132,"line_end":132,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8300,"byte_end":8303,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8308,"byte_end":8315,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8320,"byte_end":8358,"line_start":135,"line_end":135,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8363,"byte_end":8400,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8405,"byte_end":8408,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ let matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8413,"byte_end":8448,"line_start":138,"line_end":138,"column_start":5,"column_end":40}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8453,"byte_end":8463,"line_start":139,"line_end":139,"column_start":5,"column_end":15}},{"value":"/     vec![vec![3, 4, 5, 6], vec![1, 2, 5, 6], vec![0, 2, 4, 6]],","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8468,"byte_end":8535,"line_start":140,"line_end":140,"column_start":5,"column_end":72}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8540,"byte_end":8546,"line_start":141,"line_end":141,"column_start":5,"column_end":11}},{"value":"/ let code = LinearCode::from_parity_check_matrix(matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8551,"byte_end":8611,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8616,"byte_end":8619,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ assert!(code.has_same_codespace(&LinearCode::hamming_code()));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8624,"byte_end":8690,"line_start":144,"line_end":144,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8695,"byte_end":8702,"line_start":145,"line_end":145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9096,"byte_end":9101,"line_start":157,"line_end":157,"column_start":12,"column_end":17},"name":"empty","qualname":"<LinearCode>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a code of length 0 encoding 0 bits and without checks.","sig":null,"attributes":[{"value":"/ Returns a code of length 0 encoding 0 bits and without checks.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":8961,"byte_end":9027,"line_start":154,"line_end":154,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9032,"byte_end":9035,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful as a place holder.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9040,"byte_end":9084,"line_start":156,"line_end":156,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10078,"byte_end":10097,"line_start":187,"line_end":187,"column_start":12,"column_end":31},"name":"random_regular_code","qualname":"<LinearCode>::random_regular_code","value":"pub fn random_regular_code() -> RandomRegularCode","parent":null,"children":[],"decl_id":null,"docs":" Returns a builder for random LDPC codes with\n regular parity check matrix.","sig":null,"attributes":[{"value":"/ Returns a builder for random LDPC codes with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9216,"byte_end":9264,"line_start":162,"line_end":162,"column_start":5,"column_end":53}},{"value":"/ regular parity check matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9269,"byte_end":9301,"line_start":163,"line_end":163,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9306,"byte_end":9309,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ The [`sample_with`](RandomRegularCode::sample_with) method returns","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9314,"byte_end":9384,"line_start":165,"line_end":165,"column_start":5,"column_end":75}},{"value":"/ an error if the number of bits times the bit's degree is not equal","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9389,"byte_end":9459,"line_start":166,"line_end":166,"column_start":5,"column_end":75}},{"value":"/ to the number of checks times the bit check's degree.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9464,"byte_end":9521,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9526,"byte_end":9529,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9534,"byte_end":9547,"line_start":169,"line_end":169,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9552,"byte_end":9555,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9560,"byte_end":9567,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9572,"byte_end":9610,"line_start":172,"line_end":172,"column_start":5,"column_end":43}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9615,"byte_end":9640,"line_start":173,"line_end":173,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9645,"byte_end":9648,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let code = LinearCode::random_regular_code()","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9653,"byte_end":9701,"line_start":175,"line_end":175,"column_start":5,"column_end":53}},{"value":"/     .num_bits(20)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9706,"byte_end":9727,"line_start":176,"line_end":176,"column_start":5,"column_end":26}},{"value":"/     .num_checks(15)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9732,"byte_end":9755,"line_start":177,"line_end":177,"column_start":5,"column_end":28}},{"value":"/     .bit_degree(3)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9760,"byte_end":9782,"line_start":178,"line_end":178,"column_start":5,"column_end":27}},{"value":"/     .check_degree(4)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9787,"byte_end":9811,"line_start":179,"line_end":179,"column_start":5,"column_end":29}},{"value":"/     .sample_with(&mut thread_rng())","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9816,"byte_end":9855,"line_start":180,"line_end":180,"column_start":5,"column_end":44}},{"value":"/     .unwrap(); // 20 * 3 == 15 * 4","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9860,"byte_end":9898,"line_start":181,"line_end":181,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9903,"byte_end":9906,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(code.len(), 20);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9911,"byte_end":9942,"line_start":183,"line_end":183,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(code.num_checks(), 15);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9947,"byte_end":9985,"line_start":184,"line_end":184,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(code.parity_check_matrix().number_of_ones(), 60);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":9990,"byte_end":10054,"line_start":185,"line_end":185,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10059,"byte_end":10066,"line_start":186,"line_end":186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10231,"byte_end":10250,"line_start":192,"line_end":192,"column_start":12,"column_end":31},"name":"parity_check_matrix","qualname":"<LinearCode>::parity_check_matrix","value":"pub fn parity_check_matrix(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns the parity check matrix of the code.\n","sig":null,"attributes":[{"value":"/ Returns the parity check matrix of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10171,"byte_end":10219,"line_start":191,"line_end":191,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10523,"byte_end":10528,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"check","qualname":"<LinearCode>::check","value":"pub fn check(&Self, usize) -> Option<SparseBinSlice>","parent":null,"children":[],"decl_id":null,"docs":" Returns the check at the given index or\n None if the index is out of bound.","sig":null,"attributes":[{"value":"/ Returns the check at the given index or","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10322,"byte_end":10365,"line_start":196,"line_end":196,"column_start":5,"column_end":48}},{"value":"/ None if the index is out of bound.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10370,"byte_end":10408,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10413,"byte_end":10416,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ That is, this returns the row of the parity check matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10421,"byte_end":10481,"line_start":199,"line_end":199,"column_start":5,"column_end":65}},{"value":"/ with the given index.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10486,"byte_end":10511,"line_start":200,"line_end":200,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10690,"byte_end":10706,"line_start":206,"line_end":206,"column_start":12,"column_end":28},"name":"generator_matrix","qualname":"<LinearCode>::generator_matrix","value":"pub fn generator_matrix(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns the generator matrix of the code.\n","sig":null,"attributes":[{"value":"/ Returns the generator matrix of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10633,"byte_end":10678,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10977,"byte_end":10986,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"generator","qualname":"<LinearCode>::generator","value":"pub fn generator(&Self, usize) -> Option<SparseBinSlice>","parent":null,"children":[],"decl_id":null,"docs":" Returns the generator at the given index or\n None if the index is out of bound.","sig":null,"attributes":[{"value":"/ Returns the generator at the given index or","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10775,"byte_end":10822,"line_start":210,"line_end":210,"column_start":5,"column_end":52}},{"value":"/ None if the index is out of bound.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10827,"byte_end":10865,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10870,"byte_end":10873,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ That is, this returns the row of the generator matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10878,"byte_end":10935,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/ with the given index.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":10940,"byte_end":10965,"line_start":214,"line_end":214,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11197,"byte_end":11212,"line_start":221,"line_end":221,"column_start":12,"column_end":27},"name":"bit_adjacencies","qualname":"<LinearCode>::bit_adjacencies","value":"pub fn bit_adjacencies(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns a matrix where the value in row i\n correspond to the check connected to bit i.\n","sig":null,"attributes":[{"value":"/ Returns a matrix where the value in row i","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11088,"byte_end":11133,"line_start":219,"line_end":219,"column_start":5,"column_end":50}},{"value":"/ correspond to the check connected to bit i.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11138,"byte_end":11185,"line_start":220,"line_end":220,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11385,"byte_end":11407,"line_start":227,"line_end":227,"column_start":12,"column_end":34},"name":"checks_adjacent_to_bit","qualname":"<LinearCode>::checks_adjacent_to_bit","value":"pub fn checks_adjacent_to_bit(&Self, usize) -> Option<SparseBinSlice>","parent":null,"children":[],"decl_id":null,"docs":" Returns the checks adjacents to the given bit or\n None if the bit is out of bound.\n","sig":null,"attributes":[{"value":"/ Returns the checks adjacents to the given bit or","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11280,"byte_end":11332,"line_start":225,"line_end":225,"column_start":5,"column_end":57}},{"value":"/ None if the bit is out of bound.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11337,"byte_end":11373,"line_start":226,"line_end":226,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12463,"byte_end":12481,"line_start":257,"line_end":257,"column_start":12,"column_end":30},"name":"has_same_codespace","qualname":"<LinearCode>::has_same_codespace","value":"pub fn has_same_codespace(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if two code define the same codespace.","sig":null,"attributes":[{"value":"/ Checks if two code define the same codespace.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11504,"byte_end":11553,"line_start":231,"line_end":231,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11558,"byte_end":11561,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Two codes have the same codespace if all their codewords are the same.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11566,"byte_end":11640,"line_start":233,"line_end":233,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11645,"byte_end":11648,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11653,"byte_end":11666,"line_start":235,"line_end":235,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11671,"byte_end":11674,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11679,"byte_end":11686,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11691,"byte_end":11729,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11734,"byte_end":11771,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11776,"byte_end":11779,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ // The Hamming code","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11784,"byte_end":11807,"line_start":241,"line_end":241,"column_start":5,"column_end":28}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11812,"byte_end":11860,"line_start":242,"line_end":242,"column_start":5,"column_end":53}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11865,"byte_end":11875,"line_start":243,"line_end":243,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1, 2, 4], vec![0, 1, 3, 5], vec![0, 2, 3, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11880,"byte_end":11946,"line_start":244,"line_end":244,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11951,"byte_end":11957,"line_start":245,"line_end":245,"column_start":5,"column_end":11}},{"value":"/ let hamming_code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":11962,"byte_end":12043,"line_start":246,"line_end":246,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12048,"byte_end":12051,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ // Same but with the add the first check to the other two.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12056,"byte_end":12118,"line_start":248,"line_end":248,"column_start":5,"column_end":67}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12123,"byte_end":12171,"line_start":249,"line_end":249,"column_start":5,"column_end":53}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12176,"byte_end":12186,"line_start":250,"line_end":250,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1, 2, 4], vec![2, 3, 4, 5], vec![1, 3, 4, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12191,"byte_end":12257,"line_start":251,"line_end":251,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12262,"byte_end":12268,"line_start":252,"line_end":252,"column_start":5,"column_end":11}},{"value":"/ let other_hamming_code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12273,"byte_end":12360,"line_start":253,"line_end":253,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12365,"byte_end":12368,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert!(hamming_code.has_same_codespace(&other_hamming_code));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12373,"byte_end":12439,"line_start":255,"line_end":255,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12444,"byte_end":12451,"line_start":256,"line_end":256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12705,"byte_end":12708,"line_start":263,"line_end":263,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearCode>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the code.\n","sig":null,"attributes":[{"value":"/ Returns the number of bits in the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12650,"byte_end":12693,"line_start":262,"line_end":262,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12881,"byte_end":12891,"line_start":269,"line_end":269,"column_start":12,"column_end":22},"name":"num_checks","qualname":"<LinearCode>::num_checks","value":"pub fn num_checks(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows of the parity check matrix\n of the code.\n","sig":null,"attributes":[{"value":"/ Returns the number of rows of the parity check matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12791,"byte_end":12848,"line_start":267,"line_end":267,"column_start":5,"column_end":62}},{"value":"/ of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12853,"byte_end":12869,"line_start":268,"line_end":268,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13058,"byte_end":13072,"line_start":275,"line_end":275,"column_start":12,"column_end":26},"name":"num_generators","qualname":"<LinearCode>::num_generators","value":"pub fn num_generators(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows of the generator matrix\n of the code.\n","sig":null,"attributes":[{"value":"/ Returns the number of rows of the generator matrix","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":12971,"byte_end":13025,"line_start":273,"line_end":273,"column_start":5,"column_end":59}},{"value":"/ of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13030,"byte_end":13046,"line_start":274,"line_end":274,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13654,"byte_end":13663,"line_start":294,"line_end":294,"column_start":12,"column_end":21},"name":"dimension","qualname":"<LinearCode>::dimension","value":"pub fn dimension(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of linearly independent codewords.","sig":null,"attributes":[{"value":"/ Returns the number of linearly independent codewords.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13149,"byte_end":13206,"line_start":279,"line_end":279,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13211,"byte_end":13214,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13219,"byte_end":13232,"line_start":281,"line_end":281,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13237,"byte_end":13240,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13245,"byte_end":13252,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13257,"byte_end":13295,"line_start":284,"line_end":284,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13300,"byte_end":13337,"line_start":285,"line_end":285,"column_start":5,"column_end":42}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13342,"byte_end":13390,"line_start":286,"line_end":286,"column_start":5,"column_end":53}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13395,"byte_end":13405,"line_start":287,"line_end":287,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1, 2, 4], vec![0, 1, 3, 5], vec![0, 2, 3, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13410,"byte_end":13476,"line_start":288,"line_end":288,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13481,"byte_end":13487,"line_start":289,"line_end":289,"column_start":5,"column_end":11}},{"value":"/ let hamming_code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13492,"byte_end":13573,"line_start":290,"line_end":290,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13578,"byte_end":13581,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(hamming_code.dimension(), 4);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13586,"byte_end":13630,"line_start":292,"line_end":292,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13635,"byte_end":13642,"line_start":293,"line_end":293,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13983,"byte_end":13999,"line_start":305,"line_end":305,"column_start":12,"column_end":28},"name":"minimal_distance","qualname":"<LinearCode>::minimal_distance","value":"pub fn minimal_distance(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the weight of the smallest non trivial codeword\n or None if the code have no codeword.","sig":null,"attributes":[{"value":"/ Returns the weight of the smallest non trivial codeword","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13730,"byte_end":13789,"line_start":298,"line_end":298,"column_start":5,"column_end":64}},{"value":"/ or None if the code have no codeword.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13794,"byte_end":13835,"line_start":299,"line_end":299,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13840,"byte_end":13843,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13848,"byte_end":13861,"line_start":301,"line_end":301,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13866,"byte_end":13869,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ The execution time of this method scale exponentially with the","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13874,"byte_end":13940,"line_start":303,"line_end":303,"column_start":5,"column_end":71}},{"value":"/ dimension of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":13945,"byte_end":13971,"line_start":304,"line_end":304,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15755,"byte_end":15760,"line_start":351,"line_end":351,"column_start":12,"column_end":17},"name":"edges","qualname":"<LinearCode>::edges","value":"pub fn edges(&Self) -> Edges","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all edges of the Tanner graph associated with\n the parity check matrix of the code.","sig":null,"attributes":[{"value":"/ Returns an iterator over all edges of the Tanner graph associated with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14598,"byte_end":14672,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/ the parity check matrix of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14677,"byte_end":14717,"line_start":325,"line_end":325,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14722,"byte_end":14725,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ That is, this returns an iterator of over the coordinates (i, j) such","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14730,"byte_end":14803,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ that H_ij = 1 with H the parity check matrix.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14808,"byte_end":14857,"line_start":328,"line_end":328,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14862,"byte_end":14865,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14870,"byte_end":14883,"line_start":330,"line_end":330,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14888,"byte_end":14891,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14896,"byte_end":14903,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14908,"byte_end":14946,"line_start":333,"line_end":333,"column_start":5,"column_end":43}},{"value":"/ use ldpc::classical::Edge;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14951,"byte_end":14981,"line_start":334,"line_end":334,"column_start":5,"column_end":35}},{"value":"/ use sparse_bin_mat::{SparseBinMat, SparseBinVec};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":14986,"byte_end":15039,"line_start":335,"line_end":335,"column_start":5,"column_end":58}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15044,"byte_end":15092,"line_start":336,"line_end":336,"column_start":5,"column_end":53}},{"value":"/     4,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15097,"byte_end":15107,"line_start":337,"line_end":337,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1], vec![0, 3], vec![1, 2]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15112,"byte_end":15160,"line_start":338,"line_end":338,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15165,"byte_end":15171,"line_start":339,"line_end":339,"column_start":5,"column_end":11}},{"value":"/ let code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15176,"byte_end":15249,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ let mut edges = code.edges();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15254,"byte_end":15287,"line_start":341,"line_end":341,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15292,"byte_end":15295,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(edges.next(), Some(Edge { bit: 0, check: 0}));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15300,"byte_end":15361,"line_start":343,"line_end":343,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(edges.next(), Some(Edge { bit: 1, check: 0}));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15366,"byte_end":15427,"line_start":344,"line_end":344,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(edges.next(), Some(Edge { bit: 0, check: 1}));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15432,"byte_end":15493,"line_start":345,"line_end":345,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(edges.next(), Some(Edge { bit: 3, check: 1}));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15498,"byte_end":15559,"line_start":346,"line_end":346,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(edges.next(), Some(Edge { bit: 1, check: 2}));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15564,"byte_end":15625,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(edges.next(), Some(Edge { bit: 2, check: 2}));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15630,"byte_end":15691,"line_start":348,"line_end":348,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(edges.next(), None);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15696,"byte_end":15731,"line_start":349,"line_end":349,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15736,"byte_end":15743,"line_start":350,"line_end":350,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16612,"byte_end":16623,"line_start":378,"line_end":378,"column_start":12,"column_end":23},"name":"syndrome_of","qualname":"<LinearCode>::syndrome_of","value":"pub fn syndrome_of<T>(&Self, &SparseBinVecBase<T>) -> SparseBinVec where\nT: std::ops::Deref<Target = [usize]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the product of the parity check matrix with the given message","sig":null,"attributes":[{"value":"/ Returns the product of the parity check matrix with the given message","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15815,"byte_end":15888,"line_start":355,"line_end":355,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15893,"byte_end":15896,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15901,"byte_end":15914,"line_start":357,"line_end":357,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15919,"byte_end":15922,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15927,"byte_end":15934,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15939,"byte_end":15977,"line_start":360,"line_end":360,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::{SparseBinMat, SparseBinVec};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":15982,"byte_end":16035,"line_start":361,"line_end":361,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16040,"byte_end":16043,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16048,"byte_end":16096,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16101,"byte_end":16111,"line_start":364,"line_end":364,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1, 2, 4], vec![0, 1, 3, 5], vec![0, 2, 3, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16116,"byte_end":16182,"line_start":365,"line_end":365,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16187,"byte_end":16193,"line_start":366,"line_end":366,"column_start":5,"column_end":11}},{"value":"/ let hamming_code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16198,"byte_end":16279,"line_start":367,"line_end":367,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16284,"byte_end":16287,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ let message = SparseBinVec::new(7, vec![0, 2, 4]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16292,"byte_end":16346,"line_start":369,"line_end":369,"column_start":5,"column_end":59}},{"value":"/ let syndrome = SparseBinVec::new(3, vec![0, 1]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16351,"byte_end":16403,"line_start":370,"line_end":370,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16408,"byte_end":16411,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(hamming_code.syndrome_of(&message.as_view()), syndrome);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16416,"byte_end":16487,"line_start":372,"line_end":372,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16492,"byte_end":16499,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16504,"byte_end":16507,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16512,"byte_end":16523,"line_start":375,"line_end":375,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16528,"byte_end":16531,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ Panics if the message have a different length then the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":16536,"byte_end":16600,"line_start":377,"line_end":377,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17833,"byte_end":17845,"line_start":416,"line_end":416,"column_start":12,"column_end":24},"name":"has_codeword","qualname":"<LinearCode>::has_codeword","value":"pub fn has_codeword<T>(&Self, &SparseBinVecBase<T>) -> bool where\nT: std::ops::Deref<Target = [usize]>","parent":null,"children":[],"decl_id":null,"docs":" Checks if a message has zero syndrome.","sig":null,"attributes":[{"value":"/ Checks if a message has zero syndrome.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17017,"byte_end":17059,"line_start":392,"line_end":392,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17064,"byte_end":17067,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17072,"byte_end":17085,"line_start":394,"line_end":394,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17090,"byte_end":17093,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17098,"byte_end":17105,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17110,"byte_end":17148,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::{SparseBinMat, SparseBinVec};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17153,"byte_end":17206,"line_start":398,"line_end":398,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17211,"byte_end":17214,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17219,"byte_end":17267,"line_start":400,"line_end":400,"column_start":5,"column_end":53}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17272,"byte_end":17282,"line_start":401,"line_end":401,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1, 2, 4], vec![0, 1, 3, 5], vec![0, 2, 3, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17287,"byte_end":17353,"line_start":402,"line_end":402,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17358,"byte_end":17364,"line_start":403,"line_end":403,"column_start":5,"column_end":11}},{"value":"/ let hamming_code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17369,"byte_end":17450,"line_start":404,"line_end":404,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17455,"byte_end":17458,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let error = SparseBinVec::new(7, vec![0, 2, 4]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17463,"byte_end":17515,"line_start":406,"line_end":406,"column_start":5,"column_end":57}},{"value":"/ let codeword = SparseBinVec::new(7, vec![2, 3, 4, 5]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17520,"byte_end":17578,"line_start":407,"line_end":407,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17583,"byte_end":17586,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(hamming_code.has_codeword(&error), false);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17591,"byte_end":17648,"line_start":409,"line_end":409,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(hamming_code.has_codeword(&codeword), true);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17653,"byte_end":17712,"line_start":410,"line_end":410,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17717,"byte_end":17724,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17729,"byte_end":17732,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17737,"byte_end":17748,"line_start":413,"line_end":413,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17753,"byte_end":17756,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Panics if the message have a different length then code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":17761,"byte_end":17821,"line_start":415,"line_end":415,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18773,"byte_end":18785,"line_start":445,"line_end":445,"column_start":12,"column_end":24},"name":"random_error","qualname":"<LinearCode>::random_error","value":"pub fn random_error<N, R>(&Self, &N, &mut R) -> SparseBinVec where\nN: NoiseModel<Error = SparseBinVec>, R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Generates a random error with the given noise model.","sig":null,"attributes":[{"value":"/ Generates a random error with the given noise model.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18014,"byte_end":18070,"line_start":423,"line_end":423,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18075,"byte_end":18078,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18083,"byte_end":18096,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18101,"byte_end":18104,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18109,"byte_end":18116,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18121,"byte_end":18159,"line_start":428,"line_end":428,"column_start":5,"column_end":43}},{"value":"/ use sparse_bin_mat::SparseBinMat;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18164,"byte_end":18201,"line_start":429,"line_end":429,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18206,"byte_end":18209,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ use ldpc::noise_model::{BinarySymmetricChannel, Probability};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18214,"byte_end":18279,"line_start":431,"line_end":431,"column_start":5,"column_end":70}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18284,"byte_end":18309,"line_start":432,"line_end":432,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18314,"byte_end":18317,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ let parity_check_matrix = SparseBinMat::new(","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18322,"byte_end":18370,"line_start":434,"line_end":434,"column_start":5,"column_end":53}},{"value":"/     7,","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18375,"byte_end":18385,"line_start":435,"line_end":435,"column_start":5,"column_end":15}},{"value":"/     vec![vec![0, 1, 2, 4], vec![0, 1, 3, 5], vec![0, 2, 3, 6]]","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18390,"byte_end":18456,"line_start":436,"line_end":436,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18461,"byte_end":18467,"line_start":437,"line_end":437,"column_start":5,"column_end":11}},{"value":"/ let code = LinearCode::from_parity_check_matrix(parity_check_matrix);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18472,"byte_end":18545,"line_start":438,"line_end":438,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18550,"byte_end":18553,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let noise = BinarySymmetricChannel::with_probability(Probability::new(0.25));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18558,"byte_end":18639,"line_start":440,"line_end":440,"column_start":5,"column_end":86}},{"value":"/ let error = code.random_error(&noise, &mut thread_rng());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18644,"byte_end":18705,"line_start":441,"line_end":441,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18710,"byte_end":18713,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(error.len(), 7);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18718,"byte_end":18749,"line_start":443,"line_end":443,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18754,"byte_end":18761,"line_start":444,"line_end":444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":19043,"byte_end":19050,"line_start":454,"line_end":454,"column_start":12,"column_end":19},"name":"as_json","qualname":"<LinearCode>::as_json","value":"pub fn as_json(&Self) -> serde_json::Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the code as a json string.\n","sig":null,"attributes":[{"value":"/ Returns the code as a json string.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":18993,"byte_end":19031,"line_start":453,"line_end":453,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":195},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"noise_model","qualname":"::noise_model","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":310},{"krate":0,"index":313}],"decl_id":null,"docs":" Tools to generate random errors.","sig":null,"attributes":[{"value":"/ Tools to generate random errors.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24122,"byte_end":24158,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24159,"byte_end":24162,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Any type implementing the [`NoiseModel`](NoiseModel) trait","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24163,"byte_end":24225,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/ can be used to sample random errors.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24226,"byte_end":24266,"line_start":4,"line_end":4,"column_start":1,"column_end":41}},{"value":"/ Most function needing random errors in this crate require","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24267,"byte_end":24328,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/ a noise model.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24329,"byte_end":24347,"line_start":6,"line_end":6,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24348,"byte_end":24351,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Some standard noise models such as","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24352,"byte_end":24390,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/ [`BinarySymmetricChannel`](BinarySymmetricChannel)","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24391,"byte_end":24445,"line_start":9,"line_end":9,"column_start":1,"column_end":55}},{"value":"/ are implemented.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24446,"byte_end":24466,"line_start":10,"line_end":10,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":599},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25750,"byte_end":25772,"line_start":15,"line_end":15,"column_start":12,"column_end":34},"name":"BinarySymmetricChannel","qualname":"::noise_model::binary_symmetric_channel::BinarySymmetricChannel","value":"BinarySymmetricChannel {  }","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"decl_id":null,"docs":" A binary symmetric channel flips at bit with\n the given probrability.","sig":null,"attributes":[{"value":"/ A binary symmetric channel flips at bit with","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25494,"byte_end":25542,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ the given probrability.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25543,"byte_end":25570,"line_start":10,"line_end":10,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25571,"byte_end":25574,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This noise model returns a `SparseBinVec` where","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25575,"byte_end":25626,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"/ the positions of each 1s are associated to bit flips.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25627,"byte_end":25684,"line_start":13,"line_end":13,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25951,"byte_end":25967,"line_start":22,"line_end":22,"column_start":12,"column_end":28},"name":"with_probability","qualname":"<BinarySymmetricChannel>::with_probability","value":"pub fn with_probability(Probability) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new binary symmetric channel with the given error probability.\n","sig":null,"attributes":[{"value":"/ Creates a new binary symmetric channel with the given error probability.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25863,"byte_end":25939,"line_start":21,"line_end":21,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":656},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27187,"byte_end":27204,"line_start":12,"line_end":12,"column_start":12,"column_end":29},"name":"DepolarizingNoise","qualname":"::noise_model::depolarizing::DepolarizingNoise","value":"DepolarizingNoise {  }","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"decl_id":null,"docs":" A depolarizing noise channel apply one of the 3 non-trivial Pauli\n operator with the given probrability.\n","sig":null,"attributes":[{"value":"/ A depolarizing noise channel apply one of the 3 non-trivial Pauli","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27010,"byte_end":27079,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/ operator with the given probrability.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27080,"byte_end":27121,"line_start":10,"line_end":10,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27414,"byte_end":27430,"line_start":20,"line_end":20,"column_start":12,"column_end":28},"name":"with_probability","qualname":"<DepolarizingNoise>::with_probability","value":"pub fn with_probability(Probability) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new binary symmetric channel with the given error probability.\n","sig":null,"attributes":[{"value":"/ Creates a new binary symmetric channel with the given error probability.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27326,"byte_end":27402,"line_start":19,"line_end":19,"column_start":5,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":306},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24642,"byte_end":24652,"line_start":19,"line_end":19,"column_start":11,"column_end":21},"name":"NoiseModel","qualname":"::noise_model::NoiseModel","value":"NoiseModel","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":307},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24706,"byte_end":24711,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Error","qualname":"::noise_model::NoiseModel::Error","value":"type Error;","parent":{"krate":0,"index":306},"children":[],"decl_id":null,"docs":" The type of the generated errors.\n","sig":null,"attributes":[{"value":"/ The type of the generated errors.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24659,"byte_end":24696,"line_start":20,"line_end":20,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24775,"byte_end":24797,"line_start":24,"line_end":24,"column_start":8,"column_end":30},"name":"sample_error_of_length","qualname":"::noise_model::NoiseModel::sample_error_of_length","value":"pub fn sample_error_of_length<R: Rng>(&Self, usize, &mut R) -> Self::Error","parent":{"krate":0,"index":306},"children":[],"decl_id":null,"docs":" Generates a random error of the given length.\n","sig":null,"attributes":[{"value":"/ Generates a random error of the given length.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24718,"byte_end":24767,"line_start":23,"line_end":23,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24871,"byte_end":24882,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"Probability","qualname":"::noise_model::Probability","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24920,"byte_end":24923,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Probability>::new","value":"pub fn new(f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":25050,"byte_end":25057,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Probability>::try_new","value":"pub fn try_new(f64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":25240,"byte_end":25245,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<Probability>::value","value":"pub fn value(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":317},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"quantum","qualname":"::quantum","value":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/mod.rs","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":449}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":721},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49872,"byte_end":49883,"line_start":8,"line_end":8,"column_start":12,"column_end":23},"name":"CssSyndrome","qualname":"::quantum::css::syndrome::CssSyndrome","value":"CssSyndrome { x, z }","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723}],"decl_id":null,"docs":" The binary representation of a syndrome for a CSS code.","sig":null,"attributes":[{"value":"/ The binary representation of a syndrome for a CSS code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49620,"byte_end":49679,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49680,"byte_end":49683,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The X part correponds to the syndrome measured by the X stabilizers","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49684,"byte_end":49755,"line_start":5,"line_end":5,"column_start":1,"column_end":72}},{"value":"/ and the Z part to the syndrome measured by the Z stabilizers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49756,"byte_end":49821,"line_start":6,"line_end":6,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":722},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49894,"byte_end":49895,"line_start":9,"line_end":9,"column_start":9,"column_end":10},"name":"x","qualname":"::quantum::css::syndrome::CssSyndrome::x","value":"sparse_bin_mat::SparseBinVecBase<std::vec::Vec<usize>>","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":723},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49919,"byte_end":49920,"line_start":10,"line_end":10,"column_start":9,"column_end":10},"name":"z","qualname":"::quantum::css::syndrome::CssSyndrome::z","value":"sparse_bin_mat::SparseBinVecBase<std::vec::Vec<usize>>","parent":{"krate":0,"index":721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":50039,"byte_end":50049,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"is_trivial","qualname":"<CssSyndrome>::is_trivial","value":"pub fn is_trivial(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the syndrome is the zero syndrome for both X and Z.\n","sig":null,"attributes":[{"value":"/ Checks if the syndrome is the zero syndrome for both X and Z.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49962,"byte_end":50027,"line_start":14,"line_end":14,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":735},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29499,"byte_end":29506,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"CssCode","qualname":"::quantum::css::CssCode","value":"CssCode {  }","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739}],"decl_id":null,"docs":" A quantum CSS code is defined from a pair of orthogonal linear codes.","sig":null,"attributes":[{"value":"/ A quantum CSS code is defined from a pair of orthogonal linear codes.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":28881,"byte_end":28954,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":28955,"byte_end":28958,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The checks of the first code are used as a binary representation","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":28959,"byte_end":29027,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ of the X stabilizers while the checks of the second code are used","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29028,"byte_end":29097,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ for the Z stabilizers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29098,"byte_end":29124,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29125,"byte_end":29128,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The codewords of the first code are used to generate the X logical operators","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29129,"byte_end":29209,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ while the codewords of the second code are used for the Z logical operators.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29210,"byte_end":29290,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29291,"byte_end":29294,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Any stabilizer generator or logical generator of a CSS code is","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29295,"byte_end":29361,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ either composed of only Is and Xs or only Is and Zs.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29362,"byte_end":29418,"line_start":24,"line_end":24,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29664,"byte_end":29667,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<CssCode>::new","value":"pub fn new(&LinearCode, &LinearCode) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29794,"byte_end":29801,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"try_new","qualname":"<CssCode>::try_new","value":"pub fn try_new(&LinearCode, &LinearCode) -> Result<Self, CssError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":30603,"byte_end":30614,"line_start":57,"line_end":57,"column_start":12,"column_end":23},"name":"steane_code","qualname":"<CssCode>::steane_code","value":"pub fn steane_code() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an instance of the Steane code which is construct\n from a pair of classical Hamming codes.\n","sig":null,"attributes":[{"value":"/ Returns an instance of the Steane code which is construct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":30482,"byte_end":30543,"line_start":55,"line_end":55,"column_start":5,"column_end":66}},{"value":"/ from a pair of classical Hamming codes.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":30548,"byte_end":30591,"line_start":56,"line_end":56,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":30794,"byte_end":30803,"line_start":63,"line_end":63,"column_start":12,"column_end":21},"name":"shor_code","qualname":"<CssCode>::shor_code","value":"pub fn shor_code() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an instance of the Shor code.\n","sig":null,"attributes":[{"value":"/ Returns an instance of the Shor code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":30741,"byte_end":30782,"line_start":62,"line_end":62,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":32141,"byte_end":32159,"line_start":103,"line_end":103,"column_start":12,"column_end":30},"name":"hypergraph_product","qualname":"<CssCode>::hypergraph_product","value":"pub fn hypergraph_product(&LinearCode, &LinearCode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the hypergraph product of two linear codes.","sig":null,"attributes":[{"value":"/ Returns the hypergraph product of two linear codes.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31449,"byte_end":31504,"line_start":85,"line_end":85,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31509,"byte_end":31512,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31517,"byte_end":31530,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31535,"byte_end":31538,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31543,"byte_end":31550,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::CssCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31555,"byte_end":31588,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/ # use ldpc::classical::LinearCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31593,"byte_end":31631,"line_start":91,"line_end":91,"column_start":5,"column_end":43}},{"value":"/ let repetition_code = LinearCode::repetition_code(3);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31636,"byte_end":31693,"line_start":92,"line_end":92,"column_start":5,"column_end":62}},{"value":"/ let surface_code = CssCode::hypergraph_product(&repetition_code, &repetition_code);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31698,"byte_end":31785,"line_start":93,"line_end":93,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31790,"byte_end":31793,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ use pauli::{PauliOperator, X, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31798,"byte_end":31835,"line_start":95,"line_end":95,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31840,"byte_end":31843,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let logical_x = PauliOperator::new(13, vec![0, 3, 6], vec![X, X, X]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31848,"byte_end":31921,"line_start":97,"line_end":97,"column_start":5,"column_end":78}},{"value":"/ assert!(surface_code.has_logical(&logical_x));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31926,"byte_end":31976,"line_start":98,"line_end":98,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31981,"byte_end":31984,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let logical_z = PauliOperator::new(13, vec![0, 1, 2], vec![Z, Z, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":31989,"byte_end":32062,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ assert!(surface_code.has_logical(&logical_z));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":32067,"byte_end":32117,"line_start":101,"line_end":101,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":32122,"byte_end":32129,"line_start":102,"line_end":102,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33547,"byte_end":33550,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"len","qualname":"<CssCode>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of physical qubits in the code.\n","sig":null,"attributes":[{"value":"/ Returns the number of physical qubits in the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33481,"byte_end":33535,"line_start":139,"line_end":139,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33687,"byte_end":33695,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<CssCode>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the code has zero physical qubits.\n","sig":null,"attributes":[{"value":"/ Checks if the code has zero physical qubits.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33627,"byte_end":33675,"line_start":144,"line_end":144,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33812,"byte_end":33823,"line_start":150,"line_end":150,"column_start":12,"column_end":23},"name":"num_x_stabs","qualname":"<CssCode>::num_x_stabs","value":"pub fn num_x_stabs(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of x stabilizer generators.  \n","sig":null,"attributes":[{"value":"/ Returns the number of x stabilizer generators.  ","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33748,"byte_end":33800,"line_start":149,"line_end":149,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33959,"byte_end":33970,"line_start":155,"line_end":155,"column_start":12,"column_end":23},"name":"num_z_stabs","qualname":"<CssCode>::num_z_stabs","value":"pub fn num_z_stabs(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of z stabilizer generators.\n","sig":null,"attributes":[{"value":"/ Returns the number of z stabilizer generators.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":33897,"byte_end":33947,"line_start":154,"line_end":154,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34103,"byte_end":34117,"line_start":160,"line_end":160,"column_start":12,"column_end":26},"name":"num_x_logicals","qualname":"<CssCode>::num_x_logicals","value":"pub fn num_x_logicals(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of x logical generators.\n","sig":null,"attributes":[{"value":"/ Returns the number of x logical generators.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34044,"byte_end":34091,"line_start":159,"line_end":159,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34247,"byte_end":34261,"line_start":165,"line_end":165,"column_start":12,"column_end":26},"name":"num_z_logicals","qualname":"<CssCode>::num_z_logicals","value":"pub fn num_z_logicals(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of z logical generators.\n","sig":null,"attributes":[{"value":"/ Returns the number of z logical generators.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34188,"byte_end":34235,"line_start":164,"line_end":164,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35137,"byte_end":35148,"line_start":190,"line_end":190,"column_start":12,"column_end":23},"name":"syndrome_of","qualname":"<CssCode>::syndrome_of","value":"pub fn syndrome_of(&Self, &PauliOperator) -> CssSyndrome","parent":null,"children":[],"decl_id":null,"docs":" Returns both the X and Z parts of the syndrome of the given operator.","sig":null,"attributes":[{"value":"/ Returns both the X and Z parts of the syndrome of the given operator.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34332,"byte_end":34405,"line_start":169,"line_end":169,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34410,"byte_end":34413,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The X part is the syndrome obtained from the X stabilizers and","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34418,"byte_end":34484,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/ the Z part is the one from the Z stabilizers.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34489,"byte_end":34538,"line_start":172,"line_end":172,"column_start":5,"column_end":54}},{"value":"/ Therefore, the X syndrome corresponds to the Z errors and vice-versa.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34543,"byte_end":34616,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34621,"byte_end":34624,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34629,"byte_end":34642,"line_start":175,"line_end":175,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34647,"byte_end":34650,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34655,"byte_end":34662,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::{CssCode, CssSyndrome};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34667,"byte_end":34715,"line_start":178,"line_end":178,"column_start":5,"column_end":53}},{"value":"/ use pauli::{X, Z, PauliOperator};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34720,"byte_end":34757,"line_start":179,"line_end":179,"column_start":5,"column_end":42}},{"value":"/ use sparse_bin_mat::SparseBinVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34762,"byte_end":34799,"line_start":180,"line_end":180,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34804,"byte_end":34807,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ let code = CssCode::shor_code();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34812,"byte_end":34848,"line_start":182,"line_end":182,"column_start":5,"column_end":41}},{"value":"/ let error = PauliOperator::new(9, vec![1, 7], vec![X, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34853,"byte_end":34915,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"/ let expected = CssSyndrome {","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34920,"byte_end":34952,"line_start":184,"line_end":184,"column_start":5,"column_end":37}},{"value":"/     x: SparseBinVec::new(2, vec![1]),","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":34957,"byte_end":34998,"line_start":185,"line_end":185,"column_start":5,"column_end":46}},{"value":"/     z: SparseBinVec::new(6, vec![0, 1])","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35003,"byte_end":35046,"line_start":186,"line_end":186,"column_start":5,"column_end":48}},{"value":"/ };","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35051,"byte_end":35057,"line_start":187,"line_end":187,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(code.syndrome_of(&error), expected);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35062,"byte_end":35113,"line_start":188,"line_end":188,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35118,"byte_end":35125,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36097,"byte_end":36108,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"has_logical","qualname":"<CssCode>::has_logical","value":"pub fn has_logical(&Self, &PauliOperator) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if an operator is a (potentially trivial) logical operator of the code.","sig":null,"attributes":[{"value":"/ Checks if an operator is a (potentially trivial) logical operator of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35500,"byte_end":35582,"line_start":199,"line_end":199,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35587,"byte_end":35590,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35595,"byte_end":35608,"line_start":201,"line_end":201,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35613,"byte_end":35616,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35621,"byte_end":35628,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::{CssCode, CssSyndrome};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35633,"byte_end":35681,"line_start":204,"line_end":204,"column_start":5,"column_end":53}},{"value":"/ use pauli::{X, Z, PauliOperator};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35686,"byte_end":35723,"line_start":205,"line_end":205,"column_start":5,"column_end":42}},{"value":"/ use sparse_bin_mat::SparseBinVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35728,"byte_end":35765,"line_start":206,"line_end":206,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35770,"byte_end":35773,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let code = CssCode::shor_code();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35778,"byte_end":35814,"line_start":208,"line_end":208,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35819,"byte_end":35822,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let logical = PauliOperator::new(9, vec![0, 3, 6], vec![Z, Z, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35827,"byte_end":35897,"line_start":210,"line_end":210,"column_start":5,"column_end":75}},{"value":"/ assert!(code.has_logical(&logical));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35902,"byte_end":35942,"line_start":211,"line_end":211,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35947,"byte_end":35950,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let operator = PauliOperator::new(9, vec![0, 3, 6], vec![Z, X, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":35955,"byte_end":36026,"line_start":213,"line_end":213,"column_start":5,"column_end":76}},{"value":"/ assert!(!code.has_logical(&operator));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36031,"byte_end":36073,"line_start":214,"line_end":214,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36078,"byte_end":36085,"line_start":215,"line_end":215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36831,"byte_end":36845,"line_start":237,"line_end":237,"column_start":12,"column_end":26},"name":"has_stabilizer","qualname":"<CssCode>::has_stabilizer","value":"pub fn has_stabilizer(&Self, &PauliOperator) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if an operator is a stabilizer of the code.","sig":null,"attributes":[{"value":"/ Checks if an operator is a stabilizer of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36211,"byte_end":36265,"line_start":220,"line_end":220,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36270,"byte_end":36273,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36278,"byte_end":36291,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36296,"byte_end":36299,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36304,"byte_end":36311,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::{CssCode, CssSyndrome};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36316,"byte_end":36364,"line_start":225,"line_end":225,"column_start":5,"column_end":53}},{"value":"/ use pauli::{X, Y, Z, PauliOperator};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36369,"byte_end":36409,"line_start":226,"line_end":226,"column_start":5,"column_end":45}},{"value":"/ use sparse_bin_mat::SparseBinVec;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36414,"byte_end":36451,"line_start":227,"line_end":227,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36456,"byte_end":36459,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ let code = CssCode::shor_code();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36464,"byte_end":36500,"line_start":229,"line_end":229,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36505,"byte_end":36508,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ let stabilizer = PauliOperator::new(9, vec![0, 1, 2, 3, 4, 5], vec![X, X, X, X, Y, Y]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36513,"byte_end":36604,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ assert!(code.has_stabilizer(&stabilizer));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36609,"byte_end":36655,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36660,"byte_end":36663,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let operator = PauliOperator::new(9, vec![0, 1, 2, 3, 4, 6], vec![X, X, X, X, Y, Z]);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36668,"byte_end":36757,"line_start":234,"line_end":234,"column_start":5,"column_end":94}},{"value":"/ assert!(!code.has_stabilizer(&operator));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36762,"byte_end":36807,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":36812,"byte_end":36819,"line_start":236,"line_end":236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37153,"byte_end":37167,"line_start":246,"line_end":246,"column_start":12,"column_end":26},"name":"x_stabs_binary","qualname":"<CssCode>::x_stabs_binary","value":"pub fn x_stabs_binary(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns the binary matrix representing the X stabilizer\n generators in binary form.\n","sig":null,"attributes":[{"value":"/ Returns the binary matrix representing the X stabilizer","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37047,"byte_end":37106,"line_start":244,"line_end":244,"column_start":5,"column_end":64}},{"value":"/ generators in binary form.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37111,"byte_end":37141,"line_start":245,"line_end":245,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37339,"byte_end":37353,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"z_stabs_binary","qualname":"<CssCode>::z_stabs_binary","value":"pub fn z_stabs_binary(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns the binary matrix representing the Z stabilizer\n generators in binary form.\n","sig":null,"attributes":[{"value":"/ Returns the binary matrix representing the Z stabilizer","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37233,"byte_end":37292,"line_start":250,"line_end":250,"column_start":5,"column_end":64}},{"value":"/ generators in binary form.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37297,"byte_end":37327,"line_start":251,"line_end":251,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37522,"byte_end":37539,"line_start":258,"line_end":258,"column_start":12,"column_end":29},"name":"x_logicals_binary","qualname":"<CssCode>::x_logicals_binary","value":"pub fn x_logicals_binary(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns the binary matrix representing the X logical\n generators in binary form.\n","sig":null,"attributes":[{"value":"/ Returns the binary matrix representing the X logical","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37419,"byte_end":37475,"line_start":256,"line_end":256,"column_start":5,"column_end":61}},{"value":"/ generators in binary form.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37480,"byte_end":37510,"line_start":257,"line_end":257,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37705,"byte_end":37722,"line_start":264,"line_end":264,"column_start":12,"column_end":29},"name":"z_logicals_binary","qualname":"<CssCode>::z_logicals_binary","value":"pub fn z_logicals_binary(&Self) -> &SparseBinMat","parent":null,"children":[],"decl_id":null,"docs":" Returns the binary matrix representing the Z logical\n generators in binary form.\n","sig":null,"attributes":[{"value":"/ Returns the binary matrix representing the Z logical","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37602,"byte_end":37658,"line_start":262,"line_end":262,"column_start":5,"column_end":61}},{"value":"/ generators in binary form.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37663,"byte_end":37693,"line_start":263,"line_end":263,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38772,"byte_end":38783,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"stabilizers","qualname":"<CssCode>::stabilizers","value":"pub fn stabilizers<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator throught all stabilizer generators of the code.","sig":null,"attributes":[{"value":"/ Returns an iterator throught all stabilizer generators of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37785,"byte_end":37856,"line_start":268,"line_end":268,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37861,"byte_end":37864,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37869,"byte_end":37882,"line_start":270,"line_end":270,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37887,"byte_end":37890,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37895,"byte_end":37902,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::CssCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37907,"byte_end":37940,"line_start":273,"line_end":273,"column_start":5,"column_end":38}},{"value":"/ use pauli::{PauliOperator, X, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37945,"byte_end":37982,"line_start":274,"line_end":274,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37987,"byte_end":37990,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let code = CssCode::steane_code();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":37995,"byte_end":38033,"line_start":276,"line_end":276,"column_start":5,"column_end":43}},{"value":"/ let mut stabilizers = code.stabilizers();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38038,"byte_end":38083,"line_start":277,"line_end":277,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38088,"byte_end":38091,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stabilizers.next(), Some(PauliOperator::new(7, vec![3, 4, 5, 6], vec![X; 4])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38096,"byte_end":38190,"line_start":279,"line_end":279,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(stabilizers.next(), Some(PauliOperator::new(7, vec![1, 2, 5, 6], vec![X; 4])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38195,"byte_end":38289,"line_start":280,"line_end":280,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(stabilizers.next(), Some(PauliOperator::new(7, vec![0, 2, 4, 6], vec![X; 4])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38294,"byte_end":38388,"line_start":281,"line_end":281,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38393,"byte_end":38396,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(stabilizers.next(), Some(PauliOperator::new(7, vec![3, 4, 5, 6], vec![Z; 4])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38401,"byte_end":38495,"line_start":283,"line_end":283,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(stabilizers.next(), Some(PauliOperator::new(7, vec![1, 2, 5, 6], vec![Z; 4])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38500,"byte_end":38594,"line_start":284,"line_end":284,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(stabilizers.next(), Some(PauliOperator::new(7, vec![0, 2, 4, 6], vec![Z; 4])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38599,"byte_end":38693,"line_start":285,"line_end":285,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38698,"byte_end":38701,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ assert!(stabilizers.next().is_none());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38706,"byte_end":38748,"line_start":287,"line_end":287,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":38753,"byte_end":38760,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39948,"byte_end":39956,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"logicals","qualname":"<CssCode>::logicals","value":"pub fn logicals<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator throught all logical operator generators of the code.","sig":null,"attributes":[{"value":"/ Returns an iterator throught all logical operator generators of the code.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39434,"byte_end":39511,"line_start":309,"line_end":309,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39516,"byte_end":39519,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39524,"byte_end":39537,"line_start":311,"line_end":311,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39542,"byte_end":39545,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39550,"byte_end":39557,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::CssCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39562,"byte_end":39595,"line_start":314,"line_end":314,"column_start":5,"column_end":38}},{"value":"/ use pauli::{PauliOperator, X, Z};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39600,"byte_end":39637,"line_start":315,"line_end":315,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39642,"byte_end":39645,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let code = CssCode::shor_code();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39650,"byte_end":39686,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/ let mut logicals = code.logicals();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39691,"byte_end":39730,"line_start":318,"line_end":318,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39735,"byte_end":39738,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(logicals.next(), Some(PauliOperator::new(9, vec![0, 1, 2], vec![X; 3])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39743,"byte_end":39831,"line_start":320,"line_end":320,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(logicals.next(), Some(PauliOperator::new(9, vec![0, 3, 6], vec![Z; 3])));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39836,"byte_end":39924,"line_start":321,"line_end":321,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":39929,"byte_end":39936,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41128,"byte_end":41140,"line_start":359,"line_end":359,"column_start":12,"column_end":24},"name":"random_error","qualname":"<CssCode>::random_error","value":"pub fn random_error<N, R>(&Self, &N, &mut R) -> PauliOperator where\nN: NoiseModel<Error = PauliOperator>, R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Generates a random error with the given noise model.","sig":null,"attributes":[{"value":"/ Generates a random error with the given noise model.","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40619,"byte_end":40675,"line_start":343,"line_end":343,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40680,"byte_end":40683,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40688,"byte_end":40701,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40706,"byte_end":40709,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40714,"byte_end":40721,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/ # use ldpc::quantum::CssCode;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40726,"byte_end":40759,"line_start":348,"line_end":348,"column_start":5,"column_end":38}},{"value":"/ use ldpc::noise_model::{DepolarizingNoise, Probability};","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40764,"byte_end":40824,"line_start":349,"line_end":349,"column_start":5,"column_end":65}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40829,"byte_end":40854,"line_start":350,"line_end":350,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40859,"byte_end":40862,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ let code = CssCode::steane_code();","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40867,"byte_end":40905,"line_start":352,"line_end":352,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40910,"byte_end":40913,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ let noise = DepolarizingNoise::with_probability(Probability::new(0.25));","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40918,"byte_end":40994,"line_start":354,"line_end":354,"column_start":5,"column_end":81}},{"value":"/ let error = code.random_error(&noise, &mut thread_rng());","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":40999,"byte_end":41060,"line_start":355,"line_end":355,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41065,"byte_end":41068,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(error.len(), 7);","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41073,"byte_end":41104,"line_start":357,"line_end":357,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41109,"byte_end":41116,"line_start":358,"line_end":358,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":808},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41411,"byte_end":41431,"line_start":370,"line_end":370,"column_start":5,"column_end":25},"name":"DifferentXandZLength","qualname":"::quantum::css::CssError::DifferentXandZLength","value":"CssError::DifferentXandZLength(usize, usize)","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":812},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41451,"byte_end":41469,"line_start":371,"line_end":371,"column_start":5,"column_end":23},"name":"NonOrthogonalCodes","qualname":"::quantum::css::CssError::NonOrthogonalCodes","value":"CssError::NonOrthogonalCodes","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":807},"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41396,"byte_end":41404,"line_start":369,"line_end":369,"column_start":10,"column_end":18},"name":"CssError","qualname":"::quantum::css::CssError","value":"pub enum CssError { DifferentXandZLength(usize, usize), NonOrthogonalCodes, }","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":812}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":1015,"byte_end":1026,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":1114,"byte_end":1125,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":2229,"byte_end":2240,"line_start":50,"line_end":50,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19419,"byte_end":19424,"line_start":15,"line_end":15,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19623,"byte_end":19628,"line_start":23,"line_end":23,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21308,"byte_end":21325,"line_start":19,"line_end":19,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":23461,"byte_end":23474,"line_start":86,"line_end":86,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":23787,"byte_end":23800,"line_start":97,"line_end":97,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":24104,"byte_end":24117,"line_start":107,"line_end":107,"column_start":16,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5851,"byte_end":5861,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25834,"byte_end":25856,"line_start":20,"line_end":20,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":26233,"byte_end":26255,"line_start":32,"line_end":32,"column_start":21,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":26641,"byte_end":26663,"line_start":46,"line_end":46,"column_start":23,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27302,"byte_end":27319,"line_start":18,"line_end":18,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27743,"byte_end":27760,"line_start":31,"line_end":31,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":28373,"byte_end":28390,"line_start":51,"line_end":51,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24895,"byte_end":24906,"line_start":29,"line_end":29,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/logicals.rs","byte_start":44934,"byte_end":44942,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49944,"byte_end":49955,"line_start":13,"line_end":13,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29643,"byte_end":29650,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":424},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41501,"byte_end":41509,"line_start":374,"line_end":374,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41894,"byte_end":41902,"line_start":385,"line_end":385,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":530,"byte_end":539,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/mod.rs","byte_start":588,"byte_end":596,"line_start":1,"line_end":1,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":549,"byte_end":560,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":195}},{"kind":"Mod","span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/lib.rs","byte_start":570,"byte_end":577,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":317}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":1015,"byte_end":1026,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":1114,"byte_end":1125,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/decoders/flip.rs","byte_start":2229,"byte_end":2240,"line_start":50,"line_end":50,"column_start":26,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19419,"byte_end":19424,"line_start":15,"line_end":15,"column_start":13,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/edges.rs","byte_start":19623,"byte_end":19628,"line_start":23,"line_end":23,"column_start":26,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":479},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":21308,"byte_end":21325,"line_start":19,"line_end":19,"column_start":6,"column_end":23},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":23461,"byte_end":23474,"line_start":86,"line_end":86,"column_start":6,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":23787,"byte_end":23800,"line_start":97,"line_end":97,"column_start":23,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":510},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/random.rs","byte_start":24104,"byte_end":24117,"line_start":107,"line_end":107,"column_start":16,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":510},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/classical/linear_code/mod.rs","byte_start":5851,"byte_end":5861,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":25834,"byte_end":25856,"line_start":20,"line_end":20,"column_start":6,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":26233,"byte_end":26255,"line_start":32,"line_end":32,"column_start":21,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":599},"to":{"krate":0,"index":306}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/binary_symmetric_channel.rs","byte_start":26641,"byte_end":26663,"line_start":46,"line_end":46,"column_start":23,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27302,"byte_end":27319,"line_start":18,"line_end":18,"column_start":6,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":27743,"byte_end":27760,"line_start":31,"line_end":31,"column_start":21,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":656},"to":{"krate":0,"index":306}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/depolarizing.rs","byte_start":28373,"byte_end":28390,"line_start":51,"line_end":51,"column_start":23,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":656},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/noise_model/mod.rs","byte_start":24895,"byte_end":24906,"line_start":29,"line_end":29,"column_start":6,"column_end":17},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/logicals.rs","byte_start":44934,"byte_end":44942,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/syndrome.rs","byte_start":49944,"byte_end":49955,"line_start":13,"line_end":13,"column_start":6,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":29643,"byte_end":29650,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":735},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41501,"byte_end":41509,"line_start":374,"line_end":374,"column_start":28,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":807},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/viet1004/.cargo/registry/src/github.com-1ecc6299db9ec823/ldpc-0.4.4/src/quantum/css/mod.rs","byte_start":41894,"byte_end":41902,"line_start":385,"line_end":385,"column_start":28,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":2326}}]}